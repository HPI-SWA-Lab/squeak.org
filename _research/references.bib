
@inproceedings{denker_higher_2006,
title = {Higher Abstractions for Dynamic Analysis}
  url = {http://scg.unibe.ch/archive/papers/Denk06cHigherAbstractionsPCODA06.pdf\\nhttp://www.lore.ua.ac.be/Events/PCODA2006/index.html},
  abstract = {The developers of tools for dynamic analysis are{\textbackslash}nfaced with choosing from the many approaches to{\textbackslash}ngathering runtime data. Typically, dynamic analysis{\textbackslash}ninvolves instrumenting the program under{\textbackslash}ninvestigation to record its runtime behavior.{\textbackslash}nCurrent approaches for byte-code based systems like{\textbackslash}nJava and Smalltalk rely often on inserting byte-code{\textbackslash}ninto the program under analysis. However, detailed{\textbackslash}nknowledge of the target programming language or{\textbackslash}nvirtual machine is required to implement dynamic{\textbackslash}nanalysis tools. Obtaining and exploiting this{\textbackslash}nknowledge to build better analysis tools is{\textbackslash}ncumbersome and often distracts the tool builder from{\textbackslash}nthe actual goal, which is the analysis of the{\textbackslash}nruntime behavior of a system. In this paper, we{\textbackslash}nargue that we need to adopt a higher level view of a{\textbackslash}nsoftware system when considering the task of{\textbackslash}nabstracting runtime information. We focus on{\textbackslash}nobject-oriented virtual machine based languages. We{\textbackslash}nwant to be able to deal with the runtime system as a{\textbackslash}ncollection of reified first-class entities. We{\textbackslash}npropose to achieve this by introducing a layer of{\textbackslash}nabstraction, i.e., a behavioral middle layer. This{\textbackslash}nhas the advantage that the task of collecting{\textbackslash}ndynamic information is not concerned with low level{\textbackslash}ndetails of a specific language or virtual machine.{\textbackslash}nThe positive effect of such a behavioral middle{\textbackslash}nlayer is twofold: on the one hand it provides us{\textbackslash}nwith a standard API for all dynamic analysis based{\textbackslash}ntools to use, on the other hand it allows the tool{\textbackslash}ndeveloper to abstract from the actual implementation{\textbackslash}ntechnique.},
  timestamp = {2015-06-26 15:49:28},
title = {2Nd International Workshop on Program Comprehension through Dynamic Analysis ({Pcoda} 2006)}
  publisher = {Universiteit Antwerpen},
author = {Marcus Denker and Orla Greevy and Michele Lanza},
  year = {2006},
  keywords = {scg-pub skip-doi snf07 jb07 fb06 reflectivity},
  pages = {32--38},
}

@inproceedings{rothlisberger_featurecentric_2007,
title = {Feature-Centric Environment}
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4290714},
  timestamp = {2015-06-26 15:49:28},
title = {4Th {Ieee} International Workshop on Visualizing Software for Understanding and Analysis ({Vissoft} 2007)}
  publisher = {{IEEE}},
author = {David R{\"o}thlisberger and Orla Greevy and Adrian Lienhard},
  year = {2007},
  pages = {150--151},
}

@inproceedings{engelhard_pitsupai_2009,
title = {Pitsupai - Collaborative Scripting in A Distributed, Persistent 3D World}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.11},
  abstract = {In this paper we present an authoring tool and an accompanying workflow to create interactive scenarios in a distributed 3D environment by multiple users. With Pitsupai we designed an environment that allows to create collaboratively simple games or game prototypes with a minimal effort, without the need to be a professional game developer. To facilitate collaborative work, our authoring tool uses a scripting language for easy programming and animation in the virtual world and provides awareness aspects - information regarding the whereabouts and current activities of the other participants. Scripts can be edited from within the running virtual world without the need for stopping or restarting it.},
  timestamp = {2015-06-26 15:49:25},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Philipp Engelhard and Robert Hirschfeld and Jens Lincke},
  year = {2009},
  pages = {87--94}
}

@inproceedings{freudenberg_etoys_2009,
title = {Etoys for One Laptop Per Child}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.9},
  abstract = {We present an overview of the {\textquestiondown}OLPC Etoys{\textquestiondown} system, describe the intensive two-year development effort that produced the system, and discuss lessons learned. OLPC Etoys is an end-user authoring system for children, which was chosen to be distributed with the OLPC XO laptops at an early stage of the OLPC project. Since we planned to derive OLPC Etoys by evolving an existing, mature system ({\textquestiondown}Squeakland{\textquestiondown}), it was expected to be a relatively straightforward undertaking. However, the OLPC XO platform's special hardware characteristics, the evolution of the Sugar software stack, and the fundamentally international and multilingual nature of the project, all conspired to make the development effort challenging. Over the two-year course of the project, we successfully kept up with the challenges, and delivered usable Etoys systems for every OLPC release. We steadily improved the UI, added a few high-leverage features, and fixed bugs, with a small and widely-distributed team and with help from the community.},
  timestamp = {2015-06-26 15:49:29},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Bert Freudenberg and Yoshiki Ohshima and Scott Wallace},
  year = {2009},
  keywords = {authoring systems,Collaborative learning,Computer bugs,computer literacy,courseware,education,end-user authoring system,EToys,Hardware,History,Home computing,International collaboration,Joining processes,OLPC,OLPC Etoys,OLPC project,OLPC XO laptop,Physics computing,portable computers,program debugging,Squeak,Sugar software stack,system bugs,Uncertainty},
  pages = {57--64}
}

@inproceedings{holz_sophie_2009,
title = {Sophie - Tools and Materials in Multimedia Book Creation}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.16},
  abstract = {Sophie is an authoring tool for interactive multimedia books. The Sophie user can combine different kinds of media and synchronize them with events and time. Such highly interactive systems are difficult to design and to implement. The large amount of functionality provided has to be balanced with a significant ease of use. The standard software engineering approaches for the construction of large software systems are insufficient concerning the special requirements of interactive systems. The tools and materials pattern language is an alternative approach to design interactive systems. This paper exemplifies the use and benefits of tools and materials by the Sophie application.},
  timestamp = {2015-06-26 15:49:24},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Norman Holz and Robert Hirschfeld and Jens Lincke and Michael Haupt and Michael R{\"u}ger},
  year = {2009},
  pages = {20--26}
}

@inproceedings{lunzer_building_2009,
title = {Building and Exploring with The {Recipesheet}}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.21},
  abstract = {The RecipeSheet is a spreadsheet-inspired environment for building applications that support the parallel, side-by-side exploration of alternative processing results. Our early investigations suggest that such an environment can be valuable for educational activities in which a student's understanding of some topic would be improved by being able to explore and compare many alternative cases. In this paper, oriented towards readers who are familiar with the Squeak environment on which the RecipeSheet has been built, we explain and illustrate the facilities available to end users for building their own applications. This is a step towards a release of the RecipeSheet to the community of educators who are excited by the general promise of Squeak, and the various kinds of tool that can be built with it.},
  timestamp = {2015-06-26 15:49:31},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Aran Lunzer and Jun Fujima},
  year = {2009},
  keywords = {computer aided instruction,educational activities,International collaboration,Joining processes,RecipeSheet,software engineering,spreadsheet-inspired environment,spreadsheet programs,Squeak environment},
  pages = {41--47}
}

@inproceedings{okada_environmental_2009,
title = {Environmental Information Viewing System ({Eivs}) Using Squeak on {Olpc}-{Xo}}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.14},
  abstract = {Our software (the EIVS) is designed for supporting environmental education by providing tools for (1) automatic data collection through networks, (2) data analysis, and (3) graph drawing of the environmental data measured by sensor-robots located at remote areas. Our software using Squeak (the Smalltalk environment) works on the hardware OLPC-XO with Squeak Virtual Machine. Our software on the OLPC-XO will allow a larger number of children using the OLPC-XO to recognize situations and problems of our environment for the discussions and the considerations of their better solutions.},
  timestamp = {2015-06-26 15:49:29},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Yasuhiko Okada and Takuma Yokomae and Shozi Mizobuchi and Nobukazu Iguchi and Sonoyo Mukai and Takaharu Kameoka},
  year = {2009},
  keywords = {Automatic data collection,Environmental education,OLPC-XO,Remotely located sensors,Squeak},
  pages = {65--70}
}

@inproceedings{otowa_development_2009,
title = {Development of A Project Exchange Tool for Squeak {Etoys} Using Tangible Media and Its Application to Primary Education}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.18},
  abstract = {In these days, some primary schools have computer-based lessons using programming tools such as Squeak eToys to promote the ability of logical thinking ability and scientific concept. However, some students often give up their study at the programming lessons, and how to keep their motivation is an important problem. This paper describes the development of a project exchange tool for Squeak eToys using tangible media. We also report the results of evaluation on the usefulness of this method through conducted verification in primary school.},
  timestamp = {2015-06-26 15:49:29},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Tadayuki Otowa and Hideyuki Takada},
  year = {2009},
  keywords = {Application software,Collaborative tools,Collaborative work,Collavoration Learning,computer aided instruction,computer-based lessons,Computer science education,Educational institutions,Educational programs,Joining processes,logical thinking ability,Logic programming,Personal communication networks,primary education,programming lesson,Programming profession,programming tools,project exchange tool,RFID tag,scientific concept,Squeak etoys,tangible media},
  pages = {71--77}
}

@inproceedings{sunaga_integration_2009,
title = {Integration of Expression and Analysis Using Constructive Scrapbook}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.27},
  abstract = {In this paper, we present how to use the Constructive Scrapbook to integrate expression and analysis and propose that its design is effective for learning. Constructive Scrapbook is a computer application in which the user arranges compositions of pictures in a two-dimensional space, makes various compositions, and switches them freely. Although subjective expression and objective analysis are treated as different activities in the educational world today, we have designed a tool that handles both types of activities simultaneously through constructive learning. Our objective is to have children and ordinary persons use various facets to analyze their expressions and then create new expressions.We held a workshop using the Constructive Scrapbook. The results show that the tool has the potential to make the user analyze expressions, extract significances to consider them deeply, and then create new expressions.},
  timestamp = {2015-06-26 15:49:27},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Takeshi Sunaga and Koji Yokokawa and Jae Sung Won},
  year = {2009},
  keywords = {Art,cognition,computer aided instruction,Computer applications,constructionism,constructive learning,Constructive Scrapbook tool,Documentation,education,Graphics,International collaboration,Joining processes,Numerical analysis,objective analysis,Painting,pictures composition,Software,Squeak,subjective expression,Switches,two-dimensional space},
  pages = {48--53}
}

@inproceedings{valente_what_2009,
title = {What If You Created Your Own Digital Adventurers' Park?}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.17},
  abstract = {In the ambient of a summer school, we have proposed to a group of nearly 40 students between 10 and 15 years old to create a digital adventures' park with Squeak. None of them knew the software nor had previous had programming knowledge and many little over the basic competences for the use of a computer, though they showed a special interest in computers. In this text we intend to approach some of the attitudes demonstrated by the students in the face of the challenge proposed at the course and their imaginary's transposition to Squeak's environment, in an ecologic perspective of the media. We will pay special attention to creativity's emergency which seems to us anchor the development of object-oriented programming competences in inexperienced programmers. In addition we will also refer to the self-learning and collaborative learning aspects resulting from the interaction between {\textquestiondown}creators{\textquestiondown} and {\textquestiondown}programmers{\textquestiondown}, in light of their importance in learning environments without a teacher.},
  timestamp = {2015-06-26 15:49:19},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Lu{\'\i}s Valente and Ant{\'o}nio Os{\'o}rio},
  year = {2009},
  keywords = {Adders,children programming,collaborative learning aspects,computer aided instruction,Computers,Computer science education,Concrete,creativity,digital adventure park,ecologic perspective of media,Educational institutions,IEC,International collaboration,Joining processes,Object-oriented programming,Object oriented programming,Programming profession,Proposals,self-learning,Squeak,Squeak environment},
  pages = {78--83}
}

@inproceedings{yamamiya_active_2009,
title = {Active Essays on The Web}
  isbn = {9780769536200},
  doi = {10.1109/C5.2009.10},
  abstract = {This paper describes "active essays" and their implementation with Internet technology. An active essay combines a written essay, program fragments, and the resulting live simulations into a single cohesive narrative. We believe the integration of programming and natural language makes a superior teaching medium for expressing mathematical, scientific, and even literary ideas. It is especially effective when it can be read, run, and authored in a Web browser. We review our previous implementations of active essays on the Web. Chalkboard is our latest active essay framework. We discuss Chalkboard's features, examples, design decisions, and unresolved issues.},
  timestamp = {2015-06-26 15:49:32},
title = {7Th International Conference on Creating, Connecting and Collaborating through Computing - C5 2009}
author = {Takashi Yamamiya and Alessandro Warth and Ted Kaehler},
  year = {2009},
  keywords = {active essays,Animation,Chalkboard,Computational modeling,computer aided instruction,Computer languages,Humans,International collaboration,Internet,Internet technology,Joining processes,literature,live simulations,Mathematical programming,natural language,Natural languages,online front-ends,program fragments,programming language,Programming Languages,teaching medium,Web browser,Web sites,written essay},
  pages = {3--10}
}

@inproceedings{yokokawa_using_2010,
title = {Using Zuzie2 to Exchange Viewpoints for A Broader Outlook}
  isbn = {9780769540290},
  doi = {10.1109/C5.2010.21},
  abstract = {In this paper, we present Zuzie2, a computer application designed to help people extend their interpretation of the meaning of their activities, and propose that Zuzie2 is effective in cultivating the power of understanding and expression. In an earlier paper we presented the Constructive Scrapbook computer application which has the potential to make the user analyze expressions, extract significances to consider them deeply, and then create new expressions. Zuzie2 is an improved version of the Constructive Scrapbook. Using this tool, in the same way as with the earlier version, the user arranges compositions of pictures in a two-dimensional space, makes various compositions, and switches them freely. In Zuzie2, we have added a new function that enables users to import composition grounds that show the viewpoints of other users into their works. Our objective is to have children and ordinary people use various facets to analyze their activities and then create new expressions. Humans think and express something in a conceptual framework such as ordering, classification, or quantity. However, the thoughts of a single person have limitations due to the fixed frame of viewpoint. We have designed this tool so that the viewpoints of other persons combine with the user's work to form new expressive works. We held a workshop using the Zuzie2 application. The results show that this tool has the potential to make users analyze their activities, import other viewpoints to consider them deeply, and then create new expressions.},
  timestamp = {2015-06-26 15:49:20},
title = {8Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2010}
author = {Koji Yokokawa and Takeshi Sunaga},
  year = {2010},
  keywords = {Art,computer aided instruction,computer application,Computer applications,constructive scrapbook,Documentation,expression analysis,Graphics,humanities,Humans,International collaboration,Joining processes,Numerical analysis,Painting,Switches,viewpoints exchanging,Zuzie2},
  pages = {35--40}
}

@inproceedings{gaelli_taxonomy_2005,
title = {Towards A Taxonomy of {Sunit} Tests}
  url = {http://www.old.inf.usi.ch/faculty/lanza/Downloads/Gael05a.pdf},
  abstract = {Not all unit tests are alike. Some tests are simple{\textbackslash}none-liners, while others contain a battery of{\textbackslash}nassertions. Certain tests focus on a single method,{\textbackslash}nwhile others test interactions between methods.{\textbackslash}nThere are even tests that do not contain assertions{\textbackslash}nat all. This can make it difficult for a developer{\textbackslash}nto understand which methods are tested by which{\textbackslash}ntests, to what degree they are tested, and what to{\textbackslash}ntake into account while refactoring. We have{\textbackslash}nmanually analyzed the test base of a large existing{\textbackslash}nobject-oriented system in order to derive a first{\textbackslash}ntaxonomy of unit tests. We have then developed some{\textbackslash}nsimple tools to semi-automatically categorize tests{\textbackslash}naccording to this taxonomy, and applied it to two{\textbackslash}ncase studies. Beside explaining our taxonomy, we{\textbackslash}nreport on our initial results using it, namely that{\textbackslash}na majority of unit tests focus on single methods and{\textbackslash}nthat our lightweight automatic categorization could{\textbackslash}nalready classify more than 50\% of these single{\textbackslash}nmethod commands.},
  timestamp = {2015-06-26 15:49:21},
title = {13Th International European Smalltalk Conference ({Esug} 2005)}
  publisher = {University of Bern, Switzerland},
author = {Markus Gaelli and Michele Lanza and Oscar Nierstrasz},
  year = {2005},
  keywords = {13th international european smalltalk,conference,conferences,esug,esug 2005,http,mustinclude,org,Reverse engineering,smalltalk,taxonomy,thirteenthinternationalconference2005,unit testing,www},
  pages = {1--22},
  file = {Nierstrasza - Towards a Taxonomy of SUnit Tests:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\CIUGS4VQ\\Nierstrasza - Towards a Taxonomy of SUnit Tests.pdf:application/pdf}
}

@inproceedings{galli_ordering_2004,
title = {Ordering Broken Unit Tests for Focused Debugging}
  isbn = {0-7695-2213-0},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1357796},
  doi = {10.1109/ICSM.2004.1357796},
  abstract = {Current unit test frameworks present broken unit tests in an arbitrary order, but developers want to focus on the most specific ones first. We have therefore inferred a partial order of unit tests corresponding to a coverage hierarchy of their sets of covered method signatures: When several unit tests in this coverage hierarchy break, we can guide the developer to the test calling the smallest number of methods. Our experiments with four case studies indicate that this partial order is semantically meaningful, since faults that cause a unit test to break generally cause less specific unit tests to break as well.},
  timestamp = {2015-06-26 15:49:25},
title = {20Th {Ieee} International Conference on Software Maintenance, 2004. Proceedings.}
  publisher = {{IEEE}},
author = {M. Galli and M. Lanza and O. Nierstrasz and R. Wuyts},
  year = {2004},
  pages = {114--123},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\9XA3GW9P\\articleDetails.html:text/html;Gälli et al. - 2004 - Ordering broken unit tests for focused debugging:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\X9VM2JHN\\Gälli et al. - 2004 - Ordering broken unit tests for focused debugging.pdf:application/pdf}
}

@inproceedings{steinert_multiuser_2009,
title = {Multi-User Multi-Account Interaction in Groupware Supporting Single-Display Collaboration}
  isbn = {978-963-9799-76-9},
  doi = {10.4108/ICST.COLLABORATECOM2009.8290},
  abstract = {Combining support for single display collaboration with support for asynchronous and remote collaboration in one groupware challenges some basic assumptions of application design and brings up new requirements for application platforms. While user accounts are central in many kinds of groupware, they are not respected in groupware support for multi-user single-screen interaction. Current support for this interaction paradigm does not allow users to act on their own behalf; they have to act on behalf of a host user. We suggest an approach to distinguish the interactions with different users in multi-user single-screen scenarios. Our approach enables applications to link actions to the acting user's account. We describe the integration of suggested concepts in the groupware ProjectTalk, an application for managing XP projects that supports multi-user single-screen interaction. All interacting users are allowed to work with ProjectTalk on their own behalf.},
  timestamp = {2015-06-26 15:49:26},
title = {2009 5Th International Conference on Collaborative Computing: Networking, Applications and Worksharing}
author = {B. Steinert and M. Grunewald and S. Richter and J. Lincke and R. Hirschfeld},
  year = {2009}
}

@inproceedings{morimoto_development_2012,
title = {Development of A Programing-Project Sharing Environment on Virtual Space}
  isbn = {978-1-4673-1009-3},
  doi = {10.1109/C5.2012.11},
  abstract = {Recently, there are classes using GUI programming environment such as Squeak Etoys or Scratch in primary education. When children study in such environment, children do not have enough opportunity to view the other's works and show their own work to parents and it is difficult to perform mutual evaluation and review lesson. In this paper, we propose an environment where children or parents can view the children's works on virtual space. It can provide opportunities for children to do mutual evaluation or review the past lesson. We have deployed this system to classes using GUI-programming environment and conducted a questionnaire for children. As a result, seven out of eleven children could view the other's works well. Moreover, eight out of ten children could find a scene in which other children watch the work together, and among these children, six of them viewed this attracting work.},
  timestamp = {2015-06-26 15:49:30},
title = {2012 10Th \{International\} \{Conference\} on \{Creating\}, \{Connecting\} and \{Collaborating\} through \{Computing\} (\{C\}5)}
author = {Tatsuya Morimoto and Ai Ohira},
  year = {2012},
  keywords = {Avatars,collaboration space,computer aided instruction,Educational institutions,graphical user interfaces,groupware,GUI programming environment,Motion pictures,primary education,Programming profession,programming-project sharing environment,Scratch,Squeak,Synchronization,virtual reality,virtual space},
  pages = {29--36}
}

@inproceedings{perscheid_follow_2014,
title = {Follow The Path: Debugging Tools for Test-Driven Fault Navigation}
  isbn = {978-1-4799-3752-3},
  url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6747215},
  doi = {10.1109/CSMR-WCRE.2014.6747215},
  timestamp = {2015-06-26 15:49:28},
title = {2014 Software Evolution Week - {Ieee} Conference on Software Maintenance, Reengineering, and Reverse Engineering ({Csmr}-{Wcre})}
author = {Michael Perscheid and Robert Hirschfeld},
  year = {2014},
  pages = {446--449}
}

@inproceedings{perscheid_follow_2014a,
title = {Follow The Path: Debugging State Anomalies Along Execution Histories}
  isbn = {9781479937516},
  doi = {10.1109/CSMR-WCRE.2014.6747162},
  abstract = {To understand how observable failures come into being, back-in-time debuggers help developers by providing full access to past executions. However, such potentially large execution histories do not include any hints to failure causes. For that reason, developers are forced to ascertain unexpected state properties and wrong behavior completely on their own. Without deep program understanding, back-in-time debugging can end in countless and difficult questions about possible failure causes that consume a lot of time for following failures back to their root causes. In this paper, we present state navigation as a debugging guide that highlights unexpected state properties along execution histories. After deriving common object properties from the expected behavior of passing test cases, we generate likely invariants, compare them with the failing run, and map differences as state anomalies to the past execution. So, developers obtain a common thread through the large amount of run-time data which helps them to answer what causes the observable failure. We implement our completely automatic state navigation as part of our test-driven fault navigation and its Path tools framework. To evaluate our approach, we observe eight developers during debugging four non-trivial failures. As a result, we find out that our state navigation is able to aid developers and to decrease the required time for localizing the root cause of a failure. {\textcopyright} 2014 IEEE.},
  timestamp = {2015-06-26 15:49:28},
title = {2014 Software Evolution Week - {Ieee} Conference on Software Maintenance, Reengineering, and Reverse Engineering, {Csmr}-{Wcre} 2014 - Proceedings}
author = {Michael Perscheid and Tim Felgentreff and Robert Hirschfeld},
  year = {2014},
  keywords = {Back-in-time Debugging,dynamic analysis,Likely Invariants,Test-driven Fault Navigation,Testing},
  pages = {124--133}
}

@inproceedings{denker_encapsulating_2007,
title = {Encapsulating and Exploiting Change with Changeboxes}
  isbn = {9781605580845},
  url = {http://portal.acm.org/citation.cfm?id=1352681},
  doi = {10.1145/1352678.1352681},
  abstract = {Real world software systems change continuously to meet new demands. Most programming languages and development environments, however, are more concerned with limiting the effects of change rather than enabling and exploiting change. Various techniques and technologies to exploit change have been developed over the years, but there exists no common support for these approaches. We propose Changeboxes as a general-purpose mechanism for encapsulating change as a first-class entity in a running software system. Changeboxes support multiple, concurrent and possibly inconsistent views of software artifacts within the same running system. Since Changeboxes are first-class, they can be manipulated to control the scope of change in a running system. Furthermore, Changeboxes capture the semantics of change. Changeboxes can be used, for example, to encapsulate refactorings, or to replay or analyze the history of changes. In this paper we introduce Changeboxes by means of a prototype implementation. We illustrate the benefits that Changeboxes offer for evolving software systems, and we present the results of a preliminary performance evaluation that assesses the costs associated with Changeboxes while suggesting possible strategies for improvement.},
  timestamp = {2015-06-26 15:49:29},
title = {{Acm} International Conference Proceeding Series}
  publisher = {{ACM}},
author = {Marcus Denker and T G{\^\i}rba and Adrian Lienhard and Oscar Nierstrasz and Lukas Renggli and Pascal Zumkehr},
  year = {2007},
  pages = {25--49},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\8NIZWFVZ\\citation.html:text/html;Denker et al. - 2007 - Encapsulating and exploiting change with changebox:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\M2D438ND\\Denker et al. - 2007 - Encapsulating and exploiting change with changebox.pdf:application/pdf}
}

@inproceedings{scharli_objectoriented_2004,
title = {Object-Oriented Encapsulation for Dynamically Typed Languages}
  volume = {39},
  isbn = {1-58113-831-9},
  url = {http://dl.acm.org/citation.cfm?id=1028988},
  doi = {10.1145/1035292.1028988},
  abstract = {Encapsulation in object-oriented languages has traditionally been based on static type systems. As a consequence, dynamically-typed languages have only limited support for encapsulation. This is surprising, considering that encapsulation is one of the most fundamental and important concepts behind object-oriented programming and that it is essential for writing programs that are maintainable and reliable, and that remain robust as they evolve.},
  timestamp = {2015-06-26 15:49:26},
title = {{Acm} {Sigplan} Notices}
  publisher = {{ACM}},
author = {Nathanael Sch{\"a}rli and Andrew P. Black and St{\'e}phane Ducasse},
  year = {2004},
  pages = {130--130},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\275FP3UH\\citation.html:text/html;Schärli et al. - 2004 - Object-oriented encapsulation for dynamically type:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\PAGUX9Q8\\Schärli et al. - 2004 - Object-oriented encapsulation for dynamically type.pdf:application/pdf}
}

@incollection{tanter_partial_2003,
title = {Partial Behavioral Reflection}
  volume = {38},
  isbn = {1581137125},
  url = {http://link.springer.com/chapter/10.1007/978-3-540-71836-9_3},
  timestamp = {2015-06-26 15:49:25},
title = {{Acm} {Sigplan} Notices}
  publisher = {Springer},
author = {{\'E}ric Tanter and Jacques Noy{\'e} and Denis Caromel and Pierre Cointe},
  year = {2003},
  pages = {27--27},
  file = {978-3-540-71836-9_3:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\56MS7EXX\\978-3-540-71836-9_3.html:text/html;Röthlisberger et al. - 2007 - Unanticipated partial behavioral reflection:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\5WA6NRBQ\\Röthlisberger et al. - 2007 - Unanticipated partial behavioral reflection.pdf:application/pdf}
}

@article{ducasse_traits_2006,
title = {Traits: A Mechanism for Fine-Grained Reuse}
  volume = {28},
  url = {http://dl.acm.org/citation.cfm?id=1119483},
  doi = {10.1145/1119479.1119483},
  abstract = {Inheritance is well-known and accepted as a mechanism for reuse in object-oriented languages. Unfortunately, due to the coarse granularity of inheritance, it may be difficult to decompose an application into an optimal class hierarchy that maximizes software reuse. Existing schemes based on single inheritance, multiple inheritance, or mixins, all pose numerous problems for reuse. To overcome these problems we propose traits, pure units of reuse consisting only of methods. We develop a formal model of traits that establishes how traits can be composed, either to form other traits, or to form classes. We also outline an experimental validation in which we apply traits to refactor a non-trivial application into composable units.},
  timestamp = {2015-06-26 15:49:21},
  number = {2},
  journal = {{ACM} Transactions on Programming Languages and Systems},
author = {St{\'e}phane Ducasse and Oscar Nierstrasz and Nathaniel Sch{\"a}rli and Roel Wuyts and Andrew P. Black},
  year = {2006},
  keywords = {inheritance,languages,mixins,multiple inheritance,reuse,smalltalk,traits},
  pages = {331--338},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\4XS495QF\\citation.html:text/html;Ducasse et al. - 2006 - Traits A mechanism for fine-grained reuse:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\BR3P3U5S\\Ducasse et al. - 2006 - Traits A mechanism for fine-grained reuse.pdf:application/pdf}
}

@article{nierstrasz_separating_2005,
title = {Separating Concerns with First-Class Namespaces}
  issn = {0-321-21976-7},
  url = {http://scg.unibe.ch/archive/papers/Nier05aNamespaces.pdf},
  abstract = {As applications evolve, it becomes harder and harder{\textbackslash}nto separate independent concerns. Small changes to a{\textbackslash}nsoftware system increasingly affect different parts{\textbackslash}nof the source code. AOP and related approaches offer{\textbackslash}nvarious ways to separate concerns into concrete{\textbackslash}nsoftware artifacts, but what is the {\textbackslash}emph\{essence\}{\textbackslash}nof this process? We claim that first-class{\textbackslash}nnamespaces ---which we refer to as {\textbackslash}emph\{forms\}---{\textbackslash}noffer a suitable foundation for separating concerns,{\textbackslash}nby offering simple, yet expressive mechanisms for{\textbackslash}ndefining composable abstractions. We demonstrate how{\textbackslash}nforms help a programmer to separate concerns by{\textbackslash}nmeans of practical examples in Piccola, an{\textbackslash}nexperimental composition language.},
  timestamp = {2015-06-26 15:49:24},
  journal = {Aspect-Oriented Software Development},
author = {Oscar Nierstrasz and Franz Achermann},
  year = {2005},
  keywords = {snf04 scg-pub skip-doi jb05},
  pages = {243--259},
  file = {Nierstrasz und Achermann - 2004 - Separating concerns with first-class namespaces:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\WGDG7HF7\\Nierstrasz und Achermann - 2004 - Separating concerns with first-class namespaces.pdf:application/pdf}
}

@inproceedings{verwaest_safe_2009,
title = {Safe Reflection through Polymorphism}
  isbn = {978-1-60558-707-3},
  url = {http://dx.doi.org/10.1145/1595768.1595776},
  doi = {10.1145/1595768.1595776},
  abstract = {Code executed in a fully reflective system switches back and forth between application and interpreter code. These two states can be seen as contexts in which an expression is evaluated. Current language implementations obtain reflective capabilities by exposing objects to the interpreter. However, in doing so these systems break the encapsulation of the application objects. In this paper we propose safe reflection through polymorphism, i.e. by unifying the interface and ensuring the encapsulation of objects from both the interpreter and application context. We demonstrate a homogeneous system that defines the execution semantics in terms of itself, thus enforcing that encapsulation is not broken.},
  timestamp = {2015-06-26 15:49:24},
title = {{Casta} '09: Proceedings of The First International Workshop on Context-Aware Software Technology and Applications}
  publisher = {{ACM}},
author = {Toon Verwaest and Lukas Renggli},
  year = {2009},
  keywords = {schemetalk},
  pages = {21--24},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\BQXW4SC4\\citation.html:text/html;Verwaest und Renggli - 2009 - Safe reflection through polymorphism:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\BV85C67W\\Verwaest und Renggli - 2009 - Safe reflection through polymorphism.pdf:application/pdf}
}

@inproceedings{bergel_userchangeable_2007,
title = {User-Changeable Visibility : Resolving Unanticipated Name Clashes in Traits}
  volume = {42},
  isbn = {9781595937865},
  url = {http://portal.acm.org/citation.cfm?id=1297027.1297040},
  doi = {10.1145/1297027.1297040},
  abstract = {A trait is a unit of behaviour that can be composed with other traits and used by classes. Traits offer an alternative to multiple inheritance. Conflict resolution of traits, while flexible, does not completely handle accidental method name conflicts: if a trait with method m is composed with another trait defining a different method m then resolving the conflict may prove delicate or infeasible in cases where both versions of m are still needed. In this paper we present freezable traits, which provide an expressive composition mechanism to support unanticipated method composition conflicts. Our solution introduces private trait methods and lets the class composer change method visibility at composition time (from public to private and vice versa). Moreover two class composers may use different composition policies for the same trait, something which is not possible in mainstream languages. This approach respects the two main design principles of traits: the class composer is empowered and traits can be flattened away. We present an implementation of freezable traits in Smalltalk. As a side-effect of this implementation we introduced private (early-bound and invisible) methods to Smalltalk by distinguishing object-sends from self-sends. Our implementation uses compile-time bytecode manipulation and, as such, introduces no run-time penalties.},
  timestamp = {2015-06-26 15:49:20},
title = {Composer}
  publisher = {{ACM}},
author = {Alexandre Bergel},
  year = {2007},
  keywords = {composition,dynamic typing,encapsulation,informa,tion hiding,traits},
  pages = {171--190},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\B7RX69PU\\citation.html:text/html}
}

@article{bergel_classboxes_2005,
title = {Classboxes: Controlling Visibility of Class Extensions}
  volume = {31},
  url = {http://www.esug.org/data/ESUG2004/iam-04-008.pdf\#page=186},
  doi = {10.1016/j.cl.2004.11.002},
  abstract = {A class extension is a method that is defined in a module, but whose class is defined elsewhere. Class extensions offer a convenient way to incrementally modify existing classes when subclassing is inappropriate. Unfortunately existing approaches suffer from various limitations. Either class extensions have a global impact, with possibly negative effects for unexpected clients, or they have a purely local impact, with negative results for collaborating clients. Furthermore, conflicting class extensions are either disallowed, or resolved by linearization, with consequent negative effects. To solve these problems we present classboxes, a module system for object-oriented languages that provides for method addition and replacement. Moreover, the changes made by a classbox are only visible to that classbox (or classboxes that import it), a feature we call local rebinding. To validate the model we have implemented it in the Squeak Smalltalk environment, and performed benchmarks. {\textcopyright} 2005 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:31},
  number = {3-4},
  journal = {Computer Languages, Systems and Structures},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Oscar Nierstrasz and Roel Wuyts},
  year = {2005},
  keywords = {Class extension,Language design,Method lookup,Modules,Selector namespace},
  pages = {107--126},
  file = {Wuytsb - 2004 - Uniform and Safe Metaclass Composition:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\3GGDIQR6\\Wuytsb - 2004 - Uniform and Safe Metaclass Composition.pdf:application/pdf}
}

@article{bergel_stateful_2008,
title = {Stateful Traits and Their Formalization}
  volume = {34},
  issn = {978-3-540-71835-2},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842407000140},
  doi = {10.1016/j.cl.2007.05.003},
  abstract = {Traits offer a fine-grained mechanism to compose classes from reusable components while avoiding problems of fragility brought by multiple inheritance and mixins. Traits as originally proposed are stateless, that is, they contain only methods, but no instance variables. State can only be accessed within stateless traits by accessors, which become required methods of the trait. Although this approach works reasonably well in practice, it means that many traits, viewed as software components, are artificially incomplete, and classes that use such traits may contain significant amounts of boilerplate glue code. We present an approach to stateful traits that is faithful to the guiding principle of stateless traits: the client retains control of the composition. Stateful traits consist of a minimal extension to stateless traits in which instance variables are purely local to the scope of a trait, unless they are explicitly made accessible by the composing client of a trait. We demonstrate by means of a formal object calculus that adding state to traits preserves the flattening property: traits contained in a program can be compiled away. We discuss and compare two implementation strategies, and briefly present a case study in which stateful traits have been used to refactor the trait-based version of the Smalltalk collection hierarchy. {\textcopyright} 2007 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:23},
  number = {2-3},
  journal = {Computer Languages, Systems and Structures},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Oscar Nierstrasz and Roel Wuyts},
  year = {2008},
  keywords = {Eiffel,Flattening,Jigsaw,Mixin,Multiple-inheritance,traits},
  pages = {83--108},
  file = {Bergel et al. - 2008 - Stateful traits and their formalization:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\GM5E763T\\Bergel et al. - 2008 - Stateful traits and their formalization.pdf:application/pdf;S1477842407000140:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\XDDD9QZ4\\S1477842407000140.html:text/html}
}

@inproceedings{brichau_applicationspecific_2008,
title = {Application-Specific Models and Pointcuts Using A Logic Metalanguage}
  volume = {34},
  isbn = {9783540718352},
  doi = {10.1016/j.cl.2007.05.004},
  abstract = {In contemporary aspect-oriented languages, pointcuts are usually specified directly in terms of the structure of the source code. The definition of such low-level pointcuts requires aspect developers to have a profound understanding of the entire application's implementation and often leads to complex, fragile and hard-to-maintain pointcut definitions. To resolve these issues, we present an aspect-oriented programming system that features a logic-based pointcut language that is open such that it can be extended with application-specific pointcut predicates. These predicates define an application-specific model that serves as a contract that base program developers provide and aspect developers can depend upon. As a result, pointcuts can be specified in terms of this more high-level model of the application which confines all intricate implementation details that are otherwise exposed in the pointcut definitions themselves. ?? 2007 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:31},
title = {Computer Languages, Systems and Structures}
author = {Johan Brichau and Andy Kellens and Kris Gybels and Kim Mens and Robert Hirschfeld and Theo D'Hondt},
  year = {2008},
  keywords = {Aspect-oriented programming,Logic metaprogramming,Pointcut languages},
  pages = {66--82}
}

@article{brichau_applicationspecific_2008a,
title = {Application-Specific Models and Pointcuts Using A Logic Metalanguage}
  volume = {34},
  issn = {9783540718352},
  doi = {10.1016/j.cl.2007.05.004},
  abstract = {In contemporary aspect-oriented languages, pointcuts are usually specified directly in terms of the structure of the source code. The definition of such low-level pointcuts requires aspect developers to have a profound understanding of the entire application's implementation and often leads to complex, fragile and hard-to-maintain pointcut definitions. To resolve these issues, we present an aspect-oriented programming system that features a logic-based pointcut language that is open such that it can be extended with application-specific pointcut predicates. These predicates define an application-specific model that serves as a contract that base program developers provide and aspect developers can depend upon. As a result, pointcuts can be specified in terms of this more high-level model of the application which confines all intricate implementation details that are otherwise exposed in the pointcut definitions themselves. ?? 2007 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:31},
  number = {2-3},
  journal = {Computer Languages, Systems and Structures},
author = {Johan Brichau and Andy Kellens and Kris Gybels and Kim Mens and Robert Hirschfeld and Theo D'Hondt},
  year = {2008},
  keywords = {Aspect-oriented programming,Logic metaprogramming,Pointcut languages},
  pages = {66--82}
}

@article{denker_runtime_2006,
title = {Runtime Bytecode Transformation for Smalltalk}
  volume = {32},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842405000436},
  doi = {10.1016/j.cl.2005.10.002},
  abstract = {Transforming programs to alter their semantics is of wide interest, for purposes as diverse as off-the-shelf component adaptation, optimization, trace generation, and experimentation with new language features. The current wave of interest in advanced technologies for better separation of concerns, such as aspect-oriented programming, is a solid testimony of this fact. Strangely enough, almost all proposals are formulated in the context of Java, in which tool providers encounter severe restrictions due to the rigidity of the environment. This paper presents BYTESURGEON, a library to transform binary code in Smalltalk. BYTESURGEON takes full advantage of the flexibility of the Squeak environment to enable bytecode transformation at runtime, thereby allowing dynamic, on-the-fly modification of applications. BYTESURGEON operates on bytecode in order to cope with situations where the source code is not available, while providing appropriate high-level abstractions so that users do not need to program at the bytecode level. We illustrate the use of BYTESURGEON via the implementation of method wrappers and a simple MOP, and report on its efficiency. {\textcopyright} 2005 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:25},
  number = {2-3},
  journal = {Computer Languages, Systems and Structures},
author = {Marcus Denker and St{\'e}phane Ducasse and {\'E}ric Tanter},
  year = {2006},
  keywords = {Bytecode transformation,Metaprogramming,Object-oriented programming,smalltalk},
  pages = {125--139},
  file = {Denker et al. - 2006 - Runtime bytecode transformation for Smalltalk:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\RZFEISXW\\Denker et al. - 2006 - Runtime bytecode transformation for Smalltalk.pdf:application/pdf;S1477842405000436:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\Z63B2PUW\\S1477842405000436.html:text/html}
}

@article{ducasse_uniform_2005,
title = {Uniform and Safe Metaclass Composition}
  volume = {31},
  url = {http://www.iam.unibe.ch/~ducasse/Web/Demoes/ESUG2004Proceedings.pdf\#page=160},
  doi = {10.1016/j.cl.2004.11.003},
  abstract = {In pure object-oriented languages, classes are objects, instances of other classes called metaclasses. In the same way as classes define the properties of their instances, metaclasses define the properties of classes. It is therefore very natural to wish to reuse class properties, utilizing them amongst several classes. However this introduced metaclass composition problems, i.e., code fragments applied to one class may break when used on another class due to the inheritance relationship between their respective metaclasses. Numerous approaches have tried to solve metaclass composition problems, but they always resort to an ad-hoc manner of handling conflicting properties, alienating the meta-programmer. We propose a uniform approach that represents class properties as traits, groups of methods that act as a unit of reuse from which classes are composed. Like all the other classes in the system, metaclasses are composed out of traits. This solution supports the reuse of class properties, and their safe and automatic composition based on explicit conflict resolution. The paper discusses traits and our solution, shows concrete examples implemented in the Smalltalk environment Squeak, and compares our approach with existing models for composing class properties. {\textcopyright} 2005 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:20},
  number = {3-4},
  journal = {Computer Languages, Systems and Structures},
author = {St{\'e}phane Ducasse and Nathanael Sch{\"a}rli and Roel Wuyts},
  year = {2005},
  keywords = {Metaclass composition,mixins,Reflective kernel,reuse,traits},
  pages = {143--164},
  file = {Wuytsb - 2004 - Uniform and Safe Metaclass Composition:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\I5S589S9\\Wuytsb - 2004 - Uniform and Safe Metaclass Composition.pdf:application/pdf}
}

@article{haldiman_practical_2009,
title = {Practical, Pluggable Types for A Dynamic Language}
  volume = {35},
  issn = {9781605580845},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842408000262},
  doi = {10.1016/j.cl.2008.06.003},
  abstract = {Most languages fall into one of two camps: either they adopt a unique, static type system, or they abandon static type-checks for run-time checks. Pluggable types blur this division by (i) making static type systems optional, and (ii) supporting a choice of type systems for reasoning about different kinds of static properties. Dynamic languages can then benefit from static-checking without sacrificing dynamic features or committing to a unique, static type system. But the overhead of adopting pluggable types can be very high, especially if all existing code must be decorated with type annotations before any type-checking can be performed. We propose a practical and pragmatic approach to introduce pluggable type systems to dynamic languages. First of all, only annotated code is type-checked. Second, limited type inference is performed on unannotated code to reduce the number of reported errors. Finally, external annotations can be used to type third-party code. We present TypePlug, a Smalltalk implementation of our framework, and report on experience applying the framework to three different pluggable type systems. ?? 2008 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:25},
  number = {1},
  journal = {Computer Languages, Systems and Structures},
author = {Niklaus Haldiman and Marcus Denker and Oscar Nierstrasz},
  year = {2009},
  keywords = {dynamic languages,Programming Languages,Type systems},
  pages = {48--62},
  file = {Haldiman et al. - 2009 - Practical, pluggable types for a dynamic language:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\H2RP9EWU\\Haldiman et al. - 2009 - Practical, pluggable types for a dynamic language.pdf:application/pdf;S1477842408000262:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\4X8KUGFK\\S1477842408000262.html:text/html}
}

@article{lienhard_taking_2009,
title = {Taking An Object-Centric View on Dynamic Information with Object Flow Analysis}
  volume = {35},
  issn = {978-1-60558-084-5},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842408000201},
  doi = {10.1016/j.cl.2008.05.006},
  abstract = {A large body of research analyzes the runtime execution of a system to extract abstract behavioral views. Those approaches primarily analyze control flow by tracing method execution events or they analyze object graphs of heap memory snapshots. However, they do not capture how objects are passed through the system at runtime. We refer to the exchange of objects as the object flow, and we claim that it is necessary to analyze object flows if we are to understand the runtime of an object-oriented application. We propose and detail object flow analysis, a novel dynamic analysis technique that takes this new information into account. To evaluate its usefulness, we present a visual approach that allows a developer to study classes and components in terms of how they exchange objects at runtime. We illustrate our approach on three case studies. {\textcopyright} 2008 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:22},
  number = {1},
  journal = {Computer Languages, Systems and Structures},
author = {Adrian Lienhard and St{\'e}phane Ducasse and Tudor G{\^\i}rba},
  year = {2009},
  keywords = {dynamic analysis,Object flow analysis},
  pages = {63--79},
  file = {Lienhard et al. - 2009 - Taking an object-centric view on dynamic informati:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\NZE3S4U4\\Lienhard et al. - 2009 - Taking an object-centric view on dynamic informati.pdf:application/pdf;S1477842408000201:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\RRIUFIEN\\S1477842408000201.html:text/html}
}

@article{rothlisberger_unanticipated_2008,
title = {Unanticipated Partial Behavioral Reflection: Adapting Applications At Runtime}
  volume = {34},
  issn = {978-3-540-71835-2},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842407000127},
  doi = {10.1016/j.cl.2007.05.001},
  abstract = {Dynamic, unanticipated adaptation of running systems is of interest in a variety of situations, ranging from functional upgrades to on-the-fly debugging or monitoring of critical applications. In this paper we study a particular form of computational reflection, called unanticipated partial behavioral reflection (UPBR), which is particularly well suited for unanticipated adaptation of real-world systems. Our proposal combines the dynamicity of unanticipated reflection, i.e., reflection that does not require preparation of the code of any sort, and the selectivity and efficiency of partial behavioral reflection (PBR). First, we propose unanticipated partial behavioral reflection which enables the developer to precisely select the required reifications, to flexibly engineer the metalevel and to introduce the metabehavior dynamically. Second, we present a system supporting unanticipated partial behavioral reflection in Squeak Smalltalk, called GEPPETTO, and illustrate its use with a concrete example of a web application. Benchmarks validate the applicability of our proposal as an extension to the standard reflective abilities of Smalltalk. {\textcopyright} 2007 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:20},
  number = {2-3},
  journal = {Computer Languages, Systems and Structures},
author = {David R{\"o}thlisberger and Marcus Denker and {\'E}ric Tanter},
  year = {2008},
  keywords = {Metaobject protocol,Metaprogramming,Reflection,smalltalk},
  pages = {46--65},
  file = {Röthlisberger et al. - 2008 - Unanticipated partial behavioral reflection Adapt:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\NFDMBRE3\\Röthlisberger et al. - 2008 - Unanticipated partial behavioral reflection Adapt.pdf:application/pdf;S1477842407000127:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\RDTE75G5\\S1477842407000127.html:text/html}
}

@article{scharli_browser_2004,
title = {A Browser for Incremental Programming}
  volume = {30},
  issn = {1477-8424},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842403000460},
  doi = {10.1016/j.cl.2003.09.004},
  abstract = {Much of the elegance and power of Smalltalk comes from its programming environment and tools. First introduced more than 20 years ago, the Smalltalk browser enables programmers to "home in" on particular methods using a hierarchy of manually-defined classifications. By its nature, this classification scheme says a lot about the desired state of the code, but little about the actual state of the code as it is being developed. We have extended the Smalltalk browser with dynamically computed virtual categories that dramatically improve the browser's support for incremental programming. We illustrate these improvements by example, and describe the algorithms used to compute the virtual categories efficiently. {\textcopyright} 2003 Elsevier Ltd. All rights reserved.},
  timestamp = {2015-06-26 15:49:32},
  number = {1-2},
  journal = {Computer Languages, Systems and Structures},
author = {Nathanael Sch{\"a}rli and Andrew P. Black},
  year = {2004},
  keywords = {Incremental programming,Intentional programming,Method reachability,Requires set,Smalltalk browser},
  pages = {79--95},
  file = {S1477842403000460:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\3C76E6SA\\S1477842403000460.html:text/html;Schärli und Black - 2004 - A browser for incremental programming:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\MC2W2T4K\\Schärli und Black - 2004 - A browser for incremental programming.pdf:application/pdf}
}

@inproceedings{steinert_how_2014,
title = {How to Compare Performance in Program Design Activities : Towards An Empirical Evaluation of {Coexist}}
  isbn = {9783319013039},
  doi = {10.1007/978-3-319-01303-9},
  timestamp = {2015-06-26 15:49:27},
title = {Design Thinking Research: Building Innovation Eco-Systems}
author = {Bastian Steinert and Robert Hirschfeld},
  year = {2014},
  pages = {219--238}
}

@inproceedings{steinert_applying_2012,
title = {Applying Design Knowledge to Programming}
  isbn = {978-3-642-21642-8},
  url = {http://link.springer.com/10.1007/978-3-642-21643-5},
  doi = {10.1007/978-3-642-21643-5},
  abstract = {Arguably programming involves design: computational logic {\textendash} the program {\textendash} is constantly reorganized to keep complexity manageable and provide for current and future coding activities to be feasible. However, design practices have gained less attention in the field of programming, even though decades of research on design have led to a large body of knowledge about theories, methods, and best practices. This chapter reports on the first results of our research efforts to transfer and apply design knowledge to programming activities. We improved tool support for software developers in two respects, both of which are based on key concepts in design practices: continuous feedback and ease of exploration.},
  timestamp = {2015-06-26 15:49:31},
title = {Design Thinking Research: Studying Co-Creation in Practice}
author = {Bastian Steinert and Robert Hirschfeld},
  year = {2012},
  pages = {259--277}
}

@inproceedings{luebbe_bringing_2011,
title = {Bringing Design Thinking to Business Process Modeling}
  isbn = {978-3-642-13756-3},
  url = {http://link.springer.com/10.1007/978-3-642-13757-0},
  doi = {10.1007/978-3-642-13757-0},
  abstract = {Business processmanagement is at the heart of organizations. It provides concepts andmethods to capture, analyze and improve operational procedures in the daily business of organizations. The elicitation of process models is the first step in any process improvement project. Processmodels mediate communication between the different stakeholders involved, such as, for instance, business analysts, process participants, and software architects. Process models provide a shared understand- ing, so that everyone can contribute knowledge. Based on design thinking principles, this paper develops a method that aims at improving business process modeling. To achieve this goal, we introduce physical building blocks and methodological guidance to fundamentally change theway peo- ple interact with process models. Tangible prototypes have been successfully used in design thinking, and initial experiments show that a tangible toolset is a promis- ing approach to improve business process modeling and comprehension. The focus of this paper is on the insights we got during the cooperative research project, i.e., the research path we took. Finally, we explain our research method and outline the next steps.},
  timestamp = {2015-06-26 15:49:31},
title = {Design Thinking: Understand {\Textendash} Improve {\Textendash} Apply}
author = {Alexander Luebbe and Mathias Weske},
  year = {2011},
  keywords = {BPM,Business Process Modeling,Design Thinking},
  pages = {181--195}
}

@inproceedings{bergel_prototyping_2006,
title = {Prototyping Languages, Related Constructs and Tools with Squeak.}
  url = {https://hal.inria.fr/inria-00555724/},
  timestamp = {2015-06-26 15:49:25},
title = {\{{Ecoop}\}'06 \{Workshop\} on \{Revival\} of \{Dynamic\} \{Languages\}}
author = {Alexandre Bergel and Marcus Denker},
  year = {2006},
  file = {Bergel und Denker - 2006 - Prototyping Languages, Related Constructs and Tool:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\WA2H5VDT\\Bergel und Denker - 2006 - Prototyping Languages, Related Constructs and Tool.pdf:application/pdf;inria-00555724:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\22WUXTK4\\inria-00555724.html:text/html}
}

@article{denker_software_2007,
title = {Software Evolution From The Field}
  volume = {166},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066106005305},
  doi = {10.1016/j.entcs.2006.08.003},
  timestamp = {2015-06-26 15:49:24},
  journal = {Electronic Notes in Theoretical Computer Science},
author = {Marcus Denker and St{\'e}phane Ducasse},
  year = {2007},
  pages = {81--91},
  file = {S1571066106005305:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\6Q5TPS6X\\S1571066106005305.html:text/html}
}

@incollection{galli_correlating_2004,
title = {Correlating Unit Tests and Methods Under Test}
  volume = {3092},
  isbn = {978-3-540-22137-1},
  url = {http://link.springer.com.eaccess.ub.tum.de/chapter/10.1007/978-3-540-24853-8_48},
  abstract = {Research Questions: What are the relationships between unit tests and between unit tests and methods under test? What can be gained by making this relationships explicit? How does the concept of method examples compare with other possible techniques to relate this entities?},
  timestamp = {2015-06-26 15:49:30},
title = {Extreme Programming and Agile Processes in Software Engineering}
  publisher = {Springer},
author = {Markus G{\"a}lli},
  year = {2004},
  pages = {317--317},
  file = {978-3-540-24853-8_48:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\W6S93XAI\\978-3-540-24853-8_48.html:text/html}
}

@inproceedings{yanase_promoting_2007,
title = {Promoting Mathematics As A Tool for A {Pbl} Type High School Mathematics Curriculum - Its Design and Evaluation}
  isbn = {0-7695-2806-6},
  doi = {10.1109/C5.2007.26},
  abstract = {We have designed a PBL curriculum for "period for integrated study" using mathematics as a tool for problem solving and evaluated its effectiveness. Students learned two methods, which were how to use differential equation as a tool, and how to choose their own problems, and solve them. We introduced a method using spreadsheet in order to calculate numeric solutions of differential equations. We instructed students so that they would choose a problem that required differential equation in order to solve it. The curriculum was practiced at Kyoto Municipal Horikawa Senior High School in Kyoto, Japan from October 2005 to September 2006. The curriculum was proved effective according to the outcome of students' researches, the results of questionnaires given after finishing the curriculum, and the impressions by the teachers who participated in it. We also found ideas for future improvement.},
  timestamp = {2015-06-26 15:49:25},
title = {Fifth International Conference on Creating, Connecting and Collaborating through Computing (C5 '07)}
author = {D. Yanase and T. Fujioka},
  year = {2007},
  keywords = {differential equation,differential equations,education,Educational institutions,Finishing,International collaboration,Japan,Joining processes,Kyoto Municipal Horikawa Senior High School,Mathematics,mathematics computing,PBL type high school mathematics curriculum,period for integrated study,Problem-solving,spreadsheet},
  pages = {8--14}
}

@inproceedings{ersavas_collaborative_2003,
title = {Collaborative End-User Computing with Snowball}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222328},
  abstract = {Snowball is a visual tool that helps analyze, visualize and visually manipulate hierarchical structures in Squeak. Beyond its original aim of assisting developers to implement systems quicker, recent additions to Snowball can make it a viable collaborative tool for end-users as well. This paper focuses on innovations of Snowball that aim to make it an easy to use computational tool for end-users of various backgrounds. End-user computing is done via visual computation trees, which can be linked across the Internet.},
  timestamp = {2015-06-26 15:49:30},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {T. Ersavas},
  year = {2003},
  pages = {22--22}
}

@inproceedings{ersavas_expanding_2003,
title = {Expanding The Envelope of The Object Oriented Approach}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222333},
  abstract = {In this paper we will discuss a new approach to modeling information systems, namely Fuzzy Object and Behavior Modeling (FOBM) technique. FOBM is a fusion of the object-oriented approach with soft computing techniques. It is especially useful for dealing with increased complexity and noisy, incomplete and vague environments and mainly target areas such as 3D animation, robotics and intelligent autonomous agents. FOBM introduces many new concepts and integrates and enhances some existing ones. Concepts highlighted in this paper include message and event broadcasting, weighing and attenuation, continuous messages with emitters and sensors, degrees of membership, presence and relationships, continuously variable objects, and tolerant environments. Some of these concepts are demonstrated using a simple FOBM framework implemented in Squeak.},
  timestamp = {2015-06-26 15:49:29},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {T. Ersavas},
  year = {2003},
  pages = {60--67}
}

@inproceedings{karuno_squeak_2003,
title = {Squeak Workshop Experiences in Kyoto}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222347},
  abstract = {This poster presentation introduces our first Squeak workshops offered in the context of the ALAN-K (Advanced LeArning Network in Kyoto) project (Konomi and Karuno, 2003) which is part of a major effort to create a new learning environment for elementary, junior high and high school students in Kyoto, Japan.},
  timestamp = {2015-06-26 15:49:23},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {H. Karuno and S. Konomi},
  year = {2003},
  keywords = {Advanced Learning Network in Kyoto,ALAN-K project,Animation,Application software,Argon,Art,computer literacy,courseware,education,Educational institutions,elementary school,Feedback,Frequency,high school student,Informatics,Intelligent networks,Japan,junior high school,learning environment,object-oriented languages,Object-oriented programming,Squeak,student interaction},
  pages = {126--127}
}

@inproceedings{kawamura_machine_2003,
title = {Machine Cycle {Cpu} Simulator for Educational Use Based on Squeak Environment}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222344},
  abstract = {A machine cycle CPU simulator is developed on the Squeak environment for educational use. The developed simulator is able to show hardware behavior in CPU at each system clock. Any component of the simulator is implemented as a Morphic object in Squeak. The developed simulator is examined by execution of example programs and correct behaviors of their executions are confirmed.},
  timestamp = {2015-06-26 15:49:27},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {T. Kawamura and Y. Kawaguchi and S. Nakanishi and K. Sugahara and G. Suzuki},
  year = {2003},
  keywords = {central processing unit,Circuit simulation,Clocks,Computer languages,CPU circuit,digital simulation,educational aids,educational computing,Educational institutions,educational use,execution behavior,Hardware,hardware behavior,high-level programming environment,high-level programming language,Knowledge engineering,machine cycle CPU simulator,Morphic object,Object-oriented programming,programming environments,Registers,simulator component,smalltalk,Software performance,Squeak environment,system clock},
  pages = {120--121}
}

@inproceedings{kim_small_2003,
title = {Small Squeaking in Korea}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222346},
  abstract = {Squeak (Smalltalk language) is not widely known in Korea. A few people are taking an interest in Squeak, but there are not enough resources to quench their thirst for knowledge. In spite of harsh environments, the sounds of squeaking are reverberating silently but happily.},
  timestamp = {2015-06-26 15:49:24},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {SeungBum Kim},
  year = {2003},
  keywords = {Feeds,knowledge resources,Korea,multilingual project,Natural languages,Object-oriented programming,programming environments,smalltalk,Smalltalk language,Software tools,Squeak,Writing},
  pages = {124--125}
}

@inproceedings{kimura_we_2003,
title = {We Would Like to Use Squeak As The Instrument for Expression!}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222350},
  abstract = {At Visual Arts College Osaka, we are exploring ways to use the computer as an instrument for expressing art. Usually, our students learn to create works of Web, CD-ROM and video content using the computer. We had been thinking about using Squeak for a while, however, it was not easy to introduce Squeak in our classes because of the issues relevant to the need of using the Japanese language in Squeak and the need of Japanese manuals. Fortunately, we met with Mr. Kazuhiro Abe in May 2002, who was developing a Japanese edition of Squeak. We decided to use Squeak in our class for 3 months aiming at making Squeak "our instruments". This attempt was experimental.},
  timestamp = {2015-06-26 15:49:20},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {K. Kimura},
  year = {2003},
  pages = {131--131}
}

@inproceedings{konomi_initial_2003,
title = {Initial Experiences of {Alan}-K: An Advanced {Learning} Network in Kyoto}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222340},
  abstract = {This paper describes the start-up phase of the ALAN-K (Advanced LeArning Network in Kyoto) project, which is part of a major effort to create new learning environments for elementary, junior high and high school students in Kyoto, Japan. Our visions of digitally fluent and creative citizens are largely influenced by the visions, ideas, and experiences of Alan Kay and his colleagues. We view the Squeak system (Ingalls et al., 1997; Guzdial and Rose, 2002) as powerful learning tools and media for enabling both active independent learning and collaboration. A series of Squeak workshops were designed and conducted at two elementary schools, which will be the basis for designing further activities.},
  timestamp = {2015-06-26 15:49:27},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {S. Konomi and H. Karuno},
  year = {2003},
  pages = {96--103}
}

@inproceedings{masahiro_agent_2003,
title = {The Agent Morph - The Implementation of Information Agent on Squeak and Croquet}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222335},
  abstract = {This is about the implementation of a cooperative information-gathering agent as Morph on Squeak. The purpose of this project is to make an agent that solves this point on Squeak. This agent includes three main functions. First, it collects information. Second, it shows information to the user, who selects from it, and then properly stores it. Lastly, which is also a characteristic, it allows fellow agents that have received information disclosure range and permission from the user exchange information to further refine it. With these three functioning continually, the circulation of knowledge occurs, and the Internet can become a true knowledge processor.},
  timestamp = {2015-06-26 15:49:22},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {S. Masahiro},
  year = {2003},
  keywords = {Avatars,cooperative information-gathering agent,Croquet,Dark states,data handling,Data mining,Fellows,groupware,information agent,information collection,information disclosure range,Information resources,Internet,knowledge circulation,knowledge processor,Logic programming,mobile agents,Morph agent,Object-oriented programming,Permission,Programming profession,search engines,Search methods,smalltalk,Squeak,user exchange information},
  pages = {72--73}
}

@inproceedings{ogino_model_2003,
title = {A Model of Recording Students' Actions for Elementary Education with Squeak}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222334},
  abstract = {In education, it is very important for teachers to grasp students' activities. To support teachers, we suggest that all students' actions should be automatically recorded. These learning histories are required to be flexible for various uses such as personal recommendations, analysis, and visualizations. For this requirement, we designed a recording model by connecting action history model and MVC model on Squeak environments.},
  timestamp = {2015-06-26 15:49:32},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {T. Ogino and Y. Kambayashi},
  year = {2003},
  keywords = {action history model,Animation,automatic recording,Computer interfaces,Computer networks,Computer science education,Data mining,Educational institutions,elementary education,expert systems,graphical user interfaces,History,Informatics,learning history,multimedia computing,multimedia support,MVC model,personal analysis,personal recommendation,personal visualization,smalltalk,Squeak environment,student action recording model,student activity,user interface,Video recording,virtual machine,virtual machines,Visualization},
  pages = {68--71}
}

@inproceedings{ohshima_design_2003,
title = {The Design and Implementation of Multilingualized Squeak}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222331},
  abstract = {This paper describes the design and implementation of multilingualization ("m17n") of a dynamic object-oriented environment called Squeak. The goal of this project is to provide a collaborative and late-bound environment where the users can use many different natural languages and characters. Squeak is a highly portable implementation of a dynamic objects environment and it is a good starting point toward the future collaborative environment. However, its text related classes lack the ability to handle natural languages that require extended character sets such as Arabic, Chinese, Greek, Korean, and Japanese. We have been implementing the multilingualization extension to Squeak. The extension we wrote can be classified as follows: 1) new character and string representations for extended character sets, 2) keyboard input and the file out of multilingual text mechanism, 3) flexible text composition mechanism, 4) extended font handling mechanisms including dynamic font loading and outline font handling, 5) higher level application changes including a Japanese version of SqueakToys. The resulting environment has the following characteristics: 1) various natural languages can be used in the same context, 2) the pixels on screen, including the appearance of characters can be completely controlled by the program, 3) decent word processing facility for a mixture of multiple languages, 4) existing Squeak capability, such as remote collaborative mechanism will be integrated with it, 5) small memory footprint requirement.},
  timestamp = {2015-06-26 15:49:22},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {Y. Ohshima and K. Abe},
  year = {2003},
  pages = {44--51}
}

@inproceedings{pierce_introducing_2003,
title = {Introducing Alice to A Squeak Wonderland}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222330},
  abstract = {The Alice project, started at the University of Virginia by Randy Pausch and now continuing at Carnegie Mellon University, is designed to simplify the process of building interactive 3D worlds so that novices without extensive training can build interesting worlds. In this paper I describe some of the aspects of Squeak Alice, a version of the Alice tool that I ported to Squeak, an open-source descendant of Smalltalk. Because Squeak Alice applies many of the lessons learned from Alice, I describe some of those lessons. Rather than dwelling on the similarities between the two systems, I then focus on describing some of the architectural, surface, and functional differences between Squeak Alice and Alice, and I describe some of the new capabilities that Squeak Alice provides.},
  timestamp = {2015-06-26 15:49:27},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {J.S. Pierce},
  year = {2003},
  pages = {40--43}
}

@inproceedings{ruger_superswiki_2003,
title = {{Superswiki} - Bringing Collaboration to The Class Room}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222327},
  abstract = {SuperSwiki is not yet a well defined term. Its origins go back to Ward Cunningham's Wiki and its Squeak variant, the Swiki. It provides a place to share and edit Web pages, files, and, in case of the SuperSwiki, Squeak projects. The concept of a (Super)Swiki lends itself very well to facilitate collaboration in the classroom, on a campus or even across the Internet. It is easy to set up and all that is needed on the client side is a Web browser (and Squeak). This paper illustrates some of the key ideas behind SuperSwikis, how to run and use them, and considers some existing installations.},
  timestamp = {2015-06-26 15:49:23},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {M. Ruger},
  year = {2003},
  keywords = {class room collaboration,Collaboration,courseware,Educational institutions,groupware,HTML,Internet,Linux,navigation,object-oriented languages,Object-oriented programming,OpenSource project,Postal services,programming environments,programming language,smalltalk,Squeak project,Squeak variant,SuperSwiki,Virtual manufacturing,Web browser,Web design,Web file,Web page editing,Web pages,Web page sharing,Web server,Wiki},
  pages = {18--21}
}

@inproceedings{smith_croquet_2003,
title = {Croquet - A Collaboration System Architecture}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222325},
  abstract = {Croquet is a computer software architecture built from the ground up with a focus on deep collaboration between teams of users. It is a totally open, totally free, highly portable extension to the Squeak (Ingalls et al., 2002) programming system. Croquet is a complete development and delivery platform for doing real collaborative work. There is no distinction between the user environment and the development environment. Croquet is focused on interactions inside of a 3D shared space that is used for context based collaboration, where each user can see all of the others and what their current focus is. This allows for an extremely compelling shared experience. A new collaboration architecture/protocol called TeaTime has been developed to enable this functionality. The rendering architecture is built on top of OpenGL (Woo et al., 1999).},
  timestamp = {2015-06-26 15:49:30},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {D.A. Smith and Alan Kay and Andreas Raab and D.P. Reed},
  year = {2003},
  pages = {2--2}
}

@inproceedings{suzuki_seamless_2003,
title = {Toward A Seamless Learning Environment}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222349},
  abstract = {A new plan and a design concept to develop an e-Learning environment using Squeak, is proposed. The following key points for motivation design are described: Flexibility between learners and teachers, and portability for field environment.},
  timestamp = {2015-06-26 15:49:21},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {G. Suzuki and S. Kohtsuki and M. Yamagishi and K. Sugahara},
  year = {2003},
  keywords = {computer aided instruction,Computer science education,design concept,educational aids,Educational technology,education environment design,e-Learning environment development,Electronic learning,field environment,flexibility,formal specification,Internet,learner,learning environment,Learning systems,Machine learning,motivation design,Peer to peer computing,Personal digital assistants,portability,Roads,software development management,Squeak,teacher,Timing},
  pages = {130--}
}

@inproceedings{takeda_design_2003,
title = {A Design for Computer Supported Collaborative Learning Using Concerns Oriented Model}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222339},
  abstract = {This paper describes a new technique and interface named Concerns Oriented Modeling to design cognitive user models and distributed application architecture for computer supported collaborative learning (CSCL). It is based on Linda, a coordination model for distributed network systems.},
  timestamp = {2015-06-26 15:49:32},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {T. Takeda},
  year = {2003},
  keywords = {Application software,cognitive systems,cognitive user model design,Collaboration,Collaborative software,Collaborative work,Computer applications,Computer architecture,Computer interfaces,computer supported collaborative learning,Concerns Oriented Modeling,courseware,distributed application architecture,distributed computing,distributed network system,distributed processing,groupware,learning environment,learning system,Linda coordination model,Object-oriented programming,Programming,Software design,software development,student collaboration,user modelling},
  pages = {89--95}
}

@inproceedings{tanaka_teatime_2003,
title = {Tea-Time Museum: Croquet As A Browsing and Searching Environment for Digital Libraries}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222326},
  abstract = {In this paper, we describe a research project in the planning stage, called a Tea-Time Museum, that aims at exploration of a new environment for content browsing and multi-user collaboration based on contents. Tea (currently, Croquet) is a next generation collaborative 3D user environment proposed by Reed et al. (2002). Although Croquet is implemented as a collaborative 3D environment for users, new constructs, such as the notion of portals are considered to be key technologies for constructing the next generation digital libraries. We provide our interpretations of Croquet constructs from the view point of hypermedia processing, which will be useful for using Croquet as a basis for constructing a new method of content browsing/searching and a new collaborative (social) search based on Web content.},
  timestamp = {2015-06-26 15:49:22},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {K. Tanaka},
  year = {2003},
  pages = {12--17}
}

@inproceedings{umezawa_netmorph_2003,
title = {{Netmorph} - An Intuitive Mobile Object System}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222329},
  abstract = {NetMorph is a mobile object system that provides a seamless integration of network and desktop. We introduce the notion of network location to desktop objects. By combining desktop 2D coordinates with network locations, NetMorph provides free intuitive cyber spaces. It helps computer beginners to acquire skills of network computing in a very natural way.},
  timestamp = {2015-06-26 15:49:26},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
author = {M. Umezawa and K. Abe and S. Nishihara and T. Kurihara},
  year = {2003},
  keywords = {Application software,Collaboration,Computer architecture,Computer networks,desktop 2D coordinate,desktop object,distributed computing,distributed programming,expert systems,Humans,interactive environment,Internet,intuitive cyber space,intuitive mobile object system,mobile computing,NetMorph system,network computing,networking system,network integration,network location,Object-oriented programming,Tiles,Visualization},
  pages = {32--39}
}

@inproceedings{yamamiya_languagegame_2003,
title = {{Languagegame} - An Interactive Parser Generator}
  isbn = {0-7695-1975-X},
  doi = {10.1109/C5.2003.1222342},
  abstract = {LanguageGame is a tool for a non-professional computer user to make a new programming language. Playing with LanguageGame allows a user to make an original new programming language. In order to give an instruction to a computer, now we have many ways such as selecting menu, push button, drag icon or so. Recent researches of computer user interface have developed various methods of interacting with computer. Above all, with using WYSIWYG (What You See Is What You Get) way, user interface becomes very rich and useful for non-engineer users. But yet, the most fundamental way of having a dialog with computer is to input a sequence of command kind of programming language. Using WYSIWIG style has advantages when a user uses a computer instead of real paper. But to deal with more abstract or involved matter, using a programming language has more benefit because symbols are more stable and we can use powerful idea as a recursiveness or a reference with such language. The importance of programming language could never change however GUI will be more improved. There are various languages in the world, and there are many interesting aspects and tastes in each language. As the grammars of the programming language are very interesting, developing a language must be more fun. Of course making a language seemed to be difficult. And it was planned to develop a parser generator that common people can make their own language easily. A parser generator is one of the most basic software in computer. Historically, various programming languages have been developed. And to make developing their parser easily, the technique of automatic parser generation was found. Now the parser generator becomes established technology. LanguageGame is such a parser generator that has graphical user interface. Contrary to popular professional parser generator like yacc/lex in UNIX platform, it is intended to use non-professional computer users, students and children. Playing with LanguageGame, users can learn and build simple parser with pretty graphical interface, drag-and-drop and graphical syntax tree representation. In current implementation, LanguageGame is developed on Squeak - a free open environment of Smalltalk. Hereby, the user grammar with LanguageGame can use all objects like a sketch a-
nd sound in Squeak.},
  timestamp = {2015-06-26 15:49:27},
title = {First Conference on Creating, Connecting and Collaborating Through Computing, 2003. C5 2003. Proceedings.}
  publisher = {{IEEE} Computer Society},
author = {T. Yamamiya},
  year = {2003},
  pages = {110--110}
}

@incollection{nierstrasz_calculus_2002,
  series = {Lecture \{Notes\} in \{Computer\} \{Science\}},
title = {A Calculus for Modeling Software Components}
  volume = {2852},
  isbn = {978-3-540-20303-2, 978-3-540-39656-7},
  url = {http://link.springer.com/chapter/10.1007/978-3-540-39656-7_14},
  abstract = {Many competing definitions of software components have been proposed over the years, but still today there is only partial agreement over such basic issues as granularity (are components bigger or smaller than objects, packages, or application?), instantiation (do components exist at run-time or only at compile-time?), and state (should we distinguish between components and ``instances'' of components?). We adopt a minimalist view in which components can be distinguished by composable interfaces. We have identified a number of key features and mechanisms for expressing composable software, and propose a calculus for modeling components, based on the asynchronous \ensuremath{\pi} calculus extended with explicit namespaces, or ``forms''. This calculus serves as a semantic foundation and an executable abstract machine for Piccola, an experimental composition language. The calculus also enables reasoning about compositional styles and evaluation strategies for Piccola. We present the design rationale for the Piccola calculus, and briefly outline some of the results obtained.},
  timestamp = {2015-06-26 15:49:32},
title = {Formal Methods for Components and Objects}
  publisher = {Springer Berlin Heidelberg},
author = {Oscar Nierstrasz and Franz Achermann},
  editor = {Boer, Frank S de and Bonsangue, Marcello M and Graf, Susanne and Roever, Willem-Paul de},
  year = {2002},
  keywords = {Compilers,Interpreters,Logics and Meanings of Programs,Operating Systems,Programming Languages,software engineering},
  pages = {339--360},
  file = {978-3-540-39656-7_14:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\NKQSA6SX\\978-3-540-39656-7_14.html:text/html;Nierstrasz und Achermann - 2003 - A Calculus for Modeling Software Components:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\E4PH5GJ9\\Nierstrasz und Achermann - 2003 - A Calculus for Modeling Software Components.pdf:application/pdf}
}

@inproceedings{sakai_3d_2006,
title = {3D Environments Utilization Effects in Development Processes of Embedded {It} Devices}
  isbn = {0-7695-2563-6},
  doi = {10.1109/C5.2006.1},
  abstract = {Since there is a considerable amount of history regarding development processes of embedded IT devices, a lot of advanced applications exist. However, it is often the case that the attempts to consistently integrate each process in order to process information smoothly are limited to products offered by a single software vender. Accordingly, we have experimentally produced information that is able to be processed by a variety of legacy applications on an OS and its circumstances based on 3D environments using the embedded UML technique. Consequently, we researched the environments and effects in which users could easily handle the information necessary for the development of embedded IT devices},
  timestamp = {2015-06-26 15:49:33},
title = {Fourth International Conference on Creating, Connecting and Collaborating through Computing (C5'06)}
author = {M. Sakai and Y. Ishizaki and A. Togawa and T. Yamamoto},
  year = {2006},
  keywords = {3D environments utilization effects,Application software,Collaborative software,Design engineering,Electronic circuits,electronic engineering computing,embedded IT device development processes,Embedded software,embedded systems,embedded UML technique,Hardware,Information science,Packaging,Software design,Unified modeling language},
  pages = {26--28}
}

@inproceedings{lienhard_tracking_2007,
title = {Tracking Objects to Detect Feature Dependencies}
  isbn = {0769528600},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4268241},
  doi = {10.1109/ICPC.2007.38},
  abstract = {The domain-specific ontology of a software system includes a set of features and their relationships. While the problem of locating features in object-oriented programs has been widely studied, runtime dependencies between features are less well understood. Features cannot be understood in isolation, since their behavior often depends on objects created and referenced in previously exercised features. It is difficult to spot runtime dependencies between features just by browsing source code. Hence, code modifications intended for one feature, often inadvertently affect other features. In this paper, we propose an approach to precisely identify dependencies between features based on a fine-grained dynamic analysis which captures details about how objects are referenced at runtime. The results of two case studies indicate that our approach helps software maintainers in understanding critical feature dependencies.},
  timestamp = {2015-06-26 15:49:21},
title = {{Ieee} International Conference on Program Comprehension}
  publisher = {{IEEE}},
author = {Adrian Lienhard and Orla Greevy and Oscar Nierstrasz},
  year = {2007},
  keywords = {dynamic analysis,Feature analysis,Object aliasing,Reverse engineering,Visualization},
  pages = {59--68},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\I5BRI9AR\\articleDetails.html:text/html;Lienhard et al. - 2007 - Tracking objects to detect feature dependencies:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\N5V55SRS\\Lienhard et al. - 2007 - Tracking objects to detect feature dependencies.pdf:application/pdf}
}

@inproceedings{rothlisberger_supporting_2009,
title = {Supporting Task-Oriented Navigation in {Ides} with Configurable {Heatmaps}}
  isbn = {9781424439973},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5090052},
  doi = {10.1109/ICPC.2009.5090052},
  abstract = {Mainstream IDEs generally rely on the static structure of a software project to support browsing and navigation. We propose HeatMaps, a simple but highly configurable technique to enrich the way an IDE displays the static structure of a software system with additional kinds of information. A HeatMap highlights software artifacts according to various metric values, such as bright red or pale blue, to indicate their potential degree of interest. We present a prototype system that implements HeatMaps, and we describe an initial study that assesses the degree to which different HeatMaps effectively guide developers in navigating software.},
  timestamp = {2015-06-26 15:49:23},
title = {{Ieee} International Conference on Program Comprehension}
  publisher = {{IEEE}},
author = {David R{\"o}thlisberger and Oscar Nierstrasz and St{\'e}phane Ducasse and Damien Pollet and Romain Robbes},
  year = {2009},
  keywords = {Development environments,program comprehension,Software analysis,static analysis},
  pages = {253--257},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\H2XEXICT\\articleDetails.html:text/html;Röthlisberger et al. - 2009 - Supporting task-oriented navigation in IDEs with c:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\HKSR6GX6\\Röthlisberger et al. - 2009 - Supporting task-oriented navigation in IDEs with c.pdf:application/pdf}
}

@article{ducasse_class_2005,
title = {The Class Blueprint: Visually Supporting The Understanding of Classes}
  volume = {31},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1392721},
  doi = {10.1109/TSE.2005.14},
  abstract = {Understanding source code is an important task in the maintenance of software systems. Legacy systems are not only limited to procedural languages, but are also written in object-oriented languages. In such a context, understanding classes is a key activity as they are the cornerstone of the object-oriented paradigm and the primary abstraction from which applications are built. Such an understanding is however difficult to obtain because of reasons such as the presence of late binding and inheritance. A first level of class understanding consists of the understanding of its overall structure, the control flow among its methods, and the accesses on its attributes. We propose a novel visualization of classes called class blueprint that is based on a semantically enriched visualization of the internal structure of classes. This visualization allows a software engineer to build a first mental model of a class that he validates via opportunistic code-reading. Furthermore, we have identified visual patterns that represent recurrent situations and as such convey additional, information to the viewer. The contributions of this article are the class blueprint, a novel visualization of the internal structure of classes, the identification of visual patterns, and the definition of a vocabulary based on these visual patterns. We have performed several case studies of which one is presented in depth, and validated the usefulness of the approach in a controlled experiment.},
  timestamp = {2015-06-26 15:49:22},
  number = {1},
  journal = {{IEEE} Transactions on Software Engineering},
author = {St{\'e}phane Ducasse and Michele Lanza},
  year = {2005},
  keywords = {Object-oriented programming,Reverse engineering,smalltalk,software visualization,Visual patterns},
  pages = {75--90},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\M3I9AQEG\\articleDetails.html:text/html}
}

@inproceedings{bergel_aspectboxes_2006,
title = {Aspectboxes --- Controlling The Visibility of Aspects}
  isbn = {972-8865-69-4},
  url = {http://www.cs.tcd.ie/Alexandre.Bergel/download/papers/Berg06c-Aspectboxes.pdf},
  abstract = {Aspect composition is still a hot research topic{\textbackslash}nwhere there is no consensus on how to express where{\textbackslash}nand when aspects have to be composed into a base{\textbackslash}nsystem. In this paper we present a modular construct{\textbackslash}nfor aspects, called aspectboxes, that enables{\textbackslash}naspects application to be limited to a well defined{\textbackslash}nscope. An aspectbox encapsulates class and aspect{\textbackslash}ndefinitions. Classes can be imported into an{\textbackslash}naspectbox defining a base system to which aspects{\textbackslash}nmay then be applied. Refinements and instrumentation{\textbackslash}ndefined by an aspect are visible only within this{\textbackslash}nparticular aspectbox leaving other parts of the{\textbackslash}nsystem unaffected.},
  timestamp = {2015-06-26 15:49:31},
title = {In Proceedings of The International Conference on Software and Data Technologies ({Icsoft} 2006)}
author = {Alexandre Bergel and Robert Hirschfeld and Siobh{\`a}n Clarke and Pascal Costanza},
  year = {2006},
  pages = {29--38}
}

@article{bergel_classboxescontrolling_2007,
title = {Classboxes{\Textendash}Controlling Visibility of Class Extensions (Classboxes{\Textendash}Kontrollierte Sichtbarkeit Von Klassenerweiterungen)}
  volume = {49},
  url = {http://www.degruyter.com/view/j/itit.2007.49.issue-4/itit.2007.49.4.260/itit.2007.49.4.260.xml},
  timestamp = {2015-06-26 15:49:30},
  number = {4},
  journal = {it{\textendash}Information Technology (vormals it+ ti)},
author = {Alexandre Bergel},
  year = {2007},
  pages = {260--263},
  file = {itit.2007.49.4.260:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\BIHUCN2F\\itit.2007.49.4.260.html:text/html}
}

@article{wuyts_unanticipated_2004,
title = {Unanticipated Integration of Development Tools Using The Classification Model}
  volume = {30},
  url = {http://scg.unibe.ch/archive/papers/Wuyt04aClassifications.pdf},
  doi = {10.1016/j.cl.2003.08.003},
  abstract = {The increasing complexity of software development spawns lots of specialised tools to edit code, employ UML schemes, integrate documentation, and so on. The problem is that the tool builders themselves are responsible for making their tools interoperable with other tools or development environments. Because they cannot anticipate all other tools they can integrate with, a lot of tools cannot co-operate. This paper introduces the classication model, a lightweight integration medium that enables unrelated tools that were not meant to be integrated to cooperate easily. Moreover, the tool integration is done by a tool integrator, and not by the tool builder. To validate this claim, we show how to integrate several third-party tools using the classication model, and how it forms the foundation for the StarBrowser, a Smalltalk browser integrating different tools.},
  timestamp = {2015-06-26 15:49:20},
  number = {1-2},
  journal = {Journal of Computer Languages Systems and Structures},
author = {Roel Wuyts and St{\'e}phane Ducasse},
  year = {2004},
  keywords = {recast04 scg pub jb04 decomp pub},
  pages = {63--77},
  file = {S1477842403000459:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\GEXAW2F4\\S1477842403000459.html:text/html;Wuyts und Ducasse - 2004 - Unanticipated integration of development tools usi:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\GABCFXBU\\Wuyts und Ducasse - 2004 - Unanticipated integration of development tools usi.pdf:application/pdf}
}

@article{nierstrasz_flattening_2006,
title = {Flattening Traits}
  volume = {5},
  url = {http://boris.unibe.ch/19424/1/article4.pdf},
  doi = {10.5381/jot.2006.5.4.a4},
  abstract = {Traits are fine-grained components that can be used{\textbackslash}nto compose classes, while avoiding many of the{\textbackslash}nproblems of multiple inheritance and mixin-based{\textbackslash}napproaches. Since most implementations of traits{\textbackslash}nhave focused on dynamically-typed languages, the{\textbackslash}nquestion naturally arises, how can one best{\textbackslash}nintroduce traits to statically-typed languages, like{\textbackslash}n\{Java\} and C\#? In this paper we argue that the{\textbackslash}nflattening property of traits should be used as a{\textbackslash}nguiding principle for any attempt to add traits to{\textbackslash}nstatically-typed languages. This property{\textbackslash}nessentially states that, semantically, traits can be{\textbackslash}ncompiled away. We demonstrate how this principle{\textbackslash}napplies to FTJ, a conservative extension to{\textbackslash}nFeatherweight \{Java\}.},
  timestamp = {2015-06-26 15:49:28},
  number = {4},
  journal = {Journal of Object Technology},
author = {Oscar Nierstrasz and St{\'e}phane Ducasse and Nathanael Sch{\"a}rli},
  year = {2006},
  pages = {129--148},
  file = {Nierstrasz et al. - 2006 - Flattening Traits.:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\TGXV8H2W\\Nierstrasz et al. - 2006 - Flattening Traits..pdf:application/pdf}
}

@article{reichhart_rulebased_2007,
title = {Rule-Based Assessment of Test Quality}
  volume = {6},
  url = {http://www.jot.fm/issues/issue_2007_10/paper12/index},
  doi = {10.5381/jot.2007.6.9.a12},
  abstract = {With the success of agile methodologies more and{\textbackslash}nmore projects develop large test suites to ensure{\textbackslash}nthat the system is behaving as expected. Not only do{\textbackslash}ntests ensure correctness, but they also offer a live{\textbackslash}ndocumentation for the code. However, as the system{\textbackslash}nevolves, the tests need to evolve as well to keep up{\textbackslash}nwith the system, and as the test suite grows larger,{\textbackslash}nthe effort invested into maintaining tests is a{\textbackslash}nsignificant activity. In this context, the quality{\textbackslash}nof tests becomes an important issue, as developers{\textbackslash}nneed to assess and understand the tests they have to{\textbackslash}nmaintain. In this paper we present TestLint, an{\textbackslash}napproach together with an experimental tool for{\textbackslash}nqualifying tests. We define a set of criteria to{\textbackslash}ndetermine test quality, and we evaluate our approach{\textbackslash}non a large sample of unit tests found in open-source{\textbackslash}nprojects.},
  timestamp = {2015-06-26 15:49:25},
  number = {9},
  journal = {Journal of Object Technology},
author = {Stefan Reichhart and Tudor G{\^\i}rba and St{\'e}phane Ducasse},
  year = {2007},
  pages = {231--251},
  file = {index:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\QXNXJFD8\\index.html:text/html}
}

@inproceedings{perscheid_testdriven_2012,
title = {Test-Driven Fault Navigation for Debugging Reproducible Failures}
  volume = {29},
  timestamp = {2015-06-26 15:49:22},
title = {Journal of The Japan Society for Software Science and Technology}
author = {Michael Perscheid and Michael Haupt and Robert Hirschfeld and Hidehiko Masuhara},
  year = {2012},
  pages = {3\_188--3\_211}
}

@article{bergel_analyzing_2005,
title = {Analyzing Module Diversity}
  volume = {11},
  url = {http://www.jucs.org/jucs_11_10/analyzing_module_diversity\\nhttp://scg.unibe.ch/archive/papers/Berg05cModuleDiversity.pdf},
  abstract = {Each object-oriented programming language proposes{\textbackslash}nvarious grouping mechanisms to bundle interacting{\textbackslash}nclasses (i.e., packages, modules, selector{\textbackslash}nnamespaces, etc). To understand such diversity and{\textbackslash}nto compare the different approaches, a common{\textbackslash}nfoundation is needed. As far as we are aware of, no{\textbackslash}nmajor attempt that would go in that direction has{\textbackslash}nbeen realized. In this paper we present a simple{\textbackslash}nmodule calculus together with a set of operators for{\textbackslash}nmodeling the composition semantics of different{\textbackslash}ngrouping mechanisms. Using this module calculus we{\textbackslash}nare able to express the semantics of \{Java\}{\textbackslash}npackages, C\# namespaces, Ruby modules, selector{\textbackslash}nnamespaces, gbeta classes, classboxes, MZScheme{\textbackslash}nunits, and MixJuice modules. This calculus supports{\textbackslash}nthe identification of system families sharing{\textbackslash}nsimilar characteristics. In addition it provides a{\textbackslash}nuniform way to represent and analyze fine-grained{\textbackslash}nmodule semantics.},
  timestamp = {2015-06-26 15:49:32},
  number = {10},
  journal = {Journal of Universal Computer Science},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Oscar Nierstrasz},
  year = {2005},
  keywords = {scg-pub skip-doi jb06 classbox snf06 stefPub alexP},
  pages = {1613--1644},
  file = {jucs_11_10_1613_1644_bergel:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\AKN28TXX\\jucs_11_10_1613_1644_bergel.pdf:application/pdf;jucs_11_10_1613_1644_bergel:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\KC85M4Q3\\jucs_11_10_1613_1644_bergel.pdf:application/pdf}
}

@inproceedings{steinert_continuous_2010,
title = {Continuous Selective Testing}
  volume = {48 {LNBIP}},
  isbn = {9783642130533},
  doi = {10.1007/978-3-642-13054-0_10},
  abstract = {A manual and explicit activity, the frequent selection and execution of tests requires considerable discipline. Our approach automatically derives a subset of tests based on actual modifications to the code base at hand, then continuously executes them transparently in the background, and so supports developers in instantly assessing the effect of their coding activities with respect to the overall set of unit tests to be passed. We apply techniques of selective regression testing, mainly relying on dynamic analysis. By taking advantage of the internal program representation available in IDEs, we do not need to rely on expensive comparisons of different program versions to detect modified code entities. {\textcopyright} Springer-Verlag Berlin Heidelberg 2010.},
  timestamp = {2015-06-26 15:49:30},
title = {Lecture Notes in Business Information Processing}
author = {Bastian Steinert and Michael Haupt and Robert Krahn and Robert Hirschfeld},
  year = {2010},
  pages = {132--146}
}

@article{bergel_metadriven_2007,
title = {Meta-Driven Browsers}
  volume = {4406},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-71836-9.pdf\#page=141},
  timestamp = {2015-06-26 15:49:26},
  journal = {Lecture notes in computer science},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Colin Putney and Roel Wuyts},
  year = {2007},
  pages = {134--156},
  file = {Bergel et al. - 2007 - Meta-driven browsers:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\CZ3BRWWZ\\Bergel et al. - 2007 - Meta-driven browsers.pdf:application/pdf}
}

@article{lienhard_practical_2008,
title = {Practical Object-Oriented Back-In-Time Debugging}
  volume = {5142},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-70592-5.pdf\#page=604},
  timestamp = {2015-06-26 15:49:25},
  journal = {Lecture Notes in Computer Science},
author = {Adrian Lienhard and Tudor G{\^\i}rba and Oscar Nierstrasz},
  year = {2008},
  pages = {592--615},
  file = {Lienhard et al. - 2008 - Practical object-oriented back-in-time debugging:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\4MXUPSBG\\Lienhard et al. - 2008 - Practical object-oriented back-in-time debugging.pdf:application/pdf}
}

@incollection{scharli_traits_2003,
  series = {Lecture \{Notes\} in \{Computer\} \{Science\}},
title = {Traits: Composable Units of Behaviour}
  volume = {2743},
  isbn = {978-3-540-40531-3},
  url = {http://www.springerlink.com/index/169MBRAEPN4GMYD2.pdf},
  abstract = {Despite the undisputed prominence of inheritance as the fundamental reuse mechanism in object-oriented programming languages, the main variants single inheritance, multiple inheritance, and mixin inheritance all suffer from conceptual and practical problems. In the first part of this paper, we identify and illustrate these problems. We then present traits, a simple compositional model for structuring object-oriented programs. A trait is essentially a group of pure methods that serves as a building block for classes and is a primitive unit of code reuse. In this model, classes are composed from a set of traits by specifying glue code that connects the traits together and accesses the necessary state. We demonstrate how traits overcome the problems arising from the different vari- ants of inheritance, we discuss how traits can be implemented effectively, and we summarize our experience applying traits to refactor an existing class hierarchy.},
  timestamp = {2015-06-26 15:49:21},
title = {Lecture Notes in Computer Science}
  publisher = {Springer Berlin Heidelberg},
author = {N Sch{\"a}rli and S Ducasse and O Nierstrasz and A Black},
  editor = {Cardelli, Luca},
  year = {2003},
  keywords = {inheritance,mixins,multiple inheritance,reuse,smalltalk,traits},
  pages = {248--274},
  file = {978-3-540-45070-2_12:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\9ZZN4IHC\\978-3-540-45070-2_12.html:text/html;Schärli et al. - 2003 - Traits Composable Units of Behaviour:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\PV5KSTBA\\Schärli et al. - 2003 - Traits Composable Units of Behaviour.pdf:application/pdf}
}

@incollection{bergel_stateful_2007,
title = {Stateful Traits}
  volume = {4406},
  isbn = {9783540718352},
  url = {http://scg.unibe.ch/archive/papers/Berg07aStatefulTraits.pdf},
  abstract = {Traits offer a fine-grained mechanism to compose classes from reusable components while avoiding problems of fragility brought by multiple inheritance and mixins. Traits as originally proposed are stateless, that is, they contain only methods, but no instance variables. State can only be accessed within traits by accessors, which become required methods of the trait. Although this approach works reasonably well in practice, it means that many traits, viewed as software components, are artificially incomplete, and classes that use such traits may contain significant amounts of boilerplate glue code. Although these limitations are largely mitigated by proper tool support, we seek a cleaner solution that supports stateful traits. The key difficulty is how to handle conflicts that arise when composed traits contribute instance variables whose names clash. We present a solution that is faithful to the guiding principle of stateless traits: the client retains control of the composition. Stateful traits consist of a minimal extension to stateless traits in which instance variables are purely local to the scope of a trait, unless they are explicitly made accessible by the composing client of a trait. Naming conflicts are avoided, and variables of disjoint traits can be explicitly merged by clients. We discuss and compare two implementation strategies, and briefly present a case study in which stateful traits have been used to refactor the trait-based version of the Smalltalk collection hierarchy. {\textcopyright} Springer-Verlag Berlin Heidelberg 2007.},
  timestamp = {2015-06-26 15:49:23},
title = {Lecture Notes in Computer Science Including Subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics}
  publisher = {Springer},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Oscar Nierstrasz and Roel Wuyts},
  year = {2007},
  pages = {66--90},
  file = {978-3-540-71836-9_4:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\UE4S5PGF\\978-3-540-71836-9_4.html:text/html;Bergel et al. - 2007 - Stateful traits:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\5Z9AAKRN\\Bergel et al. - 2007 - Stateful traits.pdf:application/pdf}
}

@inproceedings{bolz_back_2008,
title = {Back to The Future in One Week - Implementing A Smalltalk {Vm} in {Pypy}}
  volume = {5146 {LNCS}},
  isbn = {3540892745},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-89275-5.pdf\#page=130},
  doi = {10.1007/978-3-540-89275-5-7},
  abstract = {We report on our experiences with the Spy project, including implementation details and benchmark results. Spy is a re-implementation of the Squeak (i.e., Smalltalk-80) VM using the PyPy toolchain. The PyPy project allows code written in RPython, a subset of Python, to be translated to a multitude of different backends and architectures. During the translation, many aspects of the implementation can be independently tuned, such as the garbage collection algorithm or threading implementation. In this way, a whole host of interpreters can be derived from one abstract interpreter definition. Spy aims to bring these benefits to Squeak, allowing for greater portability and, eventually, improved performance. The current Spy codebase is able to run a small set of benchmarks that demonstrate performance superior to many similar Smalltalk VMs, but which still run slower than in Squeak itself. Spy was built from scratch over the course of a week during a joint Squeak-PyPy Sprint in Bern last autumn.},
  timestamp = {2015-06-26 15:49:31},
title = {Lecture Notes in Computer Science (Including Subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}
  publisher = {Springer},
author = {Carl Friedrich Bolz and Adrian Kuhn and Adrian Lienhard and Nicholas D. Matsakis and Oscar Nierstrasz and Lukas Renggli and Armin Rigo and Toon Verwaest},
  year = {2008},
  pages = {123--139},
  file = {Bolz et al. - 2008 - Back to the Future in One Week-Implementing a Smal:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\CUTVS632\\Bolz et al. - 2008 - Back to the Future in One Week-Implementing a Smal.pdf:application/pdf}
}

@article{hirschfeld_introduction_2008,
title = {An Introduction to Context-Oriented Programming with Contexts}
  volume = {5235 {LNCS}},
  issn = {3540886427},
  doi = {10.1007/978-3-540-88643-3-9},
  abstract = {Context-oriented Programming, or COP, provides programmers with dedicated abstractions and mechanisms to concisely represent behavioral variations that depend on execution context. By treating context explicitly, and by directly supporting dynamic composition, COP allows programmers to better express software entities that adapt their behavior late-bound at run-time. Our paper illustrates COP constructs, their application, and their implementation by developing a sample scenario, using ContextS in the Squeak/Smalltalk programming environment.},
  timestamp = {2015-06-26 15:49:32},
  journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
author = {Robert Hirschfeld and Pascal Costanza and Michael Haupt},
  year = {2008},
  pages = {396--407}
}

@article{renggli_domainspecific_2010,
title = {Domain-Specific Program Checking}
  volume = {6141 {LNCS}},
  issn = {3642139523},
  doi = {10.1007/978-3-642-13953-6_12},
  abstract = {Lint-like program checkers are popular tools that{\textbackslash}nensure code quality by verifying compliance with{\textbackslash}nbest practices for a particular programming{\textbackslash}nlanguage. The proliferation of internal{\textbackslash}ndomain-specific languages and models, however, poses{\textbackslash}nnew challenges for such tools. Traditional program{\textbackslash}ncheckers produce many false positives and fail to{\textbackslash}naccurately check constraints, best practices, common{\textbackslash}nerrors, possible optimizations and portability{\textbackslash}nissues particular to domain-specific languages. We{\textbackslash}nadvocate the use of dedicated rules to check{\textbackslash}ndomain-specific practices. We demonstrate the{\textbackslash}nimplementation of domain-specific rules, the{\textbackslash}nautomatic fixing of violations, and their{\textbackslash}napplication to two case-studies: (1) Seaside defines{\textbackslash}nseveral internal DSLs through a creative use of the{\textbackslash}nsyntax of the host language; and (2) Magritte adds{\textbackslash}nmeta-descriptions to existing code by means of{\textbackslash}nspecial methods. Our empirical validation{\textbackslash}ndemonstrates that domain-specific program checking{\textbackslash}nsignificantly improves code quality when compared{\textbackslash}nwith general purpose program checking.},
  timestamp = {2015-06-26 15:49:29},
  journal = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
author = {Lukas Renggli and St{\'e}phane Ducasse and Tudor G{\^\i}rba and Oscar Nierstrasz},
  year = {2010},
  pages = {213--232}
}

@inproceedings{steinert_debugging_2009,
title = {Debugging Into Examples Leveraging Tests for Program Comprehension}
  volume = {5826 {LNCS}},
  isbn = {3642050301},
  doi = {10.1007/978-3-642-05031-2_18},
  timestamp = {2015-06-26 15:49:30},
title = {Lecture Notes in Computer Science (Including Subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)}
author = {Bastian Steinert and Michael Perscheid and Martin Beck and Jens Lincke and Robert Hirschfeld},
  year = {2009},
  keywords = {dynamic analysis,program comprehension,Test coverage},
  pages = {235--240}
}

@article{bergel_scoped_2005,
title = {Scoped and Dynamic Aspects with Classboxes}
  volume = {11},
  url = {http://cat.inist.fr/?aModele=afficheN\&cpsidt=17306587},
  doi = {10.3166/objet.11.3.53-68},
  abstract = {Atomically introducing changes to a group of classes{\textbackslash}nis a challenging task. In addition, certain{\textbackslash}napplications require that changes be applied{\textbackslash}ndynamically without shutting down and restarting the{\textbackslash}napplication. In this paper we present an extension{\textbackslash}nof classboxes to make them dynamic. A classbox is a{\textbackslash}nkind of module that supports class extension and{\textbackslash}ninstance variable addition. Class extensions and{\textbackslash}ndefinitions defined in a classbox represent an{\textbackslash}naspect. In addition, with classboxes, aspects are{\textbackslash}ndynamically applied to, removed from hot- in a{\textbackslash}nsystem. Such aspects may crosscut a large number of{\textbackslash}nclasses which are extended by adding or redefining{\textbackslash}nexisting methods and adding new instance variables.{\textbackslash}nFinally the aspects are scoped i.e., they are local{\textbackslash}nto the classboxes that define them.},
  timestamp = {2015-06-26 15:49:24},
  number = {3},
  journal = {L'objet},
author = {Alexandre Bergel and St{\'e}phane Ducasse},
  year = {2005},
  pages = {53--68},
  file = {cat.inist.fr:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\IN8GED67\\cat.inist.fr.html:text/html}
}

@article{minjat_mise_2005,
title = {Mise En Symbiose Des Traits Et Des Classboxes. Application {\`A} L'Expression Des Collaborations}
  volume = {11},
  url = {http://www.researchgate.net/profile/Stephane_Ducasse/publication/228642592_Mise_en_symbiose_des_traits_et_des_classboxes_Application__l'expression_des_collaborations/links/00463536dc0d786604000000.pdf},
  doi = {10.3166/objet.11.1-2.33-46},
  abstract = {The trait model is complementary to class{\textbackslash}ninheritance and allows collections of methods to be{\textbackslash}nreused by several classes. The classbox model allows{\textbackslash}na collection of classes to be locally extended with{\textbackslash}nvariables and/or methods addition. This paper{\textbackslash}ndescribes a symbiosis of these two models: classes{\textbackslash}ncan be locally extended by using a trait. It is{\textbackslash}nillustrated by an efficient implementation of the{\textbackslash}ncollaboration model where a collaboration is{\textbackslash}nrepresented by a classbox and a role by a trait.},
  timestamp = {2015-06-26 15:49:26},
  number = {1-2},
  journal = {L'objet},
author = {Florian Minjat and Alexandre Bergel and Pierre Cointe and St{\'e}phane Ducasse},
  year = {2005},
  pages = {33--46},
  file = {Minjat et al. - 2005 - Mise en symbiose des traits et des classboxes. App:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\XKA3RUG9\\Minjat et al. - 2005 - Mise en symbiose des traits et des classboxes. App.pdf:application/pdf}
}

@incollection{renggli_magritte_2007,
title = {Magritte --- A Meta-Driven Approach to Empower Developers and End Users}
  volume = {4735},
  isbn = {978-3-540-75208-0},
  url = {http://scg.unibe.ch/archive/papers/Reng07aMagritte.pdf},
  abstract = {Model-driven engineering is a powerful approach to{\textbackslash}nbuild large-scale applications. However, an{\textbackslash}napplication's metamodel often remains static after{\textbackslash}nthe development phase and cannot be changed unless a{\textbackslash}nnew development effort occurs. Yet, end users often{\textbackslash}nneed to rapidly adapt their applications to new{\textbackslash}nbusiness needs. In many cases, the end users would{\textbackslash}nknow how to make the required adaptations, if only,{\textbackslash}nthe application would let them do so. In this paper{\textbackslash}nwe present how we built a runtime-dynamic{\textbackslash}nmeta-environment by integrating Magritte, a{\textbackslash}nself-described metamodel, into Smalltalk's{\textbackslash}nreflective language model. Our solution offers the{\textbackslash}nbest of both worlds: developers can develop their{\textbackslash}napplications using the same tools they were used to,{\textbackslash}nbut at the same time they gain the power of{\textbackslash}nmeta-programming. We show in particular that our{\textbackslash}napproach is adapted to support end user{\textbackslash}ncustomization of applications: the adaptive model of{\textbackslash}nMagritte enables to not only describe existing{\textbackslash}nclasses, but also lets end users build their own{\textbackslash}nmetamodels on the fly.},
  timestamp = {2015-06-26 15:49:26},
title = {Model Driven Engineering Languages and Systems}
  publisher = {Springer},
author = {Lukas Renggli and St{\'e}phane Ducasse and Adrian Kuhn},
  year = {2007},
  keywords = {scg07 scg-pub jb07 snf07 snf-bmcc akuhn fame},
  pages = {106--120},
  file = {978-3-540-75209-7_8:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\43Q96ISR\\978-3-540-75209-7_8.html:text/html;Renggli et al. - 2007 - Magritte–a meta-driven approach to empower develop:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\GT8VE5MT\\Renggli et al. - 2007 - Magritte–a meta-driven approach to empower develop.pdf:application/pdf}
}

@inproceedings{bergel_supporting_2005,
title = {Supporting Unanticipated Changes with Traits and Classboxes}
  isbn = {3885793989},
  url = {http://scg.unibe.ch/archive/papers/Berg05dTraitsClassbox.pdf},
  abstract = {On the one hand, traits are a powerful way of{\textbackslash}nstructuring classes. Traits support the reuse of{\textbackslash}nmethod collections over several classes. However,{\textbackslash}ntraits cannot be used when specifying unanticipated{\textbackslash}nchanges to an application. On the other hand,{\textbackslash}nclassboxes are a new module system that supports the{\textbackslash}nlocal redefinition of classes: a collection of{\textbackslash}nclasses can be locally extended with variables{\textbackslash}nand/or methods and the existing clients do not get{\textbackslash}nimpacted by changes. However, an extension applied{\textbackslash}nto a class by a classbox cannot be reused for other{\textbackslash}nclasses. This paper describes how combining Traits{\textbackslash}nand Classboxes supports the safe introduction of{\textbackslash}ncrosscutting collaborations: safe because the{\textbackslash}nexisting clients of the classes do not get impacted,{\textbackslash}ncrosscutting because collaborations between several{\textbackslash}nclasses can be put in place in a unanticipated{\textbackslash}nmanner. In the resulting system, a collaboration is{\textbackslash}nrepresented by a classbox and a role by a trait.},
  timestamp = {2015-06-26 15:49:23},
title = {Net.{Objectdays} ({Node}'05)}
author = {Alexandre Bergel and St{\'e}phane Ducasse},
  year = {2005},
  keywords = {snf05 jb06 scg-pub skip-doi alexPub stefPub listic},
  pages = {61--75},
  file = {Ducasse - 2005 - Supporting unanticipated changes with traits and c:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\K4KX5N74\\Ducasse - 2005 - Supporting unanticipated changes with traits and c.pdf:application/pdf}
}

@inproceedings{hofer_design_2006,
title = {Design and Implementation of A Backward-In-Time Debugger}
  url = {https://hal.inria.fr/inria-00555768/},
  timestamp = {2015-06-26 15:49:30},
title = {{Node} 2006}
  publisher = {{GI}},
author = {Christoph Hofer and Marcus Denker and St{\'e}phane Ducasse},
  year = {2006},
  pages = {17--32},
  file = {Hofer et al. - 2006 - Design and implementation of a backward-in-time de:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\ADZ8ZG99\\Hofer et al. - 2006 - Design and implementation of a backward-in-time de.pdf:application/pdf;inria-00555768:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\FZFZECDU\\inria-00555768.html:text/html}
}

@inproceedings{hirschfeld_aspects_2003,
title = {{Aspects} - Aspect-Oriented Programming with Squeak}
  url = {http://dx.doi.org/10.1007/3-540-36557-5_17},
  doi = {10.1007/3-540-36557-5_17},
  timestamp = {2015-06-26 15:49:31},
title = {Objects, Components, Architectures, Services, and Applications for A Networked Worl({Lncs})}
author = {Robert Hirschfeld},
  year = {2003},
  pages = {216--232}
}

@incollection{bergel_domainspecific_2011,
title = {Domain-Specific Profiling}
  url = {http://link.springer.com/chapter/10.1007/978-3-642-21952-8_7},
  timestamp = {2015-06-26 15:49:29},
title = {Objects, Models, Components, Patterns}
  publisher = {Springer},
author = {Alexandre Bergel and Oscar Nierstrasz and Lukas Renggli and Jorge Ressia},
  year = {2011},
  pages = {68--82},
  file = {978-3-642-21952-8_7:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\VMUU7GPI\\978-3-642-21952-8_7.html:text/html;Bergel et al. - 2011 - Domain-specific profiling:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\VV7PZP7U\\Bergel et al. - 2011 - Domain-specific profiling.pdf:application/pdf}
}

@inproceedings{haupt_type_2011,
title = {Type Harvesting: A Practical Approach to Obtaining Typing Information in Dynamic Programming Languages}
  isbn = {9781450301138},
  url = {http://dl.acm.org/citation.cfm?id=1982464},
  doi = {10.1145/1982185.1982464},
  abstract = {Dynamically typed programming languages are powerful tools for rapid software development. However, there are scenarios that would benefit from actual type information being available---e. g., code generation and optimisation as well as program comprehension. Since code written in such languages usually makes little or no explicit assumptions about types, type inference is not particularly well suited to obtain the desired information. This paper introduces type harvesting, a practical approach to obtaining type information. It is based on stepwise code execution of the code in question, closely observing the types of entities in question. Type harvesting allows for exploiting unit tests to automatically obtain type information for a code base. The approach has been implemented in Squeak/Smalltalk. Its evaluation, using several complex applications, shows that type harvesting yields excellent results with high precision.},
  timestamp = {2015-06-26 15:49:20},
title = {{\Ldots} of The 2011 {Acm} Symposium on {\Ldots}}
author = {Michael Haupt and M Perscheid and R Hirschfeld},
  year = {2011},
  keywords = {dynamically typed programming languages,dynamic analysis,type harvesting,type inference,unit tests},
  pages = {1282--1289}
}

@inproceedings{gaelli_onemethod_2004,
title = {One-Method Commands: Linking Methods and Their Tests}
  url = {http://scg.unibe.ch/archive/papers/Gael04cLinkingMethodsAndTests.pdf},
  abstract = {Although unit testing is essential for programming,{\textbackslash}ncurrent languages only barely support the developer{\textbackslash}nin composing unit tests into new ones or in{\textbackslash}nnavigating between unit tests and their{\textbackslash}ncorresponding methods under test. We have taken{\textbackslash}nseveral Smalltalk programs and analyzed the{\textbackslash}nrelationships between unit tests and methods under{\textbackslash}ntest, and the re- lationships amongst unit tests.{\textbackslash}nFirst results indicate that most unit tests can be{\textbackslash}nseen or at least decomposed into commands which{\textbackslash}nfocus on single methods, and that large portions of{\textbackslash}nunit tests overlap each other. But these{\textbackslash}nrelationships between unit tests and methods under{\textbackslash}ntest are not reflected in current languages. We{\textbackslash}ntherefore first conceptually extend the meta-model{\textbackslash}nof Smalltalk with one-method commands so that unit{\textbackslash}ntests become both com- posable and navigable. Then{\textbackslash}nwe introduce a first lightweight implementation of{\textbackslash}nthis meta model using method comments to{\textbackslash}ndifferentiate between the several test phases of{\textbackslash}nexisting XUnit test case methods.},
  timestamp = {2015-06-26 15:49:26},
title = {{Oopsla} Workshop on Revival of Dynamic Languages}
  publisher = {Citeseer},
author = {Markus Gaelli and Oscar Nierstrasz and St{\'e}phane Ducasse},
  year = {2004},
  keywords = {snf05 scg-pub skip-doi gaelli jb05},
  file = {Gaelli et al. - 2004 - One-method commands Linking methods and their tes:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\EQB8XJHE\\Gaelli et al. - 2004 - One-method commands Linking methods and their tes.pdf:application/pdf}
}

@inproceedings{nierstrasz_supporting_2004,
title = {Supporting Software Change in The Programming Language}
  url = {http://scg.unibe.ch/archive/papers/Nier04dRDLchange.pdf},
  abstract = {In this paper we briefly review various kinds of software changes and the issues that arise from them. As a consequence, we propose research into programming languages with explicit support for representing first-class changes, and for manipulating and merging multiple viewpoints of evolving software systems.},
  timestamp = {2015-06-26 15:49:23},
title = {{Oopsla} Workshop on Revival of Dynamic Languages}
author = {Oscar Nierstrasz and Marcus Denker},
  year = {2004},
  keywords = {classboxes,languages,sofware evolution,traits},
  pages = {1--5},
  file = {inria-00555696:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\UCH94MV5\\inria-00555696.html:text/html;Nierstrasz und Denker - 2004 - Supporting software change in the programming lang:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\H7J95UPM\\Nierstrasz und Denker - 2004 - Supporting software change in the programming lang.pdf:application/pdf}
}

@inproceedings{hanenberg_morphing_2004,
title = {Morphing Aspects: Incompletely Woven Aspects and Continuous Weaving}
  isbn = {1-58113-842-3},
  doi = {10.1145/976270.976278},
  abstract = {Weaving is one of the fundamental mechanisms of aspect-oriented systems. A weaver composes different aspects with the base system by determining and adapting all parts where aspect specific elements are needed eventually. At runtime, timeconsuming join point checks are necessary to determine if at a certain join point aspect-specific code needs to be executed. Current technologies enforce such checks even in locations that only temporarily or under restrictive conditions (or even never) execute aspect-specific code. In more complex applications, a large number of these checks fail and just cause a substantial runtime overhead without contributing to the system's overall behavior. The main reason for this flaw is complete weaving, the way how aspects are woven to an application using current technologies. In this paper we discuss the problem of unnecessary join point checks caused by complete weaving. We introduce morphing aspects - incompletely woven aspects in combination with continuous weaving - to overcome the problem of futile join point checks.},
  timestamp = {2015-06-26 15:49:26},
title = {Proc. 3Rd Int' Conf. on Aspect-Oriented Software Development \{\Vphantom{\}}(\{Aosd\}-2004)\Vphantom{\{}\}}
author = {Stefan Hanenberg and Robert Hirschfeld and Rainer Unland},
  year = {2004},
  pages = {46--55}
}

@inproceedings{callau_how_2011,
title = {How Developers Use The Dynamic Features of Programming Languages}
  isbn = {9781450305747},
  url = {http://dl.acm.org/citation.cfm?id=1985441.1985448},
  doi = {10.1145/1985441.1985448},
  abstract = {The dynamic and reflective features of programming languages are powerful constructs that programmers often mention as extremely useful. However, the ability to modify a program at runtime can be both a boon-in terms of flexibility-, and a curse-in terms of tool support. For instance, usage of these features hampers the design of type systems, the accuracy of static analysis techniques, or the introduction of optimizations by compilers. In this paper, we perform an empirical study of a large Smalltalk codebase- often regarded as the poster-child in terms of availability of these features-, in order to assess how much these features are actually used in practice, whether some are used more than others, and in which kinds of projects. These results are useful to make informed decisions about which features to consider when designing language extensions or tool support.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceeding of The 8Th Working Conference on Mining Software Repositories - {Msr} '11}
author = {Oscar Calla{\'u} and Romain Robbes and {\'E}ric Tanter and David R{\"o}thlisberger},
  year = {2011},
  keywords = {dynamic languages,smalltalk,static analysis},
  pages = {23--23},
  file = {Robbes et al. - 2011 - How developers use the dynamic features of program:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\DBZZI97D\\Robbes et al. - 2011 - How developers use the dynamic features of program.pdf:application/pdf}
}

@inproceedings{fernandes_istoa_2008,
title = {{Istoa}: Artefacts for Mathematical Interactive Learning Exercises}
  isbn = {0769531156},
  doi = {10.1109/C5.2008.21},
  abstract = {In primary schools, mathematics teachers use support tools to introduce new concepts. The objective of these tools is to reinforce a mental representation of the newly introduced concept. Tools can be physical objects or paper- pen based. We call these tools artefacts. In computer assisted environments, such artefacts are not always clearly present, those environments focus on the nature of the exercises (drills, quiz). To realise environments in closer relation to classroom teaching, we propose to analyse and categorise such artefacts: we used pedagogical literature and we extracted artefacts used in teaching multiplication. We present our infrastructure and a list of artefacts in the multiplication realm.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - 6Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2008}
author = {Hilaire Fernandes and Thibault Carron and St{\'e}phane Ducasse},
  year = {2008},
  keywords = {artefact,authoring systems,classroom teaching,Collaborative tools,computer aided instruction,computer assisted environments,Computer science,education,Educational institutions,Instruments,interactive systems,International collaboration,iStoa environment,Joining processes,learning environment,Learning systems,mathematical interactive learning exercises,Mathematics,mathematics computing,multiplication,multiplication teaching,pedagogical literature,primary schools,teaching},
  pages = {65--72}
}

@inproceedings{karaboncuk_evaluation_2008,
title = {Evaluation, Training and Measurement System for Autistic Children}
  isbn = {0769531156},
  doi = {10.1109/C5.2008.17},
  abstract = {Special training is vitally important to detect and correct autism in children 2-4 years old. In order to achieve this goal, critical training needs to be performed in a speedy and efficient manner. We are developing an evaluation, training and measurement system for 2-6 years old autistic children using Squeak and EToys.},
  timestamp = {2015-06-26 15:49:29},
title = {Proceedings - 6Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2008}
author = {Mehmet Karaboncuk and Mehmet Tansel Ersavas},
  year = {2008},
  keywords = {autism,autistic children,computer based training,Deafness,Educational institutions,Electrical resistance measurement,EToys,evaluation,handicapped aids,interactive learning,International collaboration,Joining processes,learning system,measurement system,special training,Speech,Squeak,Tin,training system,Wire,Working environment noise},
  pages = {77--82}
}

@inproceedings{lincke_sophiescript_2008,
title = {{Sophiescript} - Active Content in Multimedia Documents}
  isbn = {0769531156},
  doi = {10.1109/C5.2008.12},
  abstract = {Active content in multimedia documents helps the reader to grasp the implications of nonlinear and complex systems that are difficult to understand in a text-based description. The readers are able to make their own experiments by changing the underlying rules of these systems. The multimedia authoring environment Sophie has limited capabilities for authoring active dynamic contents. For that reason we integrated a tile scripting system based on Tweak Etoys in Sophie. In SophieScript scripts can be embedded into the text and the reader changes them via direct graphical manipulation. With the implemented tile scripting system the user can easily create dynamic content and, at the same time, make use of the multimedia and text capabilities of Sophie.},
  timestamp = {2015-06-26 15:49:23},
title = {Proceedings - 6Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2008}
author = {Jens Lincke and Robert Hirschfeld and Michael R{\"u}ger and Maic Masuch},
  year = {2008},
  pages = {21--28}
}

@inproceedings{ruger_sophie_2008,
title = {Sophie: The Future of Reading}
  isbn = {0769531156},
  doi = {10.1109/C5.2008.5},
  abstract = {Sophie is an easy-to-use authoring tool that enables its users to combine various media into a new kind of book. With SophieServer, an extension to Sophie, it is now possible to share Sophie Books with readers all over the world. Readers can share their knowledge and discuss their insights with the community. For that, virtual book-clubs offer guided tours that can be prepared, attended, commented, and evolved online by interested members. Alternatively, readers can just enjoy Sophie books, reading them within their Web browser.},
  timestamp = {2015-06-26 15:49:23},
title = {Proceedings - 6Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2008}
author = {Michael R{\"u}ger and Bob Stein and Dan Visel},
  year = {2008},
  keywords = {authoring,Books,Collaborative tools,document handling,eBooks,electronic books,Electronic publishing,HTML,International collaboration,Internet,Joining processes,Microcomputers,multimedia,multimedia books,Programming profession,Software tools,Sophie,Videos},
  pages = {13--20}
}

@inproceedings{santos_children_2008,
title = {Children As Active Partners: Strategies for Collaboration in Spatial Tasks through Virtual Worlds}
  isbn = {0769531156},
  doi = {10.1109/C5.2008.25},
  abstract = {This paper, referring to a work in progress, describes functional elements of the user interface of a Virtual World that may provide an important contribution to the process by which primary teachers and pupils collaborate in negotiating spatial configurations of educational spaces (classroom, playground, set for a theatre play, etc.). We have observed this process and some of its inherent difficulties and identified requirements or the functional elements of the interface. Finally, we reflect about factors impacting children's feelings of lack of authorship and ownership of spatial configurations resulting from collaboration and how a computer system may help in this regard. This Virtual World is therefore configured to be applied in educational contexts where curricular models reflect the new childhood culture where children have an active role in the spaces where they spend most of their time, as schools that adopt the Portuguese Modern School Movement pedagogical model.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - 6Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2008}
author = {Filipe Santos and Benjamim Fonseca and Leonel Morgado and Paulo Martins},
  year = {2008},
  keywords = {Collaborative work,computer aided instruction,Computer interfaces,Context modeling,Decision making,education,Educational institutions,groupware,International collaboration,Joining processes,Mediation,pedagogical model,Programming profession,spatial configuration,teaching,user interface,user interfaces,virtual reality,virtual world},
  pages = {73--76}
}

@inproceedings{perscheid_test_2012,
title = {Test Quality Feedback Improving Effectivity and Efficiency of Unit Testing}
  isbn = {9780769546728},
  doi = {10.1109/C5.2012.7},
  abstract = {Writing unit tests for a software system enhances the confidence that a system works as expected. Since time pressure often prevents a complete testing of all application details developers need to know which new tests the system requires. Developers also need to know which existing tests take the most time and slow down the whole development process. Missing feedback about less tested functionality and reasons for long running test cases make it, however, harder to create a test suite that covers all important parts of a software system in a minimum of time. As a result a software system may be inadequately tested and developers may test less frequently. Our approach provides test quality feedback to guide developers in identifying missing tests and correcting low-quality tests. We provide developers with a tool that analyzes test suites with respect to their effectivity (e.g., missing tests) and efficiency (e.g., time and memory consumption). We implement our approach, named Path Map, as an extended test runner within the Squeak Smalltalk IDE and demonstrate its benefits by improving the test quality of representative software systems.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings - 10Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2012}
author = {Michael Perscheid and Damien Cassou and Robert Hirschfeld},
  year = {2012},
  keywords = {dynamic analysis,Test Quality Feedback,unit tests},
  pages = {60--67}
}

@inproceedings{suslov_krestianstvo_2012,
title = {Krestianstvo {Sdk} Towards End-User Mobile 3D Virtual Learning Environment}
  isbn = {9780769546728},
  doi = {10.1109/C5.2012.8},
  abstract = {Virtual worlds are setting up new standards in software engineering for building virtual learning environments (VLE) today. Open Qwaq, which is based on Open Croquet architecture offers to both programmers and domain experts nearly an unlimited capabilities for creating novel computer-based simulated environments. But, even being built using a highly dynamic, reflective language and self-exploratory Squeak/Smalltalk IDE, it still suffers from tight bindings to client-server architecture, platform dependence and third-party tools. That leads to unnecessary inflexibility to develop or deploy new or existing virtual worlds on heterogeneous ad hoc networks. The article describes efforts being done for bringing Open Croquet/OpenQwaq SDK more closer to a mobile VLE development platform. Krestianstvo SDK is proposed as a one-click application, for instantly setting up a VLE in classroom's network, ART installation, educational disc and similar environments with support of augmented reality and collaborative tangible user interfaces.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - 10Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2012}
author = {Nikolai Suslov},
  year = {2012},
  keywords = {augmented reality,virtual learning environment,virtual worlds},
  pages = {9--14}
}

@inproceedings{thamsen_orca_2012,
title = {Orca: A Single-Language Web Framework for Collaborative Development}
  isbn = {9780769546728},
  doi = {10.1109/C5.2012.9},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings - 10Th International Conference on Creating, Connecting and Collaborating through Computing, C5 2012}
author = {Lauritz Thamsen and Anton Gulenko and Michael Perscheid and Robert Krahn and Robert Hirschfeld and David A. Thomas},
  year = {2012},
  keywords = {Collaborative Web Development,JavaScript,Orca,smalltalk},
  pages = {45--52}
}

@inproceedings{A.p.black_traits_2004,
title = {Traits: Tools and Methodology}
  isbn = {0-7695-2163-0},
  url = {http://dl.acm.org/citation.cfm?id=999471},
  doi = {10.1109/ICSE.2004.1317489},
  abstract = {Traits are an object-oriented programming language construct that allow groups of methods to be named and reused in arbitrary places in an inheritance hierarchy. Classes can use methods from traits as well as defining their own methods and instance variables. Traits thus enable a new style of programming, in which traits rather than classes are the primary unit of reuse. However, the additional sub-structure provided by traits is always optional: a class written using traits can also be viewed as a flat collection of methods, with no change in its semantics. This paper describes the tool that supports these two alternate views of a class, called the traits browser, and the programming methodology that we are starting to develop around the use of traits.},
  timestamp = {2015-06-26 15:49:21},
title = {Proceedings. 26Th International Conference on Software Engineering}
  publisher = {{IEEE} Computer Society},
author = {N Scharli},
  year = {2004},
  keywords = {Squeak},
  pages = {676--686},
  file = {Black und Scharli - 2004 - Traits Tools and methodology:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\QHHZ2XGH\\Black und Scharli - 2004 - Traits Tools and methodology.pdf:application/pdf;citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\4AR6KVHZ\\citation.html:text/html}
}

@inproceedings{ducasse_smallwiki_2005,
title = {{Smallwiki} --- A Meta-Described Collaborative Content Management System}
  isbn = {1595931112},
  url = {http://scg.unibe.ch/archive/papers/Duca05hSmallwikiWikiSymp05.pdf},
  doi = {10.1145/1104973.1104981},
  abstract = {Wikis are often implemented using string-based{\textbackslash}napproaches to parse and generate their pages. While{\textbackslash}nsuch approaches work well for simple wikis, they{\textbackslash}nhamper the customization and adaptability of wikis{\textbackslash}nto the variety of end-users when more sophisticated{\textbackslash}nneeds are required (i.e., different output formats,{\textbackslash}nuser-interfaces, wiki managment, security policies,{\textbackslash}n...). In this paper we present SmallWiki, the second{\textbackslash}nversion of a fully object-oriented implementation of{\textbackslash}na wiki. SmallWiki is implemented with objects from{\textbackslash}nthe top to the bottom and it can be customized{\textbackslash}neasily to accommodate new needs. In addition,{\textbackslash}nSmallWiki is based on a powerful meta-description{\textbackslash}ncalled Magritte that allows one to create{\textbackslash}nuser-interface elements declaratively.},
  timestamp = {2015-06-26 15:49:24},
title = {Proceedings {Acm} International Symposium on Wikis ({Wikisym}'05)}
  publisher = {{ACM}},
author = {St{\'e}phane Ducasse and Lukas Renggli and Roel Wuyts},
  year = {2005},
  keywords = {jb06 scg-pub snf-none stefPub moose-pub},
  pages = {75--82},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\672JSZEA\\citation.html:text/html;Ducasse et al. - 2005 - SmallWiki a meta-described collaborative content:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\QAN6267G\\Ducasse et al. - 2005 - SmallWiki a meta-described collaborative content .pdf:application/pdf}
}

@inproceedings{hagiwara_socialization_2006,
title = {On Socialization of Personal Computing}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.22},
  abstract = {Education is a typical activity of collaboration, i.e., collaboration among instructors and students. While there have been vast amount of trials using computers in the classroom, their success is quite limited compared with total activities done in school education. The reasons of the limited success may be the cost of introducing computers into the classroom, lack of adequate software, or lack of specialists. In this paper, the authors would like to propose another hypothetical reason. That is, limit of the 'personal computing' as a media in the context of classroom where peoples' activities are more social and collaborative using rich media such as verbal and non-verbal communication in the face-to-face environment. Based on this hypothesis, the authors propose a research plan of extending the concept of personal computing to more social media that matches collaboration in the face-to-face environment.},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {Gaku Hagiwara and Kokolo Ikeda and Mikihiko Mori and Tetsutaro Uehara and Hajime Kita},
  year = {2006},
  keywords = {Collaboration,Collaborative work,computer aided instruction,Computer science education,Context,Costs,Educational institutions,Educational programs,face-to-face environment,groupware,hypothetical reason,Joining processes,non-verbal communication,personal computing,Programming profession,rich media,school education,social aspects of automation,social media,Space technology,verbal communication},
  pages = {71--75}
}

@inproceedings{matsuoka_global_2006,
title = {Global Environmental Education Using Squeak and Field Servers}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.19},
  abstract = {We are promoting projects in combination with Squeak eToys, visual programming software for children and Field Server, remote monitoring system for edible vegetation. We developed a Squeak interface with Field Servers, the remote environment monitoring equipments developed by the National Agricultural Research Center of Japan and installed throughout the world. The interface allows children to create Squeak eToys Programs easily that can monitor remote environment. We are preparing an educational program that encourage children to develop such Squeak eToys Programs and to discuss environmental issues with overseas peers using Picton, the picture language developed by Pangaea, the Japan-based nonprofit activity. Our project is backed by the Japanese Ministry of Education, Culture, Sports, Science and Technology.},
  timestamp = {2015-06-26 15:49:28},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {Mamoru Matsuoka and Haruhiko Okumura and Tomosumi Sasaki and Hiroshi Shimamura and Tsutomu Shimomura and Takaharu Kameoka},
  year = {2006},
  keywords = {courseware,edible vegetation,Educational institutions,Educational programs,Educational technology,environmental science computing,environment monitoring equipments,Field Servers,global environmental education,Natural languages,Network servers,Picton picture language,Programming profession,Remote monitoring,remote monitoring system,Squeak etoys,user interfaces,Vegetation,visual programming,visual programming software,Web server,Wireless LAN},
  pages = {3--7}
}

@inproceedings{miller_one_2006,
title = {From One to Many: Transforming Miramar Into A Collaboration Space}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.18},
  abstract = {The Miramar virtual collaboration environment was originally designed and constructed as a single-user 3D workspace. Its transformation into a multiuser collaboration workspace - while still retaining its core capabilities - posed major challenges, some anticipated, some empirical. The authors identify the issues faced in this transmogrification, discuss how they were addressed and why, the lessons learned, and remaining challenges.},
  timestamp = {2015-06-26 15:49:28},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {John David Miller and Cindy Pickering},
  year = {2006},
  keywords = {Collaboration,Collaborative software,Collaborative work,Containers,Context,distributed processing,groupware,Knowledge management,Miramar virtual collaboration environment,multiuser collaboration workspace,navigation,Object oriented modeling,single-user 3D workspace,Technological innovation,virtual reality,Visualization},
  pages = {109--116}
}

@inproceedings{ohshimat_tinlizzie_2006,
title = {{Tinlizzie} {Wysiwiki} and {Wikiphone}: Alternative Approaches to Asynchronous and Synchronous Collaboration on The Web}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.30},
  abstract = {This paper presents TinLizzie WysiWiki and WikiPhone, two systems which explore new approaches to media-rich end-user collaboration on the World Wide Web. TinLizzie WysiWiki enables authoring of interactive, media-rich documents, containing graphical objects bearing user-defined scripts, on the Web. In TinLizzie WysiWiki, a user manipulates text and active objects in a WYSIWYG graphical editor in a manner similar to Squeak eToys. A notable aspect of TinLizzie WysiWiki is that it allows both synchronous and asynchronous collaboration among multiple users. In asynchronous collaboration, the user content is saved in a common format and posted on the Web. Later, another user can visit and update the document on the server. In synchronous collaboration, more than one user can share a document and edit it simultaneously and collaboratively in real-time. The second system presented is called WikiPhone. WikiPhone is a minimalist voice over IP (VoIP) system which uses only HTTP. WikiPhone allows multiple users to talk to each other using a web browser. WikiPhone's strength is its simplicity in terms both of the user experience and of its implementation. The user simply points a Web-browser to a URL, and then directly participates in a conversation, or listens to ongoing conversations among others. In the implementation, it seeks the simplest possible approach, yet provides a usable VoIP system. Both systems still require a small, portable Web browser plugin, but otherwise they stay within the artificial limitations of today's World Wide Web. The authors think that they exhibit possible future directions for collaboration on the Web.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {Yoshiki Ohshimat and Takashi Yamamiya and Scott Wallacet and Andreas Raab},
  year = {2006},
  keywords = {Application software,asynchronous collaboration,Collaboration,computer graphics,Delay,electronic mail,graphical object,groupware,http,hypermedia,Internet telephony,java,media-rich document,media-rich end-user collaboration,minimalist VOIP system,TinLizzie WysiWiki,Uniform resource locators,user-defined script,Web browser,Web server,Web sites,WikiPhone,World Wide Web,WYSIWYG graphical editor},
  pages = {36--43}
}

@inproceedings{schuster_syncing_2006,
title = {Syncing Croquet with The Real World}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.29},
  abstract = {3D virtual environments like Croquet need to be attractive in order to be visited and used. Their attractiveness depends on the level of vitality that the user is able to experience. Vitality can only be recognized by constant changes, similar to phenomena we know from nature like breathing. We introduce two sorts of vitality by which a virtual environment can be judged: active and passive vitality. By passive vitality we summarize all constant changes happening within the environment, while active vitality includes all personal expressions the user can perform. For creating both types of vitality within a virtual environment this virtual environment has to be synced with reality. With syncing we definitely do not mean to mimic the visual appearance of reality, but to create properties and behaviours corresponding to phenomena of the real world. By means of sensors and microcontrollers we build a technological bridge to dynamically sync data of the real world with their abstract representations within Croquet. Two example applications demonstrate the potential of this syncing method. The degree and extent of syncing reality affects the degree of attractiveness because the user recognizes the virtual environment as vital and lively. This syncing method provides authentic information beyond simulation.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {Grit Schuster and Christine Strothotte and Carola Zwick},
  year = {2006},
  keywords = {3D virtual environments,Atmosphere,Books,Bridges,Collaborative work,Croquet,International collaboration,Microcontrollers,Optical arrays,passive vitality,portable computers,Sensor phenomena and characterization,syncing method,Virtual environment,virtual reality},
  pages = {117--124}
}

@inproceedings{takemura_proposal_2006,
title = {A Proposal and Initial Design of The Morph Packaging System}
  isbn = {0769528066},
  doi = {10.1109/C5.2007.3},
  abstract = {In these days, the number of educators who use Squeak in their education is increasing. However, most of them do not have enough experience in teaching with Squeak and are looking for how to educate children with it. We introduce a new system, which helps us to generate new specialized morph kits. This system helps educators to create and share good methods of Squeak education by the specialized kits. We held a workshop using a specialized kit, "animation Morph ", and found that the specialized kit was effective in squeak education. We also compare existing Squeak systems and consider what is important for the new system.},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings - Fifth International Conference on Creating, Connecting and Collaborating through Computing, C5 2007}
author = {Kentaro Takemura and Yasuo Shirai and Tetsuo Ogino and Hideyuki Takada and Tsuneo Jozen},
  year = {2006},
  keywords = {Computer science education,courseware,Educational institutions,Educational programs,Information science,Information technology,morph kits,morph packaging system,Packaging,Physics computing,Physics education,programming environments,Proposals,smalltalk,Smalltalk-based programming environment,Squeak education,teaching},
  pages = {15--21}
}

@inproceedings{bajcsy_new_2006,
title = {New Collaborative Tools}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.26},
  abstract = {In this paper we shall present two different yet complementary technologies toward collaboration. The first technology is based on interactive distributed and shared environment, that enables the users to access, modify/manipulate and view virtual objects being music, two or three dimensional images or video records. This software, called Virtual gallery is built on the system: Croquet originally developed by the group led by Alan Kay and supported by HP research. We have built a tool that enables by simple clicking to access files, bring them into the 3D environment, display them and manipulate them. The second collaborative technology is based on the capability of imaging in semi-real time physical activity of two or three people. We have built a laboratory equipped with 48 cameras at UC Berkeley and 10 cameras at U of I in Urbana Champaign. The software accompanying these images reconstruct and display complete 3D data representing the physical activities of the people in the laboratory. The display is stereo display so that viewed through stereo glasses the viewer gets trough 3D impression. We are exploring the connectivity through long distance and planning to examine what it means to meet in cyberspace},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Ruzena Bajcsy and Sang Hack Yung and Orion Elenzil and Bradford Wilson and Rick McGeer and Klara Nahrstedts and Christine Strothotte},
  year = {2006},
  keywords = {3D data display,3D data reconstruction,3D environment,Cameras,Collaboration,Collaborative software,Collaborative tools,distributed processing,Glass,groupware,image reconstruction,interactive distributed environment,interactive shared environment,interactive systems,Laboratories,Meeting planning,Music,physical activity imaging,semireal time imaging,stereo display,Stereo image processing,Three dimensional displays,video records,Video sharing,video signal processing,virtual objects},
  pages = {120--125}
}

@inproceedings{fujioka_what_2006,
title = {What Does Squeak Provide Students With? - A Comparative Study of Squeak {Etoy} and Excel {Vba} As Tools for Problem-Solving Learning in High School}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.43},
  abstract = {We have designed a problem-based learning (PEL) curriculum called ISEC-SeT, which is designed for information science education in high schools using computer programming as a tool for problem solving. We adopted Squeak eToy and Excel VBA as programming environments for the PBL, and have practiced ISEC-SeT at Horikawa High School in Kyoto, Japan, from October 2004 to September 2005. Evaluation by teachers and students focused on the students' presentations and essays on the projects shows that the students achieved problem solving abilities through the curriculum and that Squeak eToy provides them with a better environment for PBL than Excel VBA.},
  timestamp = {2015-06-26 15:49:20},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Takeshi Fujioka and Hideyuki Takada and Hajime Kita},
  year = {2006},
  keywords = {computer aided instruction,computer programming,Computer science education,Computer simulation,Educational institutions,Educational programs,Excel VBA,high school education,Horikawa High School,Informatics,Information science,information science education,Problem-solving,problem-solving learning,Programming,programming environments,Programming profession,Seminars,Squeak etoy},
  pages = {42--49}
}

@inproceedings{gaelli_idioms_2006,
title = {Idioms for Composing Games with {Etoys}}
  isbn = {0769525636},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4019398},
  doi = {10.1109/C5.2006.20},
  abstract = {Creating one's own games has been the main motivation for many people to learn programming. But the barrier to learn a general purpose programming language is very high, especially if some positive results can only be expected after having manually written more than 100 lines of code. With this paper we first motivate potential users by showing that one can create classic board- and arcade games like Lights Out, TicTacToe, or Pacman within the playful and constructivist visual learning environment EToys dragging together only a few lines of code. Then we present recurring idioms which helped to develop these games},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
  publisher = {{IEEE}},
author = {Markus Gaelli and Oscar Nierstrasz and Serge Stinckwich},
  year = {2006},
  pages = {222--229},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\QF2FHV82\\articleDetails.html:text/html;Gaelli et al. - 2006 - Idioms for composing games with etoys:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\MVIXH4QZ\\Gaelli et al. - 2006 - Idioms for composing games with etoys.pdf:application/pdf}
}

@inproceedings{hayashi_basket_2006,
title = {Basket - An Experimental Email Environment for Sharing Objects}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.11},
  abstract = {Basket is an e-mail environment for sharing objects. This environment is for publishing and subscribing of Squeak objects (Project or Morph) as e-mail, not dependents on special devices or proprietary server architecture. It would help people to authorize objects and to exchange them with each other, for example, children who want to publish a project and play it with others, or teachers who make a tutorial and want to deliver it widely. This environment provides a step to the further stage by using itself.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Tetsuya Hayashi},
  year = {2006},
  keywords = {authorisation,Basket e-mail environment,Computer architecture,distributed object management,Educational institutions,electronic mail,Electronic publishing,groupware,HTML,message passing,middleware,object authorization,object sharing,portals,Postal services,Squeak object publishing,Squeak object subscription,Video sharing,Wideband,Workstations},
  pages = {29--34}
}

@inproceedings{kadobayashi_3d_2006,
title = {3D Model Annotation From Multiple Viewpoints for Croquet}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.3},
  abstract = {This paper explores ways by which multiple authors can annotate 3D models from multiple viewpoints in a 3D collaborative environment, with particular reference to the environment provided by Croquet. We deal with two types of viewpoint: the conceptual viewpoint and the physical viewpoint. Our approach is to exploit the portal, which is a notable feature of Croquet, in order to achieve our goal. We can assume that a physical viewpoint is expressed by the position and orientation of a portal. To provide a method for annotation based on the conceptual viewpoint, we developed a new portal called an "interactor". The design and our preliminary implementation are discussed},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Rieko Kadobayashi and Mark P. McCahill and Katsumi Tanaka and Julian Lombardi and Howard Stearns and Alan Kay},
  year = {2006},
  keywords = {3D collaborative environment,3D model annotation,Collaboration,Communications technology,Computer architecture,computer graphics,Croquet,groupware,Information services,Internet,modelling,multiple viewpoints,Open source software,Peer to peer computing,portal,portals,Space technology,Web sites},
  pages = {10--15}
}

@inproceedings{kidawara_croquet_2006,
title = {Croquet with {Tvml}: Scripting and Generating Croquet 3D Worlds Using {Tvml}}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.15},
  abstract = {We developed a new 3D content browser based on Croquet that has a TVML processing engine and peer-to-peer network connectivity. Croquet can create a collaborative 3D world for many users. Users can share their knowledge as virtual 3D objects with information in virtual spaces. TVML is a scripting language for generating TV-like content, and it can control virtual 3D character's behaviors and camera positions. Croquet and TVML are very powerful tools for creating virtual 3D content. However, both systems lack important functions for virtual 3D content browsers using the Internet. The usual Croquet does not have easy-to-use functions for authoring 3D characters' behaviors. A usual TVML player also does not have functions for sharing virtual 3D objects and virtual space among PCs. We added TVML processing functions to Croquet to develop a novel virtual 3D content browser. We call the browser `Croquet with TVML'. The new Croquet can play virtual 3D content in shared virtual 3D space through peer-to-peer networks. TVML generates a virtual 3D world in the new Croquet},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Yutaka Kidawara and Takashi Yamamiya and Masaki Hayashi and Katsumi Tanaka},
  year = {2006},
  keywords = {3D content browser,authoring systems,Collaboration,collaborative 3D world,Computer architecture,Computer networks,Croquet 3D world generation,Croquet 3D world scripting,distributed object management,groupware,Internet,Knowledge management,knowledge sharing,Laboratories,Peer to peer computing,peer-to-peer computing,peer-to-peer network connectivity,Personal communication networks,search engines,Space technology,TV,TVML processing engine,virtual 3D world,virtual reality},
  pages = {2--9}
}

@inproceedings{masuch_emotional_2006,
title = {Emotional Agents for Interactive Environments}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.17},
  abstract = {Interactive environments need believable characters. Their personality and emotions should affect the behavior in order to increase the emotional immersion of the player. In our new model virtual characters (or agents) are equipped with an individual personality and dynamic emotions. Both models interact within the selection of appropriate actions, and are thus central for the exhibited behavior of autonomous agents. The proposed model is application-independent and allows to render a rich set of behaviors for virtual characters in learning environments like Squeak eToys or even distributed 3D spaces like Open Croquet},
  timestamp = {2015-06-26 15:49:29},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Maic Masuch and Knut Hartman and Grit Schuster},
  year = {2006},
  keywords = {Attitude control,Autonomous agents,behavior rendering,Collaborative work,computer aided instruction,distributed 3D spaces,distributed processing,emotional agents,Graphics,Humans,interactive environments,learning environments,Mood,Oceans,psychology,software agents,Speech,virtual characters,Virtual environment,virtual reality},
  pages = {96--102}
}

@inproceedings{mccahill_extending_2006,
title = {Extending Croquet Spaces with Vector Fields, Vehicles, and Virtual Presence}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.19},
  abstract = {The Croquet system is a toolkit for constructing collaborative multi-user virtual environments incorporating time-synchronization and advanced 3D visualization and simulations. To investigate how a Croquet environment might be used in education to explore physical phenomenon, we are developing metaphors for visualizing and making audible space-varying forces (vector fields). These vector fields can interact with objects, and this allows us to construct simulations of systems such as charged particles in fields or sailboats interacting with wind. A natural extension of the vector field/object interaction is to allow for objects that act as vehicles so that users may ride them. By providing a vehicle capability to objects, we have both an intuitive metaphor for changing the user's spatial navigational interfaces, and allow users to experience the path of an object through a field. This vehicle metaphor also points toward an interface for guided tours of spaces. Guided tours imply voice and text chat to enable user discussion and collaboration. Not everyone is present in a given Croquet space at all times - this motivates our work to provide bridges between the Croquet in-world experience and legacy text-chat/voice communications systems. These legacy chat systems can also provide information about who is currently present and active in a given Croquet space to those outside the space and so help address user-rendezvous problems. While chat is important, if Croquet is seen as nothing more than chat in the form of a 3D avatar fancy-dress party, we will not achieve our goals of transforming educational content via multi-user simulations and advanced visualization. It is the synergies inherent in combining virtual presence, vehicles, vector fields that allows for rich collaborative construction and exploration of spaces and physical simulations (such as charged particles in fields or sailboats) with user-led guided tours of these spaces},
  timestamp = {2015-06-26 15:49:29},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Mark P. McCahill and Peter Moore and Liz Wendland and Anthony Zampogna},
  year = {2006},
  keywords = {3D simulations,3D visualization,audible space-varying forces,Avatars,Bridges,Collaboration,collaborative multiuser virtual environments,Collaborative tools,Collaborative work,computer aided instruction,Croquet spaces,data visualisation,educational computing,groupware,legacy text chat systems,legacy voice communication systems,navigation,navigational interfaces,Physics computing,Space charge,Space vehicles,telecommunication computing,time synchronization,vector field simulation,vehicle simulation,Virtual environment,virtual presence,virtual reality,Visualization,voice communication},
  pages = {68--72}
}

@inproceedings{pickering_3d_2006,
title = {3D Global Virtual Teaming Environment}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.2},
  abstract = {Based on research conducted at a large multinational corporation, we identified several unique requirements for global team collaboration. Our findings included that two-thirds of employees work on distributed teams and the same percentage also work on multiple teams. These and other data led us to seek a solution that would seamlessly support the complexities discovered while enhancing team and personal productivity. To adequately represent the complexities, we needed an object-oriented information workspace where the use of a 3D user interface allows users to retain multiple contexts. We chose an environment already developed by Intel Research, Miramar, as a prototyping vehicle},
  timestamp = {2015-06-26 15:49:33},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Cindy Pickering and John David Miller and Eleanor Wynn and Chuck House},
  year = {2006},
  keywords = {3D global virtual teaming environment,3D user interface,Collaborative software,Collaborative work,Cultural differences,Global communication,global team collaboration,graphical user interfaces,groupware,Hardware,International collaboration,Manufacturing,object-oriented information workspace,Object-oriented programming,personal productivity,productivity,Software tools,team productivity,team working,user interfaces},
  pages = {126--133}
}

@inproceedings{stearns_language_2006,
title = {A Language Supporting Direct Manipulation of Component-Based Object Construction and Deconstruction in Collaborative Croquet Spaces}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.5},
  abstract = {We describe the language architecture of Brie, a framework for authoring 3D spaces and user interfaces. Brie is designed to take advantage of the unique social characteristics of the Croquet collaboration architecture, in particular by lowering the bar for content creation, thus greatly expanding the community of content developers. This is achieved through a 3D direct-manipulation interface to objects. To support this, the Brie architecture consists of a prototype-based language extension to Squeak with flexible inheritance, demand-driven evaluation, dependency-directed backtracking, and a special copy algorithm that conditionally copies dependent references},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Howard Stearns and Joshua Gargus and Martin Schuetze and Julian Lombardi},
  year = {2006},
  keywords = {authoring systems,collaborative Croquet 3D spaces,Component architectures,component-based object construction,component-based object deconstruction,Computer architecture,content creation,Costs,distributed programming,Games,Graphics,groupware,Information technology,Object-oriented programming,Online Communities/Technical Collaboration,Programming profession,simplified distributed authoring,Space technology,user interface elements,user interfaces},
  pages = {136--141}
}

@inproceedings{thalmann_jam_2006,
title = {Jam Tomorrow: Collaborative Music Generation in Croquet Using {Openal}}
  isbn = {0769525636},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4019379},
  doi = {10.1109/C5.2006.22},
  abstract = {We propose a music generation software that allows large numbers of users to collaborate. In a virtual world, groups of users generate music simultaneously at different places in a room. This can be realized using OpenAL sound sources. The generated musical pieces have to be modifiable while they are playing and all collaborating users should immediately see and hear the results of such modifications. We are testing these concepts within Croquet by implementing a software called Jam Tomorrow},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
  publisher = {{IEEE}},
author = {Florian Thalmann and Markus Gaelli},
  year = {2006},
  pages = {73--78},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\X27N2SFW\\articleDetails.html:text/html;Thalmann und Gaelli - 2006 - Jam Tomorrow Collaborative Music Generation in Cr:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\AQXNQ355\\Thalmann und Gaelli - 2006 - Jam Tomorrow Collaborative Music Generation in Cr.pdf:application/pdf}
}

@inproceedings{thalmann_jam_2006a,
title = {Jam Tomorrow: Collaborative Music Generation in Croquet Using {Openal}}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.22},
  abstract = {We propose a music generation software that allows large numbers of users to collaborate. In a virtual world, groups of users generate music simultaneously at different places in a room. This can be realized using OpenAL sound sources. The generated musical pieces have to be modifiable while they are playing and all collaborating users should immediately see and hear the results of such modifications. We are testing these concepts within Croquet by implementing a software called Jam Tomorrow},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Florian Thalmann and Markus Gaelli},
  year = {2006},
  keywords = {Application software,collaborative music generation,Collaborative software,Collaborative work,Computer architecture,Computer networks,Computer science,Croquet,groupware,International collaboration,Jam Tomorrow software,Mathematics,Music,OpenAL,Open source software,Open systems,Space technology},
  pages = {73--78}
}

@inproceedings{tsuji_learning_2006,
title = {Learning in A Distance and Collaborative Course that Connected Kyoto University and {Ucla}}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.24},
  abstract = {In this paper, I'll report the learning in a distance and collaborative course that connected Kyoto University and UCLA. This course on Kyoto University side consisted of various activities, for example, a distance lecture by instructors and guest speakers, a visit to UCLA, group work for designing educational content by using squeak, and an open workshop held with Horikawa High School. The author noticed in the quantitative and qualitative data collected to research the various activities that students in this course at Kyoto University have experienced authentic learning with others mediated by information technology or computers},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Takaaki Tsuji},
  year = {2006},
  keywords = {Collaboration,collaborative course,Collaborative work,Computer interfaces,Computer science education,courseware,Cultural differences,distance learning,educational courses,Educational institutions,Global communication,Information technology,Kyoto University,Tides,UCLA},
  pages = {58--65}
}

@inproceedings{zettsu_reconfigurable_2006,
title = {Reconfigurable Search Engine for Exploiting Search Knowledge}
  isbn = {0769525636},
  doi = {10.1109/C5.2006.30},
  abstract = {We propose an approach for sharing and exploiting search knowledge (i.e., search skills or know-how) throughout a community of users. This is achieved by making a search process reconfigurable according to the search knowledge. We define the following categories of software components comprising a search process: information source, retrieval, analysis, and cataloging. We are able to develop this search process by assembling and tuning these components. We also explain our prototype system implemented using Croquet and Squeak},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings - Fourth International Conference on Creating, Connecting and Collaborating through Computing, C5 2006}
author = {Koji Zettsu and Katsumi Tanaka},
  year = {2006},
  keywords = {Assembly,cataloguing,Communications technology,Informatics,Information analysis,information cataloging,information retrieval,information source,Internet,Knowledge management,Prototypes,reconfigurable search engine,search engines,search knowledge exploitation,search knowledge sharing,Software prototyping,Web pages},
  pages = {16--23}
}

@inproceedings{schwarz_how_2012,
title = {On How Often Code Is Cloned Across Repositories}
  isbn = {9781467310673},
  url = {http://dl.acm.org/citation.cfm?id=2337398},
  doi = {10.1109/ICSE.2012.6227097},
  abstract = {Detecting code duplication in large code bases, or even across project{\textbackslash}nboundaries, is problematic due to the massive amount of data involved.{\textbackslash}nLarge-scale clone detection also opens new challenges beyond asking for{\textbackslash}nthe provenance of a single clone fragment, such as assessing the{\textbackslash}nprevalence of code clones on the entire code base, and their evolution.{\textbackslash}nWe propose a set of lightweight techniques that may scale up to very{\textbackslash}nlarge amounts of source code in the presence of multiple versions. The{\textbackslash}ncommon idea behind these techniques is to use bad hashing to get a quick{\textbackslash}nanswer. We report on a case study, the Squeaksource ecosystem, which{\textbackslash}nfeatures thousands of software projects, with more than 40 million{\textbackslash}nversions of methods, across more than seven years of evolution. We{\textbackslash}nprovide estimates for the prevalence of type-1, type-2, and type-3{\textbackslash}nclones in Squeaksource.},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings - International Conference on Software Engineering}
  publisher = {{IEEE} Press},
author = {Niko Schwarz and Mircea Lungu and Romain Robbes},
  year = {2012},
  keywords = {clone detection,Software ecosystems},
  pages = {1289--1292},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\ABB3DIZ2\\citation.html:text/html}
}

@inproceedings{schwarz_hot_2012,
title = {Hot Clones: Combining Search-Driven Development, Clone Management, and Code Provenance}
  isbn = {9781467310673},
  url = {http://dl.acm.org/citation.cfm?id=2337504},
  doi = {10.1109/ICSE.2012.6227221},
  abstract = {Code duplication is common in current programming-practice: programmers{\textbackslash}nsearch for snippets of code, incorporate them into their projects and{\textbackslash}nthen modify them to their needs. In today's practice, no automated{\textbackslash}nscheme is in place to inform both parties of any distant changes of the{\textbackslash}ncode. As code snippets continue to evolve both on the side of the user{\textbackslash}nand on the side of the author, both may wish to benefit from remote bug{\textbackslash}nfixes or refinements - authors may be interested in the actual usage of{\textbackslash}ntheir code snippets, and researchers could gather information on clone{\textbackslash}nusage. We propose to maintain a link between software clones across{\textbackslash}nrepositories and outline how the links can be created and maintained.},
  timestamp = {2015-06-26 15:49:28},
title = {Proceedings - International Conference on Software Engineering}
  publisher = {{IEEE} Press},
author = {Niko Schwarz},
  year = {2012},
  keywords = {clone detection,corrective clone management,software maintenance},
  pages = {1628--1629},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\I8CNJFEC\\citation.html:text/html;Schwarz - 2012 - Hot clones combining search-driven development, c:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\8M76W378\\Schwarz - 2012 - Hot clones combining search-driven development, c.pdf:application/pdf}
}

@inproceedings{ducasse_butterflies_2005,
title = {Butterflies: A Visual Approach to Characterize Packages}
  volume = {2005},
  isbn = {0769523714},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1509285},
  doi = {10.1109/METRICS.2005.15},
  abstract = {Understanding sets of classes, or packages, is an important activity in the development and reengineering of large object-oriented systems. Packages represent the coarse grained structure of an application. They are artefacts to deploy and structure software, and therefore more than a simple generalization of classes. The relationships between packages and their contained classes are key in the decomposition of an application and its (re)-modularisation. However, it is difficult to quickly grasp the structure of a package and to understand how a package interacts with the rest of the system. We tackle this problem using butterfly visualizations, i.e., dedicated radar charts built from simple package metrics based on a language-independent meta-model. We illustrate our approach on two applications and show how we can retrieve the relevant characteristics of packages},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - International Software Metrics Symposium}
  publisher = {{IEEE}},
author = {St{\'e}phane Ducasse and Michele Lanza and Laura Ponisio},
  year = {2005},
  keywords = {Package metrics,Program understanding,Reverse engineering,software visualization},
  pages = {45--54},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\68MQ5V9S\\articleDetails.html:text/html;Ducasse et al. - 2005 - Butterflies A visual approach to characterize pac:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\Z7CZ5WCH\\Ducasse et al. - 2005 - Butterflies A visual approach to characterize pac.pdf:application/pdf}
}

@inproceedings{vangeet_lightweight_2006,
title = {A Lightweight Approach to Determining The Adequacy of Tests As Documentation}
  isbn = {0-7695-2719-1},
  url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4024010},
  doi = {10.1109/WCRE.2006.45},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings International Workshop on Program Comprehension through Dynamic Analysis ({Pcoda} 2006)}
author = {Joris Geet and Andy Zaidman},
  year = {2006},
  pages = {315--315},
  file = {Lienhard et al. - 2006 - Capturing how objects flow at runtime:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\3XQIZ44I\\Lienhard et al. - 2006 - Capturing how objects flow at runtime.pdf:application/pdf}
}

@inproceedings{taeumel_applying_2014,
title = {Applying Data-Driven Tool Development to Context-Oriented Languages}
  isbn = {9781450328616},
  url = {http://dl.acm.org/citation.cfm?id=2637066.2637067},
  doi = {10.1145/2637066.2637067},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings of 6Th International Workshop on Context-Oriented Programming - {Cop}'14}
author = {Marcel Taeumel and Tim Felgentreff and Robert Hirschfeld},
  year = {2014},
  pages = {1--7}
}

@inproceedings{ducasse_seaside_2004,
title = {Seaside --- A Multiple Control Flow Web Application Framework}
  url = {http://scg.unibe.ch/archive/papers/Duca04eSeaside.pdf\\nhttp://www.iam.unibe.ch/publikationen/techreports/2004/iam-04-008},
  abstract = {Developing web applications is difficult since (1){\textbackslash}nthe client-server relationship is asymmetric: the{\textbackslash}nserver cannot update clients but only responds to{\textbackslash}nclient requests and (2) the navigation facilities of{\textbackslash}nweb browsers lead to a situation where servers{\textbackslash}ncannot control the state of the clients.{\textbackslash}nPage-centric web application frameworks fail to{\textbackslash}noffer adequate solutions to model control flow at a{\textbackslash}nhigh-level of abstraction. Developers have to work{\textbackslash}nmanually around the shortcomings of the HTTP{\textbackslash}nprotocol. Some approaches offer better abstractions{\textbackslash}nby composing an application out of components,{\textbackslash}nhowever they still fail to offer modeling control{\textbackslash}nflow at a high level. Continuation-based approaches{\textbackslash}nsolve this problem by providing the facilities to{\textbackslash}nmodel a control flow over several pages with one{\textbackslash}npiece of code. However combining multiple flows{\textbackslash}ninside the same page is difficult. This article{\textbackslash}npresents Seaside. Seaside is a framework which{\textbackslash}ncombines an object-oriented approach with a{\textbackslash}ncontinuation-based one. A Seaside application is{\textbackslash}nbuilt out of components (i.e., objects) and the{\textbackslash}nlogic of the application benefits from the{\textbackslash}ncontinuation-based program flow infrastructure.{\textbackslash}nSeaside offers a unique way to have multiple control{\textbackslash}nflows on a page, one for each component. This{\textbackslash}nenables the developer to write components that are{\textbackslash}nhighly reusable and that can be used to compose{\textbackslash}ncomplex web applications with higher quality in less{\textbackslash}ntime.},
  timestamp = {2015-06-26 15:49:24},
title = {Proceedings of 12Th International Smalltalk Conference ({Isc}'04)}
author = {St{\'e}phane Ducasse and Adrian Lienhard and Lukas Renggli},
  year = {2004},
  keywords = {scg-pub skip-doi jb05 snf05 stefPub seaside-articl},
  pages = {231--257},
  file = {Rengglib - Seaside–A Multiple Control Flow Web Application Fr:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\X7MJQIBT\\Rengglib - Seaside–A Multiple Control Flow Web Application Fr.pdf:application/pdf}
}

@incollection{scharli_composable_2004,
title = {Composable Encapsulation Policies}
  volume = {3086},
  isbn = {978-3-540-22159-3},
  url = {http://scg.unibe.ch/archive/papers/Scha04aEncapsulationPolicies.pdf},
  abstract = {Given the importance of encapsulation to{\textbackslash}nobject-oriented programming, it is surprising to{\textbackslash}nnote that mainstream object-oriented languages offer{\textbackslash}nonly limited and fixed ways of encapsulating{\textbackslash}nmethods. Typically one may only address two{\textbackslash}ncategories of clients, users and heirs, and one must{\textbackslash}nbind visibility and access rights at an early stage.{\textbackslash}nThis can lead to inflexible and fragile code as well{\textbackslash}nas clumsy workarounds. We propose a simple and{\textbackslash}ngeneral solution to this problem in which{\textbackslash}nencapsulation policies can be specified separately{\textbackslash}nfrom implementations. As such they become{\textbackslash}nfirst-class composable entities that can be reused{\textbackslash}nby different classes. We present a detailed analysis{\textbackslash}nof the problem with encapsulation and visibility{\textbackslash}nmechanisms in mainstream OO languages, we introduce{\textbackslash}nour approach in terms of a simple model, and we{\textbackslash}nevaluate how our approach compares with existing{\textbackslash}napproaches. We also assess the impact of{\textbackslash}nincorporating encapsulation policies into Smalltalk{\textbackslash}nand discuss some implementation issues.},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings of European Conference on Object-Oriented Programming ({Ecoop}'04)}
  publisher = {Springer},
author = {Nathanael Sch{\"a}rli and St{\'e}phane Ducasse and Oscar Nierstrasz and Roel Wuyts},
  year = {2004},
  keywords = {snf04 scg-pub jb04 scg-traits stefPub schaerli},
  pages = {26--50},
  file = {978-3-540-24851-4_2:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\7DT4GMZQ\\978-3-540-24851-4_2.html:text/html;Schärli et al. - 2004 - Composable encapsulation policies:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\ISMSBW8C\\Schärli et al. - 2004 - Composable encapsulation policies.pdf:application/pdf}
}

@article{rothlisberger_combining_2007,
title = {Combining Development Environments with Reverse Engineering}
  volume = {2007},
  url = {http://www.researchgate.net/profile/David_Roethlisberger/publication/240804387_Combining_Development_Environments_with_Reverse_Engineering/links/5437f79f0cf2d5fa292ba03a.pdf},
  timestamp = {2015-06-26 15:49:30},
  journal = {Proceedings of {FAMOOSr}},
author = {David R{\"o}thlisberger and Oscar Nierstrasz},
  year = {2007},
  pages = {20--20},
  file = {Röthlisberger und Nierstrasz - 2007 - Combining Development Environments with Reverse En:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\C2H8ATB4\\Röthlisberger und Nierstrasz - 2007 - Combining Development Environments with Reverse En.pdf:application/pdf}
}

@incollection{bergel_classboxes_2003,
  series = {Lecture \{Notes\} in \{Computer\} \{Science\}},
title = {Classboxes: A Minimal Module Model Supporting Local Rebinding}
  volume = {2789},
  isbn = {978-3-540-40796-6},
  url = {http://scg.unibe.ch/archive/papers/Berg03aClassboxes.pdf},
  abstract = {Classical module systems support well the modular development of applications but do not offer the ability to add or replace a method in a class that is not defined in that module. On the other hand, languages that support method addition and replacement do not provide a modular view of applications, and their changes have a global impact. The result is a gap between module systems for object-oriented languages on one hand, and the very desirable feature of method addition and replacement on the other hand. To solve these problems we present classboxes, a module system for object-oriented languages that provides method addition and replacement. Moreover, the changes made by a classbox are only visible to that classbox (or classboxes that import it), a feature we call local rebinding. To validate the model, we have implemented it in the Squeak Smalltalk environment, and performed experiments modularising code.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings of Joint Modular Languages Conference {Jmlc}03}
  publisher = {Springer Berlin Heidelberg},
author = {Alexandre Bergel and St{\'e}phane Ducasse and Roel Wuyts},
  editor = {B{\"o}sz{\"o}rm{\'e}nyi, L{\'a}szl{\'o} and Schojer, Peter},
  year = {2003},
  keywords = {class ex,Compilers,Interpreters,Language design,Logics and Meanings of Programs,Method lookup,Modules,Operating Systems,Programming Languages,Programming Techniques,Selector namespace,smalltalk,software engineering,tension},
  pages = {122--131},
  file = {978-3-540-45213-3_17:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\P3M7CHMB\\978-3-540-45213-3_17.html:text/html}
}

@inproceedings{denker_supporting_2007,
title = {Supporting Feature Analysis with Runtime Annotations}
  url = {http://scg.unibe.ch/archive/papers/Denk07dFeatureAnnotationPCODA.pdf\\nhttp://swerl.tudelft.nl/bin/view/Main/PCODA2007},
  abstract = {The dynamic analysis approach to feature{\textbackslash}nidentification describes a technique for capturing{\textbackslash}nfeature behavior and mapping it to source code.{\textbackslash}nMajor drawbacks of this approach are (1) large{\textbackslash}namounts of data and (2) lack of support for{\textbackslash}nsub-method elements. In this paper we propose to{\textbackslash}nleverage sub-method reflection to identify and model{\textbackslash}nfeatures. We perform an on-the-fly analysis{\textbackslash}nresulting in annotating the operations participating{\textbackslash}nin a feature's behavior with meta-data.The primary{\textbackslash}nadvantage of our annotation approach is that we{\textbackslash}nobtain a fine-grained level of granularity while at{\textbackslash}nthe same time eliminating the need to retain and{\textbackslash}nanalyze large traces for feature analysis.},
  timestamp = {2015-06-26 15:49:23},
title = {Proceedings of The 3Rd International Workshop on Program Comprehension through Dynamic Analysis ({Pcoda} 2007)}
  publisher = {Technische Universiteit Delft},
author = {Marcus Denker and Orla Greevy and Oscar Nierstrasz},
  year = {2007},
  keywords = {scg07 scg-pub skip-doi snf08 jb08 reflectivity},
  pages = {29--33},
  file = {Denker et al. - 2007 - Supporting feature analysis with runtime annotatio:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\2K4ATUXH\\Denker et al. - 2007 - Supporting feature analysis with runtime annotatio.pdf:application/pdf;inria-00555456:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\9E9Q3FQA\\inria-00555456.html:text/html}
}

@inproceedings{ducasse_tie_2000,
title = {Tie Code And Questions: A Reengineering Pattern}
  url = {http://hillside.net/europlop/HillsideEurope/Papers/EuroPLoP2000/2000_DucasseEtAl_TieCodeAndQuestions.pdf},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings of The 5Th European Conference on Pattern Languages of Programms}
  publisher = {Universit{\"a}tsverlag Konstanz},
author = {St{\'e}phane Ducasse and Serge Demeyer and Oscar Nierstrasz},
  year = {2000},
  pages = {209--218}
}

@inproceedings{ducasse_transform_2000,
title = {Transform Conditionals to Polymorphism}
  url = {http://hillside.net/europlop/HillsideEurope/Papers/EuroPLoP2000/2000_DucasseEtAl_TransformConditionals.pdf},
  timestamp = {2015-06-26 15:49:21},
title = {Proceedings of The 5Th European Conference on Pattern Languages of Programms}
  publisher = {Universit{\"a}tsverlag Konstanz},
author = {St{\'e}phane Ducasse and Oscar Nierstrasz and Serge Demeyer},
  year = {2000},
  pages = {219--252}
}

@inproceedings{steinert_coexist_2012,
title = {{Coexist}: Overcoming Aversion to Change - Preserving Immediate Access to Source Code and Run-Time Information of Previous Development States}
  isbn = {978-1-4503-1564-7},
  url = {http://doi.acm.org/10.1145/2384577.2384591},
  doi = {10.1145/2384577.2384591},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings of The 8Th Symposium on Dynamic Languages}
author = {Bastian Steinert and Damien Cassou and Robert Hirschfeld},
  year = {2012},
  keywords = {continuous testing,continuous versioning,Debugging,evolution,explore-first programming,fault localization,prototyping},
  pages = {107--118}
}

@inproceedings{haupt_phidgetlab_2010,
title = {{Phidgetlab}: Crossing The Border From Virtual to Real-World Objects}
  isbn = {9781605588209},
  url = {http://dl.acm.org/citation.cfm?id=1822112},
  doi = {10.1145/1822090.1822112},
  abstract = {Teaching pupils the ideas behind objects in programming languages can be difficult since these concepts are mostly abstract and not comprehensible at first sight. Etoys as a visual programming environment counters such issues by introducing visible objects and simple tiles for programming them. However, all of these objects can only be experienced virtually on the screen. This paper presents PhidgetLab, a programming environment for electronic components (Phidgets) realised on top of the Etoys environment. PhidgetLab helps crossing the border from virtual to real-world objects. Pupils interact with tangible objects that are seamlessly connected to the digital world. PhidgetLab was evaluated in a case study with 22 pupils, following the principles of the Design Thinking methodology and comprised the realisation of five prototypes within a short period of time.},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings of The 15Th Annual {Sigcse} Conference on Innovation and Technology in Computer Science Education}
author = {Michael Haupt and Michael Perscheid and Robert Hirschfeld},
  year = {2010},
  pages = {73--77}
}

@inproceedings{lienhard_identifying_2005,
title = {Identifying Traits with Formal Concept Analysis}
  isbn = {1-58113-993-4},
  url = {http://portal.acm.org/citation.cfm?id=1101908.1101921\\nciteulike-article-id:8423351\\nhttp://dx.doi.org/10.1145/1101908.1101921},
  doi = {10.1145/1101908.1101921},
  abstract = {Traits are basically mixins or interfaces but with method bodies. In languages that support traits, classes are composed out of traits. There are two main advantages with traits. Firstly, decomposing existing classes into traits from which they can be recomposed improves the factoring of hierarchies. Secondly it increases the library reuse potential by providing more reusable traits. Identifying traits and decomposing class hierarchies into traits is therefore an important and challenging task to facilitate maintainability and evolution. In this paper we present how we use Formal Concept Analysis to identify traits in inheritance hierarchies. Our approach is two-staged: first we identify within a hierarchy maximal groups of methods that have a set of classes in common, second we cluster cohesive groups of methods based on method invocations as potential traits. We applied our approach on two significant hierarchies and compare our results with the manual refactorization of the same code which was done by the authors of traits.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings of The 20Th {Ieee}/{Acm} International Conference on Automated Software Engineering {Se} - {Ase} '05}
  publisher = {{ACM}},
author = {Adrian Lienhard and St{\'e}phane Ducasse and Gabriela Ar{\'e}valo},
  year = {2005},
  keywords = {formal\_concept\_analysis},
  pages = {66--75},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\KMWUW769\\citation.html:text/html;Lienhard et al. - 2005 - Identifying traits with formal concept analysis:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\IAZAWJJ5\\Lienhard et al. - 2005 - Identifying traits with formal concept analysis.pdf:application/pdf}
}

@inproceedings{costanza_language_2005,
title = {Language Constructs for Context-Oriented Programming}
  isbn = {1595932836},
  url = {http://portal.acm.org/citation.cfm?doid=1146841.1146842},
  doi = {10.1145/1146841.1146842},
  abstract = {ContextL is an extension to the Common Lisp Object System that allows for Context-oriented Programming. It provides means to associate partial class and method definitions with layers and to activate and deactivate such layers in the control flow of a running program. When a layer is activated, the partial definitions become part of the program until this layer is deactivated. This has the effect that the behavior of a program can be modified according to the context of its use without the need to mention such context dependencies in the affected base program. We illustrate these ideas by providing different UI views on the same object while, at the same time, keeping the conceptual simplicity of object-oriented programming that objects know by themselves how to behave, in our case how to display themselves. These seemingly contradictory goals can be achieved by separating class definitions into distinct layers instead of factoring out the display code into different classes.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings of The 2005 Conference on Dynamic Languages Symposium - {Dls} '05}
author = {Pascal Costanza and Robert Hirschfeld},
  year = {2005},
  keywords = {context-oriented programming,dynamic scope,layers,views},
  pages = {1--10}
}

@inproceedings{renggli_transactional_2007,
title = {Transactional Memory for Smalltalk}
  url = {http://dl.acm.org/citation.cfm?id=1352692},
  timestamp = {2015-06-26 15:49:21},
title = {Proceedings of The 2007 International Conference on Dynamic Languages: in Conjunction with The 15Th International Smalltalk Joint Conference 2007}
  publisher = {{ACM}},
author = {Lukas Renggli and Oscar Nierstrasz},
  year = {2007},
  pages = {25--31},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\3EJ95MEN\\citation.html:text/html;Renggli und Nierstrasz - 2007 - Transactional memory for Smalltalk:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\DEKVDIUX\\Renggli und Nierstrasz - 2007 - Transactional memory for Smalltalk.pdf:application/pdf}
}

@inproceedings{rothlisberger_feature_2007,
title = {Feature Driven Browsing}
  url = {http://dl.acm.org/citation.cfm?id=1352684},
  timestamp = {2015-06-26 15:49:29},
title = {Proceedings of The 2007 International Conference on Dynamic Languages: in Conjunction with The 15Th International Smalltalk Joint Conference 2007}
  publisher = {{ACM}},
author = {David R{\"o}thlisberger and Orla Greevy and Oscar Nierstrasz},
  year = {2007},
  pages = {25--31},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\D7GUPG7Z\\citation.html:text/html;Renggli und Nierstrasz - 2007 - Transactional memory for Smalltalk:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\A3NX57I4\\Renggli und Nierstrasz - 2007 - Transactional memory for Smalltalk.pdf:application/pdf}
}

@inproceedings{rothlisberger_querying_2008,
title = {Querying Runtime Information in The Ide}
  url = {http://www.researchgate.net/profile/David_Roethlisberger/publication/229037623_Querying_runtime_information_in_the_ide/links/02e7e532bb2a852fda000000.pdf},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings of The 2008 Workshop on Query Technologies and Applications for Program Comprehension ({Qtapc} 2008)}
author = {David R{\"o}thlisberger},
  year = {2008},
  file = {Röthlisberger - 2008 - Querying runtime information in the ide:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\9A4Z8GRP\\Röthlisberger - 2008 - Querying runtime information in the ide.pdf:application/pdf}
}

@inproceedings{taeumel_vivide_2012,
title = {The {Vivide} Programming Environment: Connecting Run-Time Information with Programmers' System Knowledge}
  isbn = {978-1-4503-1562-3},
  url = {http://doi.acm.org/10.1145/2384592.2384604},
  doi = {10.1145/2384592.2384604},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings of The {Acm} International Symposium on New Ideas, New Paradigms, and Reflections on Programming and Software}
author = {Marcel Taeumel and Bastian Steinert and Robert Hirschfeld},
  year = {2012},
  keywords = {concurrent views,dynamic analysis,navigation,program comprehension,programming environments,source code},
  pages = {117--126}
}

@inproceedings{robbes_how_2012,
title = {How Do Developers React to {Api} Deprecation?: The Case of A Smalltalk Ecosystem}
  isbn = {978-1-4503-1614-9},
  url = {http://doi.acm.org/10.1145/2393596.2393662},
  doi = {10.1145/2393596.2393662},
  abstract = {When the Application Programming Interface (API) of a framework or library changes, its clients must be adapted. This change propagation---known as a ripple effect---is a problem that has garnered interest: several approaches have been proposed in the literature to react to these changes. Although studies of ripple effects exist at the single system level, no study has been performed on the actual extent and impact of these API changes in practice, on an entire software ecosystem associated with a community of developers. This paper reports on an empirical study of API deprecations that led to ripple effects across an entire ecosystem. Our case study subject is the development community gravitating around the Squeak and Pharo software ecosystems: seven years of evolution, more than 3,000 contributors, and more than 2,600 distinct systems. We analyzed 577 methods and 186 classes that were deprecated, and answer research questions regarding the frequency, magnitude, duration, adaptation, and consistency of the ripple effects triggered by API changes.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings of The {Acm} {Sigsoft} 20Th International Symposium on The Foundations of Software Engineering}
  publisher = {{ACM}},
author = {Romain Robbes and Mircea Lungu and David R{\"o}thlisberger},
  year = {2012},
  keywords = {ecosystems,empirical studies,Mining software repositories},
  pages = {56:1--56:11},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\TQVJKQ7I\\citation.html:text/html;Robbes et al. - 2012 - How do developers react to api deprecation the c:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\AQ97FN76\\Robbes et al. - 2012 - How do developers react to api deprecation the c.pdf:application/pdf}
}

@inproceedings{ducasse_open_2003,
title = {Open Surfaces for Controlled Visibility}
  volume = {3},
  url = {http://scg.unibe.ch/archive/papers/Duca03bSurfaces.pdf},
  abstract = {Current languages contain visibility mechanisms such{\textbackslash}nas private, protected, or public to control who can{\textbackslash}nsee what. However, these visibility mechanisms are{\textbackslash}nfixed once for all. Moreover, they do not solve all{\textbackslash}nproblems related to the visibility, and are{\textbackslash}ntypically of a static nature. In this position paper{\textbackslash}nwe present an open and uniform way of dealing with{\textbackslash}nvisibility and introduce surfaces: i.e., list of{\textbackslash}nmethods that control the way the behavior of an ob{\textbackslash}nject is accessible. We introduce two problems that{\textbackslash}nother visibility mechanisms cannot solve, and show{\textbackslash}nhow surfaces can.},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings of The {Ecoop} '03 Workshop on Object-Oriented Language Engineering for The Post-Java Era}
  publisher = {Springer},
author = {St{\'e}phane Ducasse and Nathanael Sch{\"a}rli and Roel Wuyts},
  year = {2003},
  keywords = {snf03 scg-pub skip-doi jb03 stefPub schaerli}
}

@inproceedings{gaelli_test_2003,
title = {Test Composition with Example Objects and Example Methods.}
  volume = {3013},
  isbn = {978-3-540-22405-1},
  url = {http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf},
  doi = {10.1007/b98806},
  abstract = {While assertions of Design by Contract from Eiffel{\textbackslash}nfound its way into the language-definitions of{\textbackslash}nPython and of Java SDK 1.4, current object-oriented{\textbackslash}nlanguages do not make the concepts of unit-testing{\textbackslash}nexplicit in their definitions or meta-models. Not{\textbackslash}nhaving support of unit-testing in a programming{\textbackslash}nlanguage makes it harder to compose and re-compose{\textbackslash}ntest-scenarios and tests. We propose, that an{\textbackslash}nobject-oriented language should include explicit{\textbackslash}nconcepts for example objects, example methods and{\textbackslash}ninstance-specific assertions. This concepts ease the{\textbackslash}ncomposition of complex test-scenarios, they help to{\textbackslash}nrefactor the program with the tests and also to keep{\textbackslash}nthe duration of the tests as low and the coverage of{\textbackslash}nthe tests as high as possible.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings of The {Ecoop} '03 Workshop on Object-Oriented Language Engineering for The Post-Java Era}
  publisher = {Springer},
author = {Markus Gaelli},
  year = {2003},
  keywords = {snf03 jb-none scg-pub gaelli},
  pages = {143--153}
}

@inproceedings{schaerli_classes_2002,
title = {Classes= Traits+ States+ Glue}
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings of The Inheritance Workshop At {Ecoop} 2002}
  publisher = {Springer},
author = {Nathanael Schaerli and St{\'e}phane Ducasse and Oscar Nierstrasz},
  year = {2002},
  pages = {82--88}
}

@inproceedings{mcgregor_reasoning_2005,
title = {Reasoning About The Testability of Product Line Components}
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.391\&rep=rep1\&type=pdf\#page=22},
  abstract = {The testability of a software component is the ability of the software to reveal its faults. In the development of high reliability systems, testability is an important quality attribute for guiding architecture decisions. The reuse of assets in a software product line propagates defects as readily as correct code. The strategic levels of reuse in a product line produce a high level of inter-dependency among the products in the product line that support this propagation. The increased frequency with which product line components are executed and the range of inputs over which they operate influence the amount of testing required to achieve specific levels of reliability. In this paper we begin the definition of a reasoning framework for testability by considering the characteristics of a product line that influence our view of how testable a component is. Keywords: testability, reachability, software product line},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings of The International Workshop on Software Product Line Testing}
  publisher = {Citeseer},
author = {John D Mcgregor},
  year = {2005},
  keywords = {Software product line,Testability},
  pages = {1--7},
  file = {Gaelli et al. - 2006 - Composing unit tests:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\JR7UHQE5\\Gaelli et al. - 2006 - Composing unit tests.pdf:application/pdf}
}

@inproceedings{haupt_type_2007,
title = {Type Feedback for Bytecode Interpreters}
  url = {http://scg.unibe.ch/archive/papers/Haup07aPIC.pdf},
  abstract = {This position paper proposes the exploitation of{\textbackslash}ntype feedback mechanisms, or more precisely,{\textbackslash}npolymorphic inline caches, for purely interpreting{\textbackslash}nimplementations of object-oriented programming{\textbackslash}nlanguages. Using Squeak's virtual machine as an{\textbackslash}nexample, polymorphic inline caches are discussed as{\textbackslash}nan alternative to global caching. An implementation{\textbackslash}nproposal for polymorphic inline caches in the Squeak{\textbackslash}nvirtual machine is presented, and possible future{\textbackslash}napplications for online optimization are outlined.},
  timestamp = {2015-06-26 15:49:21},
title = {Proceedings of The Second Workshop on Implementation, Compilation, Optimization of Object-Oriented Languages, Programs and Systems ({Icooolps}'2007), {Ecoop} Workshop}
author = {Michael Haupt and Robert Hirschfeld and Marcus Denker},
  year = {2007},
  keywords = {scg07 scg-pub skip-doi jb08 snf07},
  pages = {17--22}
}

@inproceedings{deck_squeak_2004,
title = {Squeak in Spain As Part of The {Linex} Project}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314385},
  abstract = {Extremadura regional government has started to use Squeak within the LinEx project. Cooperation from the group Small-Land, devoted to spread the use of Squeak in the Spanish-speaking community all over the world, has allowed us to install Squeak in all secondary education classrooms.},
  timestamp = {2015-06-26 15:49:23},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Diego G{\'o}mez Deck and Jos{\'e} L Redrejo Rodriguez},
  year = {2004},
  keywords = {Application software,Collaborative work,computer aided instruction,computer graphics,Computer science education,Educational institutions,Educational technology,Electric shock,Extremadura regional government,Government,Internet,Joining processes,LinEx project,multimedia computing,secondary education classrooms,Small-Land,smalltalk,Spain,Spanish-speaking community,Squeak},
  pages = {160--165}
}

@inproceedings{fujioka_practices_2004,
title = {Practices of Information Education with Squeak Toward The Secure Improvement of 'Academic Ability'}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314380},
  abstract = {This work describes a curriculum of information education using Squeak at Horikawa High School, which is specified as "Super Science High School (SSH)" where teachers try innovative teaching methods to stimulate students' interests in science. This curriculum aims to achieve the objectives of a subject "information study" specified by the Ministry of Education, Culture, Sports, Science and Technology. We consider that Squeak can provide powerful environments where students can think and try confirming the results visually, and the environments are ideal for them to learn how to design and evaluate graphical user interface. We introduce the first effort to create a curriculum for a subject "basic inquiry" in SSH.},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Takeshi Fujioka and Hiroki Karuno and Yahiko Kambayashi},
  year = {2004},
  keywords = {academic ability,Communication networks,computer aided instruction,Computer networks,Computer science education,Councils,education,Educational institutions,graphical user interface,graphical user interfaces,GUI design,GUI evaluation,Horikawa High School,Informatics,information education curriculum,Information science,International collaboration,Joining processes,multimedia computing,Particle measurements,science,smalltalk,Societies,Squeak,student interests,Super Science High School,teaching,teaching method innovation,user interface management systems},
  pages = {130--137}
}

@inproceedings{hintze_designing_2004,
title = {Designing A 3D Authoring Tool for Children}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314373},
  abstract = {When designing their own interactive 3D worlds and computer games, children can not only engage in a fun and playful activity that has meaning to them, but will be able to strengthen their creative power as well as their analytical and problem solving skills. However, this requires tools that are designed carefully to foster these processes and to be fun to use at the same time. We present work in progress on designing a 3D authoring tool for children to create interactive 3D worlds. In the design process, emphasis was placed on fostering the user's creative process as well as on conveying mathematical and structural principles and ways of thinking through the tool's structure. In the design process of a 3D authoring tool, these two goals often stand in contradiction to each other. We discuss selected problems that are characteristic to the design of this authoring tool and present our solutions to these problems as well as the resulting preliminary prototype system JiVE.},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Jana Hintze and Maic Masuch},
  year = {2004},
  keywords = {3D authoring tool design,Application software,authoring systems,computer aided instruction,computer games,computer graphics,Geometry,Humans,interactive 3D worlds,interactive systems,JiVE prototype system,mathematical principles,Paints,Paper technology,Problem-solving,Process design,Prototypes,structural principles,Textiles,Writing},
  pages = {78--85}
}

@inproceedings{lombardi_enabling_2004,
title = {Enabling Social Dimensions of Learning through A Persistent, Unified, Massively Multi-User, and Self-Organizing Virtual Environment}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314386},
  abstract = {Existing online learning experiences lack the social dimension that characterizes learning in the real world. This social dimension extends beyond the traditional classroom into the university's common areas where learners build knowledge and understanding through serendipitous and collaborative exchanges both within and across traditional subject area boundaries. A next generation virtual learning environment (VLE) can address the limitations of current online systems by providing a richer social context for online learning. We describe the end-user properties of a highly-scalable self-organizing Croquet-based VLE that fosters dynamic group learning experiences and the development of communities of practice. This proposed VLE provides the capacity to merge the institutional infrastructure for academic computing, enterprise-level networks, Squeak/Croquet-based content authoring, and the educational principles of constructivist pedagogy.},
  timestamp = {2015-06-26 15:49:29},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Julian Lombardi and Mark P. McCahill},
  year = {2004},
  keywords = {academic computing,Cities and towns,Collaboration,computer aided instruction,Computer networks,Computer science education,content management,Discussion forums,dynamic group learning,Electronic learning,end-user properties,enterprise-level networks,Environmental management,groupware,highly-scalable self-organizing Croquet-based VLE,Information technology,institutional infrastructure,knowledge building,Knowledge management,multimedia computing,online learning,online systems,Peer to peer computing,persistent unified massively multiuser self-organ,smalltalk,social aspects of automation,social context,social dimensions,Squeak/Croquet-based content authoring,Virtual environment,virtual learning environment,virtual reality},
  pages = {166--172}
}

@inproceedings{maloney_scratch_2004,
title = {Scratch: A Sneak Preview}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314376},
  abstract = {Scratch is a networked, media-rich programming environment designed to enhance the development of technological fluency at after-school centers in economically-disadvantaged communities. Just as the LEGO MindStorms robotics kit added programmability to an activity deeply rooted in youth culture (building with LEGO bricks), Scratch adds programmability to the media-rich and network-based activities that are most popular among youth at after-school computer centers. Taking advantage of the extraordinary processing power of current computers, Scratch supports programming paradigms and activities that were previously infeasible, making it better positioned to succeed than previous attempts to introduce programming to youth. Our working hypothesis is that, as kids work on personally meaningful Scratch projects such as animated stories, games, and interactive art, they develop technological fluency, mathematical and problem solving skills, and a justifiable self-confidence that serves them well in the wider spheres of their lives.},
  timestamp = {2015-06-26 15:49:24},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {John Maloney and Natalie Rusk and Leo Burd and Brian Silverman and Yasmin Kafai and Mitchel Resnick},
  year = {2004},
  keywords = {after-school centers,Animation,Art,Buildings,computer graphics,Computer networks,distributed programming,educational computing,Educational programs,Environmental economics,media-rich programming environment,networked programming environment,Object-oriented programming,Power generation economics,programming environments,Programming profession,Robot programming,Scratch,technological fluency,visual programming},
  pages = {104--109}
}

@inproceedings{matsuzawa_trial_2004,
title = {A Trial Course of Programming with Squeak}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314394},
  abstract = {The purpose of programming education is not only to memorize the knowledge of programming language but also to let the learners acquire useful concepts for realizing one's idea in the form of a program. It requires such activities as logical thinking, problem solving, modeling and abstraction. However, most of beginners are bothered to memorize a lot of knowledge of the programming language and to eliminate compile errors. It prevents learners from concentrating on their concept acquisition. We think that Squeak proposed by Alan Kay has potential to solve this problem. However, if a teacher teaches only the knowledge of Squeak and its environment, the problem is not resolved. In this report, we propose a Squeak based curriculum and its concept for education of programming.},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Yoshiaki Matsuzawa and Manabu Sugiura and Hajime Ohiwa},
  year = {2004},
  keywords = {abstraction,compile errors,computer aided instruction,Computer languages,Computer science education,concept acquisition,concept learning,education,educational courses,Educational institutions,Educational products,Educational programs,logical thinking,modeling,multimedia computing,Natural languages,Problem-solving,problem solving,programming education,programming language,Programming Languages,Programming profession,smalltalk,Sorting,Squeak based curriculum,Tiles},
  pages = {188--188}
}

@inproceedings{mccahill_design_2004,
title = {Design for An Extensible Croquet-Based Framework to Deliver A Persistent, Unified, Massively Multi-User, and Self-Organizing Virtual Environment}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314372},
  abstract = {We describe a design for a collaborative virtual learning environment (VLE) to support massively multi-user and multi-institutional learning communities. This architecture extends Croquet to encompass a tier of distributed cache servers that allow intelligent caching and pre-fetching of objects, scene definitions, and textures. The design also provides for interactivity servers tied to specific regions in the VLE. Interactivity servers provide persistence for neighborhoods, coordinate modification and transient phenomena for locales in the virtual space, and ensure trust relations by managing user identification, authentication, and authorization via integration with existing institutional authentication infrastructure. This system supports real-time interactions that promote a self organizing, interdisciplinary knowledge sharing system within a scalable VLE in a manner that ensures accountability and trust relations.},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Mark P. McCahill and Julian Lombardi},
  year = {2004},
  keywords = {Authentication,Authorization,cache storage,Collaboration,collaborative virtual learning environment,Computer architecture,courseware,distributed cache servers,distributed shared memory systems,Energy management,extensible Croquet-based framework,Information technology,intelligent caching,interactivity servers,interdisciplinary knowledge sharing system,Internet,Large-scale systems,Learning systems,multi-access systems,multi-agent systems,multiinstitutional learning communities,multiuser self-organizing virtual environment,object prefetching,scene definitions,self organizing knowledge sharing system,storage management,user authentication,user authorization,user identification management,Virtual environment},
  pages = {71--77}
}

@inproceedings{yamamiya_skeleton_2004,
title = {Skeleton - Easy Simulation System}
  isbn = {0769521665},
  doi = {10.1109/C5.2004.1314368},
  abstract = {Skeleton is a visual scripting environment as an extension of Squeak etoy with Connectors system to make mathematical and physical simulation for non professional computer user. Squeak etoy system is a unique attempt to provide effective way of programming for children in learning environment. Skeleton makes logical relationships among graphical objects in the etoy system with spreadsheets-style interface, and users can describe object's behavior in declarative representation. Concreteness is one of the key words of end user scripting. Direct manipulation with objects on the screen is helpful to understand what is happened in your computer. Skeleton's spreadsheets style interface realizes this concreteness to show any input and output data same time. Sometime user scripting system like etoy has a problem of modularity. This aspect is important as a basis of reusing, thus Skeleton has some features for reusing. Tree structured naming system like ECMAScipt is used to access to Skeleton object by name. And modularity is realized by sheet-card mechanism that is possible to reuse a behavior of objects in another context in Skeleton.},
  timestamp = {2015-06-26 15:49:24},
title = {Proceedings - Second International Conference on Creating, Connecting and Collaborating Through Computing}
author = {Takashi Yamamiya},
  year = {2004},
  keywords = {children learning environment,Computational modeling,computer aided instruction,Computer science education,Computer simulation,Concrete,Connectors,Connectors system,easy simulation system,ECMAScipt,end user scripting,graphical objects,graphical user interfaces,Joining processes,logic programming languages,mathematical simulation,nonprofessional computer user,Object-oriented programming,physical simulation,Physics computing,programming for children,Programming profession,Propulsion,Skeleton,spreadsheets-style interface,Squeak etoy,tree structured naming system,user interfaces,visual programming,visual scripting environment},
  pages = {50--53}
}

@inproceedings{ruger_transqueak_2004,
title = {{Transqueak} - Making The World A Smaller Place: On-The-Fly Translation of Etoy Projects and Instant Messaging}
  isbn = {0-7695-2166-5},
  doi = {10.1109/C5.2004.1314377},
  abstract = {This work presents an extension to the existing multilingualization work (ml7n) which allows people to collaborate on Squeak Etoy projects across different natural languages. Squeak etoys support several languages, both ISO-Latin based ones (erg., English, German, French), and nonISO languages (e.g., Japanese). Switching between languages for the Etoy tiles is fairly easy to support as the tiles provide a predefined set of words and phrases, which only need to be translated once. There are two areas where we need to go beyond the predefined and pretranslated set of phrases: user supplied names and communication between collaborators. This work presents an approach based on online translation services. We demonstrate a working prototype and a first analysis of the feasibility of this approach.},
  timestamp = {2015-06-26 15:49:21},
title = {Proceedings. Second International Conference on Creating, Connecting and Collaborating through Computing, 2004.}
author = {M. Ruger and Y. Ohshima},
  year = {2004},
  keywords = {collaborate working,electronic messaging,Etoy tiles,groupware,instant messaging,International collaboration,Joining processes,language translation,natural language interfaces,online translation services,on-the-fly translation,smalltalk,Squeak etoys,TranSqueak},
  pages = {110--116}
}

@inproceedings{smith_croquet_2004,
title = {Croquet: A Menagerie of New User Interfaces}
  isbn = {0-7695-2166-5},
  doi = {10.1109/C5.2004.1314362},
  abstract = {A new architecture like Croquet presents numerous opportunities and challenges to create useful interfaces to enable access to the underlying power of the system. In particular, our focus on an integrated 2D and 3D system ensures that we have a rich intellectual environment within which to explore. This experience is similar to the development of the original modern windowing user interface created by Alan Kay, his team at Xerox Pare, and his Squeak team (Ingalls et al., 2002; Kay, 1996). Just as those teams did, we also have an infrastructure that is rich enough to allow us to perform some deep exploration into the presentation and manipulation of rich media expressed in 3D, and in the negotiations through these rich media worlds. A number of key technologies will be discussed including dynamic movable portals, floating 3D windows, true 3D creation tools, live teleporting snapshots, and completely new concepts such as 3D portals.},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings. Second International Conference on Creating, Connecting and Collaborating through Computing, 2004.}
author = {D.A. Smith and Andreas Raab and D.P. Reed and Alan Kay},
  year = {2004},
  keywords = {3D graphics,3D portals,Chromium,Collaboration,Collaborative work,computer graphics,Croquet,dynamic movable portals,floating 3D windows,Floors,graphical user interfaces,Graphics,Humans,Laboratories,live teleporting snapshots,OpenGL,Peer to peer computing,peer-to-peer computing,portals,smalltalk,Squeak team,TeaTime,true 3D creation tools,user interfaces,Xerox Pare},
  pages = {4--11}
}

@inproceedings{ye_squeakbased_2004,
title = {A Squeak-Based Educational Software - Happy Learning}
  isbn = {0-7695-2166-5},
  doi = {10.1109/C5.2004.1314381},
  abstract = {This paper introduces a Squeak-based educational software - Happy Learning. The software provides powerful tools for carrying out virtual experiments, doing exercises as well as tests, and making courseware. It has rich resources which consist of all kinds of learning materials, such as a large amount of courseware prepared in advance, and exercises from various subjects. In order to organize the resources efficiently, we introduce object deputy model. The model provides view mechanisms, rich semantics, multiple inheritances, and multiple classifications, which can enhance the performance and functions of the system.},
  timestamp = {2015-06-26 15:49:32},
title = {Proceedings. Second International Conference on Creating, Connecting and Collaborating through Computing, 2004.}
author = {Juan Ye Juan Ye and Zhiyong Peng Zhiyong Peng},
  year = {2004},
  keywords = {Computer architecture,Computer science education,courseware,Educational programs,Happy Learning,learning materials,Libraries,multimedia computing,Multimedia systems,object deputy model,Object-oriented programming,resource organization,smalltalk,software engineering,Software tools,Speech synthesis,Squeak-based educational software,student experiments,Testing,virtual experiments},
  pages = {138--145}
}

@inproceedings{dara-abrams_reaching_2005,
title = {Reaching Adult Learners through The Entry Point Framework and Problem-Based Learning in A Croquet-Based Virtual Environment}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.24},
  abstract = {Adult learners with varying needs, backgrounds, skills, experiences, and ways of learning place increasing demands on higher education to provide learning experiences that are accessible, applicable, and relevant to their own individual needs. At the same time, demands of the workplace require the development of competencies and the ability to not only understand but also to communicate, apply, and act on newly acquired knowledge, often through cooperative team work. Though adult learners may approach higher education with apprehension, they are increasingly comfortable with technology. In this paper, we discuss how the entry point framework and problem-based learning can be implemented in a Croquet-based virtual environment to support adult learners with varying profiles of intellectual strengths.},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Benay Dara-Abrams},
  year = {2005},
  keywords = {adult learners,Buildings,Collaborative work,computer aided instruction,cooperative team work,Croquet-based virtual environment,education,Educational institutions,Educational technology,Employment,entry point framework,Explosions,Fires,further education,groupware,higher education,intellectual strengths,Joining processes,problem-based learning,Virtual environment,virtual reality},
  pages = {119--126}
}

@inproceedings{gargus_bootstrapping_2005,
title = {Bootstrapping An Animated Sketchbook}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.6},
  abstract = {This paper describes initial steps towards a system for intuitively sketching animations in the context of a digital sketchbook for developing ideas and recording thoughts. Following a user-centric approach, the initial version of the system is designed as an interviewing tool to gather user feedback that would guide further UI development. To facilitate review of user interviews, we have implemented a history mechanism that works with arbitrarily nested 'worlds'. The history of the entire complex of worlds can be traversed, or sub-worlds can be traversed individually, or even be embedded in completely different worlds. We describe a novel approach to fitting, storing, and rendering strokes drawn by the user, which is designed for low storage overhead and efficient traversal by our history mechanism, and which supports expressively animated rendering styles using GPU shaders.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Joshua Gargus},
  year = {2005},
  keywords = {animated digital sketchbook bootstrapping,Animation,Art,CAD,Collaboration,computer animation,Design automation,Digital recording,Feedback,GPU shader,graphical user interfaces,History,Microcomputers,Production systems,rendering (computer graphics),stroke rendering,user centred design,user-centric approach,user interface management systems,user interfaces},
  pages = {33--40}
}

@inproceedings{kawamura_p2p_2005,
title = {P2P E-Learning System and Its Squeak-Based User Interface}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.22},
  abstract = {In this paper, we present a novel framework for asynchronous Web-based training. The proposed system has two distinguishing features. Firstly, it is based on P2P architecture for scalability and robustness. Secondly, all contents in the system are not only data but also agents so that they can mark user's answers, can tell the correct answers, and can show some extra information without human instruction. We also present a prototype implementation of the proposed system on Maglog. Maglog is a Prolog-based framework for building mobile multi-agent systems we have developed. The user interface program of the proposed system is built on Squeak. Performance simulations demonstrate the effectiveness of the proposed system.},
  timestamp = {2015-06-26 15:49:25},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Takao Kawamura and Ryosuke Nakatani and Kazunori Sugahara},
  year = {2005},
  keywords = {asynchronous Web-based training,computer based training,Computer networks,Electronic learning,History,Humans,Internet,Knowledge engineering,Maglog,mobile agents,mobile multiagent systems,Multiagent systems,multi-agent systems,P2P e-learning system,peer-to-peer computing,PROLOG,Prolog-based framework,Prototypes,Robustness,Scalability,smalltalk,Squeak-based user interface,user interfaces},
  pages = {57--63}
}

@inproceedings{lombardi_user_2005,
title = {User Interfaces for Self and Others in Croquet Learning Spaces}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.33},
  abstract = {Croquet-based learning environments should combine a rich media vocabulary with a distributed multi-user social experience. Such environments can provide unique opportunities for creating and delivering experiences that enhance online teaching and learning. Designing a user interface for such collaborative spaces presents several unique challenges. To enable productive interactions between users of such spaces requires that software designers choose what sorts of social interactions and cues to support such interactions within the collaborative space, and which to avoid. Design considerations are further complicated by the need to accommodate usability expectations created by users who are familiar with modern video game conventions while at the same time creating a user interface that provides an accessible path to the novice user of three-dimensional collaborative virtual environments. In this paper we examine how the user interface must explicitly address the boundary between private and public in a virtual collaborative social space, and propose a set of initial user interface conventions so that we can start the trial and error process of developing the optimal user interface for Croquet-based collaborative spaces to support learning and instruction.},
  timestamp = {2015-06-26 15:49:20},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Julian Lombardi and Mark P. McCahill},
  year = {2005},
  keywords = {Collaborative software,Collaborative work,computer aided instruction,Croquet learning spaces,distributed multiuser social experience,education,Games,groupware,human computer interaction,Information technology,Online Communities/Technical Collaboration,Software design,Space technology,user interface,user interfaces,virtual collaborative social space,virtual reality,Vocabulary},
  pages = {3--10}
}

@inproceedings{lombardi_croquet_2005,
title = {Croquet Learning Environments: Extending The Value of Campus Life Into The Online Experience}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.11},
  abstract = {Croquet is a broadband communications platform with a 3D user interface and peer-to-peer network architecture that provides educators with a new expressive meta-medium that is capable of replicating - and in certain ways, surpassing - the most valuable features of campus life. By comparing the campus to a collaborative "information space" where we are free to roam and "interoperate" at will, we underscore the role that proprietary restrictions - operating systems, applications, and formats - have played in making online learning a remote, cramped, and emotionally "flat" experience. From there, we examine the technical hurdles that must be overcome before our online learning experiences can approximate the vitality of campus-based, socially contextualized education.},
  timestamp = {2015-06-26 15:49:30},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Marilyn May Lombardi and Julian Lombard},
  year = {2005},
  keywords = {3D user interface,Broadband communication,campus-based socially contextualized education,collaborative information space,Computational modeling,computer aided instruction,Computer science,Concrete,Croquet broadband communications platform,Croquet learning environment,distance learning,expressive meta-medium,graphical user interfaces,groupware,Information technology,Internet,Mathematics,Object oriented modeling,online learning experience,Peer to peer computing,peer-to-peer computing,peer-to-peer network architecture,Programming profession,user interfaces,virtual reality},
  pages = {135--142}
}

@inproceedings{masuch_challenges_2005,
title = {Challenges in Collaborative Game Design Developing Learning Environments for Creating Games}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.7},
  abstract = {We perform a general analysis of the game design process, the structure of digital games and investigate the requirements for the use of OpenCroquet as a platform for collaborative game design. Based on our experiences of using a Squeak/Tweak programming environment in many game projects and recently for teaching game design we derive properties of a learning environment for teaching game design in an OpenCroquet environment with a special focus on collaboration.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Maic Masuch and Michael Rueger},
  year = {2005},
  keywords = {Analytical models,Collaboration,collaborative game design teaching,Collaborative software,computer aided instruction,computer games,digital game creation,education,groupware,learning environment,OpenCroquet environment,Open source software,Process design,Production,programming environments,Programming profession,smalltalk,Squeak,teaching,Teamwork,Tweak programming environment},
  pages = {67--74}
}

@inproceedings{mccahill_user_2005,
title = {User Interfaces for Places and Things in Croquet Learning Spaces}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.32},
  abstract = {Croquet collaborative learning environments are computer-mediated three-dimensional social environments where users create and modify the shared virtual world simulation. Users build and modify Croquet collaborative spaces by creating new spaces, linking spaces together, and populating spaces with objects. The spaces and objects that users control can have behaviors and other attributes which users may modify. This flexibility presents unique challenges in designing a user interface that is functional for a user community with a wide range of experience and expertise. In this paper, we examine how the user interface can support user control of things and places in Croquet-based collaborative learning spaces, and propose a set of initial user interface conventions so that we can start the trial and error process of developing the optimal user interface for Croquet-based collaborative spaces that support learning and instruction.},
  timestamp = {2015-06-26 15:49:20},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Mark P. McCahill and Julian Lombardi},
  year = {2005},
  keywords = {Collaboration,Collaborative work,Computational modeling,computer aided instruction,computer-mediated three-dimensional social enviro,Computer simulation,Croquet-based collaborative learning spaces,Croquet collaborative spaces,Error correction,groupware,Information technology,Joining processes,Optimal control,Space technology,user interface design,user interface management systems,user interfaces,virtual reality},
  pages = {11--18}
}

@inproceedings{mcgeer_media_2005,
title = {The Media Messenger}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.30},
  abstract = {We describe a new messaging system, designed to transparently send media (video, presentations, animations, audio, interactive games, still images, 3D spaces, or combinations thereto) to other users across the Internet. Unlike previous Internet communication systems (Web, email, IM), the MediaMessenger incorporates all code and media types as first class objects; unlike previous media systems, the MediaMessenger offers rich mixed-media spaces, hyperlinked through a system of portals. In addition, the MediaMessenger exhibits a pure peer-to-peer unrooted namespace, explicit authorizations to send and receive messages (and thus prevents unwanted messaging, or spam), and blends the features of both electronic mail and Web browsing.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Rick McGeer and Andreas Raab and Michael Rueger},
  year = {2005},
  keywords = {Animation,electronic mail,Games,hyperlinks,hypermedia,IM,Internet,Internet communication systems,MediaMessenger messaging system,message authentication,mixed-media spaces,multimedia computing,Network servers,online front-ends,Peer to peer computing,peer-to-peer computing,peer-to-peer unrooted namespace,portals,Publishing,rendering (computer graphics),Web browsing,Web pages},
  pages = {101--107}
}

@inproceedings{ohshima_early_2005,
title = {The Early Examples of Kedama, A Massively Parallel System in Squeak}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.28},
  abstract = {This paper presents an overview of a massively parallel programming system that the author has been developing and also a few examples of the system. This system, named "Kedama", provides specialized programming construct to express particle simulation. This helps in the math and science education in school setting where the students don't have particular programming training. Kedama is deeply inspired by StarLogo, the previous work in the domain. However, Kedama has a few notable differences from the previous works. Firstly, scripts can be constructed in a graphical user interface. This GUI is very similar to the well-known Squeak eToys and users can write scripts with little effort. Secondly, the system allows dynamic changes while it is running. It lets users modify their program and explore their problem domain quickly. Thirdly, the notion of the Observer script and Turtle script are unified. A user can freely mix the global actions and turtle actions in one script with little constraint. This paper introduces the concepts and semantics of the system, and discusses the examples that illustrate how to access these features. The simulations discussed are bouncing atoms, the epidemic and pixel manipulations.},
  timestamp = {2015-06-26 15:49:22},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Yoshiki Ohshima},
  year = {2005},
  keywords = {Dynamic programming,educational computing,Educational institutions,Educational programs,Engines,graphical user interface,graphical user interfaces,interactive systems,Kedama parallel programming system,Mathematical programming,mathematics education,Observer script,parallel programming,Programming profession,science education,smalltalk,Squeak etoys,StarLogo,Sun,Tiles,Turtle script},
  pages = {93--100}
}

@inproceedings{smith_filters_2005,
title = {Filters and Tasks in Croquet}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.14},
  abstract = {Croquet is a collaborative 3D platform that allows users to work together to create and share ideas. We are developing an architecture that incorporates the ideas of filters and controls for 3D to solve this problem. Our model uses the Croquet 2D portals as view filters that can modify the nature of the content displayed on the other side of the filter. Another problem is that this collaborative sharing of interfaces tends to be complex. A new approach to this, an extension of the model-view-controller approach pioneered in Smalltalk is described. This extension of MVC to collaborative 3D user interface design consists of interactors, tasks, and replicants. This architecture solves the collaboration UI problem in a way that makes it quite easy for the designer to create robust multi-user applications without having to manage the divergent states and goals of each user. The programmer can focus on the design of an extensible system as if he is dealing with a single user.},
  timestamp = {2015-06-26 15:49:28},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {David Smith and Andreas Raab and Yoshiki Ohshima and David P. Reed and Alan Kay},
  year = {2005},
  keywords = {collaborative 3D platform,collaborative 3D user interface design,Croquet 2D portals,Filters,graphical user interfaces,groupware,Information filters,model-view-controller approach,portals,smalltalk,user interface management systems,view filters},
  pages = {50--56}
}

@inproceedings{yamamiya_metatoys_2005,
title = {Meta-Toys Workshop and Environment with Squeak}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.20},
  abstract = {This paper discussed an idea of curriculum and the software project named meta-toys. The first primary motivation of the curriculum was designed for learning way of media-art, but now the goal is more comprehensive for leading generic computer literacy. Through the workshop, students could learn not only how to use computer software, but also how to make software for works along with own independent needs. Meta-toys workshop introduces the way of thinking about how to use computer effectively with making presentation tools. In addition to show the workshop, we describe necessary software features for the workshop.},
  timestamp = {2015-06-26 15:49:26},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Takashi Yamamiya},
  year = {2005},
  keywords = {authoring systems,computer aided instruction,computer literacy,computer software,educational courses,humanities,meta-toys workshop,software project,Squeak scripting system,user interfaces},
  pages = {21--26}
}

@inproceedings{yokokawa_swimmy_2005,
title = {Swimmy: A Framework of Multi-Agent Instruction System for Children}
  volume = {2005},
  isbn = {0769523250},
  doi = {10.1109/C5.2005.26},
  abstract = {The author has developed a framework for an interactive programmed instruction system, named Swimmy, in the Squeak eToys. This system is based on a multi-agent architecture for adaptability and open-endedness. Therefore, Swimmy is flexible for complex situations in classrooms. Moreover, Swimmy aims to be fun and easy to use for children. Children interact with software agents just like interacting with pets. Children can program the agents with the aid of a visual tool just like painting.},
  timestamp = {2015-06-26 15:49:23},
title = {Proceedings - Third International Conference on Creating, Connecting and Collaborating through Computing, C5 2005}
author = {Koji Yokokawa},
  year = {2005},
  keywords = {Application software,computer aided instruction,Computer architecture,Displays,Educational technology,interactive programmed instruction system,interactive programming,interactive systems,Mice,multiagent architecture,multi-agent systems,Painting,Positron emission tomography,Programming profession,software agents,Squeak etoys,Swimmy,Timing,user interfaces,visual tool},
  pages = {27--32}
}

@inproceedings{perscheid_immediacy_2010,
title = {Immediacy through Interactivity: Online Analysis of Run-Time Behavior}
  isbn = {9780769541235},
  doi = {10.1109/WCRE.2010.17},
  abstract = {Visualizations of actual run-time data support the comprehension of programs, like examples support the explanation of abstract concepts and principles. Unfortunately, the required run-time analysis is often associated with an inconvenient overhead that renders current tools impractical for frequent use. We propose an interactive approach to collect and present run-time data. An initial shallow analysis provides for immediate access to visualizations of run-time information. As users explore this information, it is incrementally refined on-demand. We present an implementation that realizes our proposed approach and enables developers to instantly explore run-time behavior of selected code entities. We evaluate our interactive approach by measuring time and memory overhead in the context of ten different-sized projects. Our empirical results show that run-time data for an initial overview can be collected in less than 300 milliseconds for 95\% of cases.},
  timestamp = {2015-06-26 15:49:27},
title = {Proceedings - Working Conference on Reverse Engineering, {Wcre}}
author = {Michael Perscheid and Bastian Steinert and Robert Hirschfeld and Felix Geller and Michael Haupt},
  year = {2010},
  keywords = {Development environments,dynamic analysis,Object collaboration,program comprehension,Test cases},
  pages = {77--86}
}

@inproceedings{rothlisberger_autumn_2009,
title = {Autumn Leaves: Curing The Window Plague in {Ides}}
  isbn = {9780769538679},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5328777},
  doi = {10.1109/WCRE.2009.18},
  abstract = {Navigating large software systems is difficult as the various artifacts are distributed in a huge space, while the relationships between different artifacts often remain hidden and obscure. As a consequence, developers using a modern interactive development environment (IDE) are forced to open views on numerous source artifacts to reveal these hidden relationships, leading to a crowded workspace with many opened windows or tabs. Developers often lose the overview in such a cluttered workspace as IDEs provide little support to get rid of unused windows. AutumnLeaves automatically selects windows unlikely for future use to be closed or grayed out while important ones are displayed more prominently. This reduces the number of windows opened at a time and adds structure to the developer's workspace. We validate AutumnLeaves with a benchmark evaluation using recorded navigation data of various developers to determine the prediction quality of the employed algorithms.},
  timestamp = {2015-06-26 15:49:31},
title = {Proceedings - Working Conference on Reverse Engineering, {Wcre}}
  publisher = {{IEEE}},
author = {David R{\"o}thlisberger and Oscar Nierstrasz and St{\'e}phane Ducasse},
  year = {2009},
  keywords = {Developer activity analysis,Development environments,productivity,program comprehension,Software navigation},
  pages = {237--246},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\KQR5GUPQ\\articleDetails.html:text/html;Röthlisberger et al. - 2009 - Autumn leaves Curing the window plague in IDEs:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\2RFJA8MS\\Röthlisberger et al. - 2009 - Autumn leaves Curing the window plague in IDEs.pdf:application/pdf}
}

@inproceedings{ingalls_back_1997,
title = {Back to The Future: The Story of Squeak, A Practical Smalltalk Written in Itself}
  isbn = {0-89791-908-4},
  doi = {10.1145/263698.263754},
  abstract = {Squeak is an open, highly-portable Smalltalk implementation whose virtual machine is written entirely in Smalltalk, making it easy to debug, analyze, and change. To achieve practical performance, a translator produces an equivalent C program whose performance is comparable to commercial Smalltalks. Other noteworthy aspects of Squeak include: a compact object format that typically requires only a single word of overhead per object; a simple yet efficient incremental garbage collector for 32-bit direct pointers; efficient bulk- mutation of objects; extensions of BitBlt to handle color of any depth and anti-aliased image rotation and scaling; and real-time sound and music synthesis written entirely in Smalltalk.},
  timestamp = {2015-06-26 15:49:31},
title = {Proc. of The 12Th {Acm} {Sigplan} Conference on Object-Oriented Programming, 1997}
author = {Dan Ingalls and Ted Kaehler and John Maloney and Scott Wallace and Alan Kay},
  year = {1997},
  pages = {318--326}
}

@inproceedings{nierstrasz_revival_2005,
title = {On The Revival of Dynamic Languages}
  volume = {3628},
  isbn = {3540287485},
  url = {http://www.springerlink.com/index/5kyfv61vjdww2dw8.pdf},
  doi = {10.1007/11550679_1},
  abstract = {The programming languages of today are stuck in a deep rut that has developed over the past 50 years. Although we are faced with new challenges posed by enormous advances in hardware and internet technology, we continue to struggle with old-fashioned languages based on rigid, static, closed-world file-based views of programming. We argue the need for a new class of dynamic languages that support a view of programming as constant evolution of living and open software models. Such languages would require features such as dynamic first-class namespaces, explicit meta-models, optional, pluggable type systems, and incremental compilation of running software systems.},
  timestamp = {2015-06-26 15:49:26},
title = {Software Composition}
  publisher = {Springer},
author = {Oscar Nierstrasz and Alexandre Bergel and Marcus Denker and St{\'e}phane Ducasse and Roel Wuyts},
  year = {2005},
  pages = {1--13},
  file = {11550679_1:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\B9R47JPN\\11550679_1.html:text/html;Nierstrasz et al. - 2005 - On the revival of dynamic languages:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\ASTDBRQN\\Nierstrasz et al. - 2005 - On the revival of dynamic languages.pdf:application/pdf}
}

@inproceedings{hirschfeld_reflective_2005,
title = {Reflective Designs}
  volume = {152},
  timestamp = {2015-06-26 15:49:25},
title = {Software, {Iee} Proceedings-}
author = {Robert Hirschfeld and Ralf L{\"a}mmel},
  year = {2005},
  pages = {38--51}
}

@inproceedings{hirschfeld_dynamic_2006,
title = {Dynamic Service Adaptation}
  volume = {36},
  isbn = {0-7695-2087-1},
  doi = {10.1002/spe.766},
  abstract = {Change can be observed in our environment and in the technology we build. While changes in the environment happen continuously and implicitly, our technology has to be kept in sync with the changing world around it. Although for some of the changes we can prepare, for most of them we cannot. This is especially true for next generation mobile communication systems that are expected to support the creation of a ubiquitous society where virtually everything is connected and made available within an organic information network. Resources frequently join or leave the network, new types of media or new combinations of existing ones are used to interact and cooperate, and services are tailored to preferences and needs of individual customers to better meet their needs. We outline our research in the area of dynamic service adaptation to provide concepts and technologies allowing for such environments.},
  timestamp = {2015-06-26 15:49:29},
title = {Software - Practice and Experience}
author = {Robert Hirschfeld and Katsuya Kawamura},
  year = {2006},
  keywords = {Aspect-oriented programming,DSA,Dynamic AOP,Dynamic service adaptation},
  pages = {1115--1131}
}

@inproceedings{kojarski_aspectual_2003,
title = {Aspectual Reflection}
  url = {http://www.daimi.au.dk/~eernst/splat03/papers/Sergei_Kojarski.ps},
  abstract = {This workshop will advance the field of AOSD language design by emphasizing the need to understand the practical consequences of design decisions on the software engineering properties of aspect-oriented software. In particular, it will help language designers understand and evaluate the tradeoffs entailed by aspect language features, and address the need for consistent language design with respect to composability of language constructs and features.},
  timestamp = {2015-06-26 15:49:31},
title = {{Splat}: Software Engineering Properties of Languages for Aspect Technologies}
author = {Sergei Kojarski and Karl Lieberherr and David H Lorenz and Robert Hirschfeld},
  year = {2003}
}

@inproceedings{kowark_objectrelational_2009,
title = {Object-Relational Mapping with {Squeaksave}}
  isbn = {9781605588995},
  doi = {10.1145/1735935.1735951},
  timestamp = {2015-06-26 15:49:26},
title = {Structure}
author = {Thomas Kowark},
  year = {2009},
  keywords = {automatic schema creation,impedance mismatch,object-relational mapping},
  pages = {1--15}
}

@inproceedings{kowark_shared_2011,
title = {Towards A Shared Repository for Patterns in Virtual Team Collaboration}
  volume = {2},
  isbn = {978-1-4577-0665-3},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-31991-4_14\\nhttp://link.springer.com.ezproxy.is.ed.ac.uk/chapter/10.1007/978-3-642-31991-4_14\\nhttp://link.springer.com/content/pdf/10.1007\%2F978-3-642-31991-4_14.pdf},
  doi = {10.1007/978-3-642-31991-4},
  abstract = {The way teams use virtual collaboration tools, such as wikis, email systems, social networks, or version control systems can provide indicators for the success or failure of projects. We previously created a platform that allows to collect and analyze these virtual collaboration activities during project runtime in a non-interfering manner. In this paper, we provide a formal definition of collaboration patterns to enable sharing of beneficial or detrimental collaboration behavior amongst scientist and practitioners. We further define a mapping from collaboration pattern descriptions to SPARQL queries that allows to automatically test other projects for occurrences of the described behavior. By that, we provide a research tool that is able to stimulate relevant and rigorous findings in empirical engineering research and lead to the creation of a shared repository of patterns that reflect best practices in virtual team collaboration.},
  timestamp = {2015-06-26 15:49:21},
title = {The 5Th International Conference on New Trends in Information Science and Service Science}
author = {Thomas Kowark and Philipp Dobrigkeit and Alexander Zeier},
  year = {2011},
  pages = {346--351}
}

@inproceedings{group_hermion_2008,
title = {Hermion - Exploiting Runtime Information in The {Ide}}
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4556118},
  timestamp = {2015-06-26 15:49:28},
title = {The 16Th {Ieee} International Conference on Program Comprehension}
  publisher = {{IEEE}},
author = {Software Composition Group},
  year = {2008},
  pages = {63--72},
  file = {articleDetails:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\PQM2P78V\\articleDetails.html:text/html;Rothlisberger et al. - 2008 - Exploiting runtime information in the IDE:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\XC9B7VQW\\Rothlisberger et al. - 2008 - Exploiting runtime information in the IDE.pdf:application/pdf}
}

@article{achermann_calculus_2005,
title = {A Calculus for Reasoning About Software Composition}
  volume = {331},
  url = {http://www.sciencedirect.com/science/article/pii/S0304397504006450},
  doi = {10.1016/j.tcs.2004.09.022},
  abstract = {Although the term software component has become commonplace, there is no universally accepted definition of the term, nor does there exist a common foundation for specifying various kinds of components and their compositions. We propose such a foundation. The Piccola calculus is a process calculus, based on the asynchronous ??-calculus, extended with explicit namespaces. The calculus is high level, rather than minimal, and is consequently convenient for expressing and reasoning about software components, and different styles of composition. We motivate and present the calculus, and outline how it is used to specify the semantics of Piccola, a small composition language. We demonstrate how the calculus can be used to simplify compositions by partial evaluation, and we briefly outline some other applications of the calculus to reasoning about compositional styles. ?? 2004 Elsevier B.V. All rights reserved.},
  timestamp = {2015-06-26 15:49:32},
  number = {2-3},
  journal = {Theoretical Computer Science},
author = {Franz Achermann and Oscar Nierstrasz},
  year = {2005},
  keywords = {Process calculi,Software architecture,Software components},
  pages = {367--396},
  file = {S0304397504006450:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\T37ZWTPD\\S0304397504006450.html:text/html}
}

@incollection{denker_meta_2008,
title = {The Meta in Meta-Object Architectures}
  volume = {11},
  isbn = {9783540698241},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Denk08bMetaContextLNBIP.pdf},
  abstract = {Behavioral reflection is crucial to support for example functional upgrades, on-the-fly debugging, or monitoring critical applications. However the use of reflective features can lead to severe problems due to infinite metacall recursion even in simple cases. This is especially a problem when reflecting on core language features since there is a high chance that such features are used to implement the reflective behavior itself. In this paper we analyze the problem of infinite meta-object call recursion and solve it by providing a first class representation of meta-level execution: at any point in the execution of a system it can be determined if we are operating on a meta-level or base level so that we can prevent infinite recursion. We present how meta-level execution can be represented by a meta-context and how reflection becomes context-aware. Our solution makes it possible to freely apply behavioral reflection even on system classes: the meta-context brings stability to behavioral reflection. We validate the concept with a robust implementation and we present benchmarks.},
  timestamp = {2015-06-26 15:49:22},
title = {Tools Europe 2008}
  publisher = {Springer},
author = {Marcus Denker and Mathieu Suen and St{\'e}phane Ducasse},
  year = {2008},
  pages = {218--237},
  file = {978-3-540-69824-1_13:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\C28V8EE8\\978-3-540-69824-1_13.html:text/html;Denker et al. - 2008 - The meta in meta-object architectures:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\C6B96G57\\Denker et al. - 2008 - The meta in meta-object architectures.pdf:application/pdf}
}

@article{hirschfeld_dynamic_2008,
title = {Dynamic Adaptation--Changing Services At Run Time}
  timestamp = {2015-06-26 15:49:29},
  journal = {Towards 4G Technologies: Services with Initiative},
author = {Robert Hirschfeld},
  year = {2008},
  pages = {191--209}
}

@inproceedings{bergel_classbox_2003,
title = {The Classbox Module System}
  volume = {3},
  url = {http://ukpmc.ac.uk/abstract/CIT/631162},
  abstract = {Classical module systems support well the modular development of applications but do not offer the ability to add or replace a method in a class that is not defined in that module. On the other hand, languages that support method addition and replacement do not provide a modular view of applications, and their changes have a global impact. The result is a gap between module systems for object-oriented languages on one hand, and the very desirable feature of method addition and replacement on the other hand. To solve these problems we present classboxes, a module system for object-oriented languages that provides method addition and replacement. Moreover, the changes made by a classbox are only visible to that classbox (or classboxes that import it), a feature we call local rebinding. To validate the model, we have implemented it in the Squeak Smalltalk environment, and performed experiments modularising code.},
  timestamp = {2015-06-26 15:49:22},
title = {Ukpmc.Ac.Uk}
  publisher = {Springer},
author = {Alexandre Bergel and Ducasse Stephane and Wuyts Roel},
  year = {2003},
  keywords = {class ex-,Language design,Method lookup,Modules,Selector namespace,smalltalk,tension},
  pages = {1--10}
}

@article{hirschfeld_assisting_2002,
title = {Assisting System Evolution: A Smalltalk Retrospective}
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7444\&rep=rep1\&type=pdf},
  timestamp = {2015-06-26 15:49:31},
  journal = {Unanticipated Software Evolution},
author = {Robert Hirschfeld and Matthias Wagner and Kris Gybels},
  year = {2002}
}

@inproceedings{kuhn_composing_2008,
title = {Composing New Abstractions From Object Fragments}
  isbn = {978-1-60558-384-6},
  url = {http://dx.doi.org/10.1145/1507504.1507505},
  doi = {10.1145/1507504.1507505},
  abstract = {As object-oriented languages are extended with novel modularization mechanisms, better underlying models are required to implement these high-level features. This paper describes Cell, a language model that builds on delegation-based chains of object fragments. Composition of groups of cells is used: 1) to represent objects, 2) to realize various forms of method lookup, and 3) to keep track of method references. A running prototype of Cell is provided and used to realize the basic kernel of a Smalltalk system. The paper shows, using several examples, how higher-level features such as traits can be supported by the lower-level model.},
  timestamp = {2015-06-26 15:49:30},
title = {{Vmil} '08: Proceedings of The 2Nd Workshop on Virtual Machines and Intermediate Languages for Emerging Modularization Mechanisms}
  publisher = {{ACM}},
author = {Adrian Kuhn and Oscar Nierstrasz},
  year = {2008},
  pages = {1--12},
  file = {citation:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\2QKUAZEB\\citation.html:text/html;Kuhn und Nierstrasz - 2008 - Composing new abstractions from object fragments:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\UW4SI4XE\\Kuhn und Nierstrasz - 2008 - Composing new abstractions from object fragments.pdf:application/pdf}
}

@inproceedings{hirschfeld_dynamic_2004,
title = {Dynamic Service Adaptation for Runtime System Extensions}
  abstract = {Most of all software systems have to be changed after their initial deployment. This is not only because of changing knowledge and expectations about our domains and systems, but also because of the continuous change of the environment itself. While changes in the environment happen implicitly, we need to explicitly keep our technology in sync with the changing world around it. This is especially true for next generation mobile communication systems which we expect to be open to third-party service providers, allowing them to offer services on a variety of service platforms. Not all of these services to be offered will match with all of the platforms. Adjustments and extensions need to be made to offer a pleasant service experience. Research on dynamic service adaptation provides concepts and technologies needed to perform such changes late in a system's lifecycle, possibly on demand, at runtime, without disruption of service.},
  timestamp = {2015-06-26 15:49:29},
title = {Wireless On-Demand Network Systems}
author = {Robert Hirschfeld and Katsuya Kawamura and Hendrik Berndt},
  year = {2004},
  keywords = {runtime evolution},
  pages = {227--240}
}

@inproceedings{nierstrasz_analyzing_2006,
title = {Analyzing, Capturing and Taming Software Change}
  url = {http://scg.unibe.ch/archive/papers/Nier06bRDL06ACTSC.pdf},
  abstract = {Software systems need to continuously change to remain useful. Change appears in several forms and needs to be accommodated at different levels. We propose ChangeBoxes as a mechanism to encapsulate, manage, analyze and exploit changes to software systems. Our thesis is that only by making change explicit and manipulable can we enable the software developer to manage software change more effectively than is currently possible. Furthermore we argue that we need new insights into assessing the impact of changes and we need to provide new tools and techniques to manage them. We report on the results of some initial prototyping efforts, and we outline a series of research activities that we have started to explore the potential of ChangeBoxes.},
  timestamp = {2015-06-26 15:49:31},
title = {Workshop on Revival of Dynamic Languages (Co-Located with {Ecoop}'06)}
author = {Oscar Nierstrasz and Marcus Denker},
  year = {2006},
  pages = {1--9},
  file = {inria-00555757:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\ZHAB8E3B\\inria-00555757.html:text/html;Nierstrasz et al. - 2006 - Analyzing, capturing and taming software change:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\FPEPXDCX\\Nierstrasz et al. - 2006 - Analyzing, capturing and taming software change.pdf:application/pdf}
}

@article{abdeen_visualizing_2009,
title = {Visualizing , Assessing and Architectural Elements}
  url = {http://hal.inria.fr/tel-00498389/},
  abstract = {To cope with the complexity of large object-oriented software systems, developers organize classes into subsystems using the concepts of module or package. Such modular structure helps software systems to evolve when facing new requirements. The organization of classes into packages and/or subsystems represents the software modularization. the software modularization usually follows interrelationships between classes. Ideally, packages should to be loosely coupled and cohesive to a certain extent. However, Studies show that as software evolves to meet requirements and environment changes, the software modularization gradually drifts and looses quality. As a consequence, the software modularization must be maintained. It is thus important to understand, to assess and to optimize the organization of packages and their relationships. Our claim is that the maintenance of large and complex software modularizations needs approaches that help in: (1) understanding package shapes and relationships; (2) assessing the quality of a modularization, as well as the quality of a single package within a given modularization; (3) optimizing the quality of an existing modulariza- tion. In this thesis, we concentrate on three research fields: software visualizations, metrics and algorithms. At first, we define two visualizations that help maintainers: (1) to understand packages structure, usage and relationships; (2) to spot patterns; and (3) to identify misplaced classes and structural anomalies. In addition to visual- izations, we define a suite of metrics that help in assessing the package design quality (i.e., package cohesion and coupling). We also define metrics that assess the quality of a collection of inter-dependent packages from different view points, such as the degree of package coupling and cycles. Finally, we define a search-based algorithm that automatically reduces package coupling and cycles only by moving classes over existing packages. Our optimization approach takes explicitly into account the origi- nal class organization and package structure. It also allows maintainers to control the optimization process by specifying: (1) the maximal number of classes that may change their packages; (2) the classes that are candidate for moving and the classes that should not; (3) the packages that are candidate for restructuring and the packages that should not; and (4) the maximal number of classes that a given package can entail. The approaches presented in this thesis have been applied to real large object- oriented software systems. The results we obtained demonstrate the usefulness of our visualizations and metrics; and the effectiveness of our optimization algorithm.},
  timestamp = {2015-06-26 15:49:20},
author = {Hani Abdeen},
  year = {2009}
}

@article{ducasse_supporting_2002,
title = {Supporting Objects As An Anthropomorphic View At Computation or Why Smalltalk for Teaching Objects?}
  timestamp = {2015-06-26 15:49:23},
author = {St{\'e}phane Ducasse and Roel Wuyts},
  year = {2002}
}

@inproceedings{felgentreff_babelsberg_,
title = {Babelsberg : Specifying and Solving Constraints on Object Behavior}
  isbn = {9783869562650},
  doi = {10.5381/jot.2014.13.4.a1},
  timestamp = {2015-06-26 15:49:31},
author = {Tim Felgentreff and Alan Borning and Robert Hirschfeld},
  keywords = {Cons,Constraints,Object Constraint Programming}
}

@inproceedings{felgentreff_developing_,
title = {Developing A Formal Semantics for Babelsberg: A Step-By-Step Approach}
  timestamp = {2015-06-26 15:49:30},
author = {Tim Felgentreff and Todd Millstein and Ala Borning},
}

@inproceedings{felgentreff_reducing_,
title = {Towards Reducing The Need for Algorithmic Primitives in Dynamic Language {Vms} Through A Tracing {Jit}}
  timestamp = {2015-06-26 15:49:21},
author = {Tim Felgentreff and Tobias Pape and Lars Wassermann and Robert Hirschfeld and Carl Friedric Bolz},
}

@inproceedings{felgentreff_constraining_,
title = {Constraining Timing-Dependent Communication for Debugging Non-Deterministic Failures}
  timestamp = {2015-06-26 15:49:30},
author = {Tim Felgentreff and Michael Perscheid and Rober Hirschfeld},
}

@inproceedings{freudenberg_squeakjs_,
title = {{Squeakjs} - A Modern and Practical Smalltalk That Runs in Any Browser}
  timestamp = {2015-06-26 15:49:23},
author = {Bert Freudenberg and Dan Ingalls and Tim Felgentreff and Tobias Pape and Robert Hirschfeld},
}

@phdthesis{gaelli_modeling_2006,
title = {Modeling Examples to Test and Understand Software}
  url = {http://scg.unibe.ch/archive/phd/gaelli-phd.pdf},
  abstract = {One of the oldest techniques to explain abstract{\textbackslash}nconcepts is to provide concrete examples. By{\textbackslash}nexplaining an abstract concept with a concrete{\textbackslash}nexample people make sure that the concept is{\textbackslash}nunderstood and remembered. Examples in software can{\textbackslash}nbe used both to test the software and to illustrate{\textbackslash}nits functionality. Object-oriented programs are{\textbackslash}nbuilt around the concepts of classes, methods and{\textbackslash}nvariables, where methods are the atoms of the{\textbackslash}nfunctionality. But the meta-models of{\textbackslash}nobject-oriented languages do not allow developers to{\textbackslash}nassociate runnable and composable examples with{\textbackslash}nthese concepts and particularly not with methods.{\textbackslash}nUnit tests on the other hand, assure the quality of{\textbackslash}nthe units under test and document them. Not being{\textbackslash}nintegrated into the language, unit tests are not{\textbackslash}nlinked explicitly to their units under test which{\textbackslash}nmakes it unnecessarily dif ficult to use them for{\textbackslash}ndocumenting, typing and debugging software. In{\textbackslash}naddition they are not composable making it hard to{\textbackslash}ndevelop higher level test scenarios in parallel with{\textbackslash}nhigher level objects. In this thesis we analyze unit{\textbackslash}ntests to learn about implicit dependencies among{\textbackslash}ntests and from tests to the methods under test. We{\textbackslash}ndevelop a technique to partially order unit tests in{\textbackslash}nterms of their covered methods, which reveals{\textbackslash}npossible redundancies due to the lack of{\textbackslash}ncomposability. We show how partial orders can be{\textbackslash}nused to debug and to comprehend software. We then{\textbackslash}ndevelop a taxonomy based on several case studies{\textbackslash}nrevealing that a high fraction of unit tests already{\textbackslash}nimplicitly focuses on single methods. We show that{\textbackslash}nthe rest of the tests can be decomposed into{\textbackslash}ncommands focusing on single methods. We build a{\textbackslash}nmeta-model based on our findings of analyzing test{\textbackslash}ninterdependencies which establishes how tests can be{\textbackslash}nexplicitly linked to their method under test and how{\textbackslash}nthey can be composed to form higher-level test{\textbackslash}nscenarios. We explain how the problems of missing{\textbackslash}nlinks between tests and units under test are solved{\textbackslash}nusing our meta-model. Furthermore, we implemented{\textbackslash}nthe meta-model and a first user interface on top of{\textbackslash}nit to give first evidence of how our model supports{\textbackslash}nthe developer.},
  timestamp = {2015-06-26 15:49:26},
author = {Markus Gaelli},
  year = {2006},
  keywords = {scg-pub skip-doi scg-phd gaelli jb07 fb06 snf06},
  file = {Gaelli - 2006 - Modeling Examples to Test and Understand Software:C\:\\Users\\C5187727\\AppData\\Roaming\\Zotero\\Zotero\\Profiles\\rvcm8gho.default\\zotero\\storage\\EPN68SND\\Gaelli - 2006 - Modeling Examples to Test and Understand Software.pdf:application/pdf}
}

@inproceedings{graber_solving_,
title = {Solving Interactive Logic Puzzles With Object-Constraints: An Experience Report Using Babelsberg/S for Squeak/Smalltalk}
  timestamp = {2015-06-26 15:49:24},
author = {Maria Graber and Tim Felgentreff and Robert Hirschfeld and Ala Borning},
}

@inproceedings{hirschfeld_contextoriented_,
title = {Context-Oriented Programming}
  timestamp = {2015-06-26 15:49:30},
author = {Robert Hirschfeld and Pascal Costanza and Osca Nierstrasz},
}

@inproceedings{hirschfeld_openaspects_,
title = {{Open}\_Aspects}
  timestamp = {2015-06-26 15:49:26},
author = {Robert Hirschfeld and Stefa Hanenberg},
}

@inproceedings{hirschfeld_sophieserver_,
title = {{Sophieserver} - The Future of Reading}
  timestamp = {2015-06-26 15:49:23},
author = {Robert Hirschfeld and Michael Haupt and Michael R{\"u}ger and Patrick Br{\"u}nn and Ronny Esterlu{\ss} and Norman Holz and Kerstin Knebel and Rober Timm},
}

@inproceedings{kirilichev_stepwise_,
title = {Stepwise Back-In-Time Debugging}
  timestamp = {2015-06-26 15:49:23},
author = {Vasily Kirilichev and Eric Seckler and Benjamin Siegmund and Michael Perscheid and Rober Hirschfeld},
}

@article{rothlisberger_embedding_2008,
title = {Embedding Moose Facilities Directly in {Ides}}
  url = {http://scg.unibe.ch/archive/papers/Roet08gMooseFacilitiesInIDE.pdf},
  timestamp = {2015-06-26 15:49:29},
author = {David R{\"o}thlisberger},
  year = {2008},
}

@inproceedings{scharli_partial_2001,
title = {Partial Evaluation of Inter-Language Wrappers}
  timestamp = {2015-06-26 15:49:25},
author = {Nathanael Sch{\"a}rli and Franz Achermann},
  month = sep,
  year = {2001}
}

@inproceedings{seckler_archipelago_,
title = {Archipelago: A Research Platform for Component Interaction in Distributed Applications}
  timestamp = {2015-06-26 15:49:31},
author = {Eric Seckler and Rober Hirschfeld},
}

@inproceedings{steinert_codetalkconversations_,
title = {{Codetalk}-Conversations About Code}
  timestamp = {2015-06-26 15:49:30},
author = {Bastian Steinert and Marcel Taeumel and Jens Lincke and Tobias Pape and Rober Hirschfeld},
}

@inproceedings{taeumel_interleaving_2014,
title = {Interleaving of Modification and Use in Dataflow-Driven Tool Development}
  isbn = {9781450332101},
  doi = {10.1145/2661136.2661150},
  timestamp = {2015-06-26 15:49:27},
author = {Marcel Taeumel},
  year = {2014}
}


