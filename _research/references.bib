@ARTICLE{Abdeen2009,
author = {Hani Abdeen},
  title = {Visualizing , Assessing and Architectural Elements},
  year = {2009},
  pages = {--},
  __markedentry = {[C5187727:6]},
  abstract = {To cope with the complexity of large object-oriented software systems,
	developers organize classes into subsystems using the concepts of
	module or package. Such modular structure helps software systems
	to evolve when facing new requirements. The organization of classes
	into packages and/or subsystems represents the software modularization.
	the software modularization usually follows interrelationships between
	classes. Ideally, packages should to be loosely coupled and cohesive
	to a certain extent. However, Studies show that as software evolves
	to meet requirements and environment changes, the software modularization
	gradually drifts and looses quality. As a consequence, the software
	modularization must be maintained. It is thus important to understand,
	to assess and to optimize the organization of packages and their
	relationships. Our claim is that the maintenance of large and complex
	software modularizations needs approaches that help in: (1) understanding
	package shapes and relationships; (2) assessing the quality of a
	modularization, as well as the quality of a single package within
	a given modularization; (3) optimizing the quality of an existing
	modulariza- tion. In this thesis, we concentrate on three research
	fields: software visualizations, metrics and algorithms. At first,
	we define two visualizations that help maintainers: (1) to understand
	packages structure, usage and relationships; (2) to spot patterns;
	and (3) to identify misplaced classes and structural anomalies. In
	addition to visual- izations, we define a suite of metrics that help
	in assessing the package design quality (i.e., package cohesion and
	coupling). We also define metrics that assess the quality of a collection
	of inter-dependent packages from different view points, such as the
	degree of package coupling and cycles. Finally, we define a search-based
	algorithm that automatically reduces package coupling and cycles
	only by moving classes over existing packages. Our optimization approach
	takes explicitly into account the origi- nal class organization and
	package structure. It also allows maintainers to control the optimization
	process by specifying: (1) the maximal number of classes that may
	change their packages; (2) the classes that are candidate for moving
	and the classes that should not; (3) the packages that are candidate
	for restructuring and the packages that should not; and (4) the maximal
	number of classes that a given package can entail. The approaches
	presented in this thesis have been applied to real large object-
	oriented software systems. The results we obtained demonstrate the
	usefulness of our visualizations and metrics; and the effectiveness
	of our optimization algorithm.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://hal.inria.fr/tel-00498389/}
}

@ARTICLE{Achermann2005,
author = {Franz Achermann and Oscar Nierstrasz},
  title = {A calculus for reasoning about software composition},
  journal = {Theoretical Computer Science},
  year = {2005},
  volume = {331},
  pages = {367--396},
  number = {2-3},
  __markedentry = {[C5187727:6]},
  abstract = {Although the term software component has become commonplace, there
	is no universally accepted definition of the term, nor does there
	exist a common foundation for specifying various kinds of components
	and their compositions. We propose such a foundation. The Piccola
	calculus is a process calculus, based on the asynchronous ??-calculus,
	extended with explicit namespaces. The calculus is high level, rather
	than minimal, and is consequently convenient for expressing and reasoning
	about software components, and different styles of composition. We
	motivate and present the calculus, and outline how it is used to
	specify the semantics of Piccola, a small composition language. We
	demonstrate how the calculus can be used to simplify compositions
	by partial evaluation, and we briefly outline some other applications
	of the calculus to reasoning about compositional styles. ?? 2004
	Elsevier B.V. All rights reserved.},
  keywords = {Process calculi, Software architecture, Software components},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S0304397504006450}
}

@INPROCEEDINGS{Bajcsy2006,
author = {Ruzena Bajcsy and Sang Hack Yung and Orion Elenzil and Bradford Wilson and Rick McGeer and Klara Nahrstedts and Christine Strothotte},
  title = {New collaborative tools},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {120--125},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper we shall present two different yet complementary technologies
	toward collaboration. The first technology is based on interactive
	distributed and shared environment, that enables the users to access,
	modify/manipulate and view virtual objects being music, two or three
	dimensional images or video records. This software, called Virtual
	gallery is built on the system: Croquet originally developed by the
	group led by Alan Kay and supported by HP research. We have built
	a tool that enables by simple clicking to access files, bring them
	into the 3D environment, display them and manipulate them. The second
	collaborative technology is based on the capability of imaging in
	semi-real time physical activity of two or three people. We have
	built a laboratory equipped with 48 cameras at UC Berkeley and 10
	cameras at U of I in Urbana Champaign. The software accompanying
	these images reconstruct and display complete 3D data representing
	the physical activities of the people in the laboratory. The display
	is stereo display so that viewed through stereo glasses the viewer
	gets trough 3D impression. We are exploring the connectivity through
	long distance and planning to examine what it means to meet in cyberspace},
  issn = {0769525636},
  keywords = {3D data display, 3D data reconstruction, 3D environment, Cameras,
	Collaboration, Collaborative software, Collaborative tools, Glass,
	Laboratories, Meeting planning, Music, Stereo image processing, Three
	dimensional displays, Video sharing, distributed processing, groupware,
	image reconstruction, interactive distributed environment, interactive
	shared environment, interactive systems, physical activity imaging,
	semireal time imaging, stereo display, video records, video signal
	processing, virtual objects},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Bergel2007,
author = {Alexandre Bergel},
  title = {Classboxesâ€“Controlling Visibility of Class Extensions (Classboxesâ€“Kontrollierte
	Sichtbarkeit von Klassenerweiterungen)},
  journal = {itâ€“Information Technology (vormals it+ ti)},
  year = {2007},
  volume = {49},
  pages = {260--263},
  number = {4},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.degruyter.com/view/j/itit.2007.49.issue-4/itit.2007.49.4.260/itit.2007.49.4.260.xml}
}

@INPROCEEDINGS{Bergel2007a,
author = {Alexandre Bergel},
  title = {User-Changeable Visibility : Resolving Unanticipated Name Clashes
	in Traits},
  booktitle = {Composer},
  year = {2007},
  volume = {42},
  number = {10},
  pages = {171--190},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {A trait is a unit of behaviour that can be composed with other traits
	and used by classes. Traits offer an alternative to multiple inheritance.
	Conflict resolution of traits, while flexible, does not completely
	handle accidental method name conflicts: if a trait with method m
	is composed with another trait defining a different method m then
	resolving the conflict may prove delicate or infeasible in cases
	where both versions of m are still needed. In this paper we present
	freezable traits, which provide an expressive composition mechanism
	to support unanticipated method composition conflicts. Our solution
	introduces private trait methods and lets the class composer change
	method visibility at composition time (from public to private and
	vice versa). Moreover two class composers may use different composition
	policies for the same trait, something which is not possible in mainstream
	languages. This approach respects the two main design principles
	of traits: the class composer is empowered and traits can be flattened
	away. We present an implementation of freezable traits in Smalltalk.
	As a side-effect of this implementation we introduced private (early-bound
	and invisible) methods to Smalltalk by distinguishing object-sends
	from self-sends. Our implementation uses compile-time bytecode manipulation
	and, as such, introduces no run-time penalties.},
  issn = {9781595937865},
  keywords = {composition, dynamic typing, encapsulation, informa, tion hiding,
	traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://portal.acm.org/citation.cfm?id=1297027.1297040}
}

@INPROCEEDINGS{Bergel2006,
author = {Alexandre Bergel and Marcus Denker},
  title = {Prototyping Languages, Related Constructs and Tools with Squeak.},
  booktitle = {{ECOOP}'06 {Workshop} on {Revival} of {Dynamic} {Languages}},
  year = {2006},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {https://hal.inria.fr/inria-00555724/}
}

@ARTICLE{Bergel2005a,
author = {Alexandre Bergel and St Ducasse},
  title = {Scoped and Dynamic Aspects with Classboxes},
  journal = {L'objet},
  year = {2005},
  volume = {11},
  pages = {53--68},
  number = {3},
  __markedentry = {[C5187727:6]},
  abstract = {Atomically introducing changes to a group of classes\nis a challenging
	task. In addition, certain\napplications require that changes be
	applied\ndynamically without shutting down and restarting the\napplication.
	In this paper we present an extension\nof classboxes to make them
	dynamic. A classbox is a\nkind of module that supports class extension
	and\ninstance variable addition. Class extensions and\ndefinitions
	defined in a classbox represent an\naspect. In addition, with classboxes,
	aspects are\ndynamically applied to, removed from hot- in a\nsystem.
	Such aspects may crosscut a large number of\nclasses which are extended
	by adding or redefining\nexisting methods and adding new instance
	variables.\nFinally the aspects are scoped i.e., they are local\nto
	the classboxes that define them.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://cat.inist.fr/?aModele=afficheN&cpsidt=17306587}
}

@INPROCEEDINGS{Bergel2005b,
author = {Alexandre Bergel and St Ducasse},
  title = {Supporting Unanticipated Changes with Traits and Classboxes},
  booktitle = {Net.ObjectDays (NODE'05)},
  year = {2005},
  pages = {61--75},
  __markedentry = {[C5187727:6]},
  abstract = {On the one hand, traits are a powerful way of\nstructuring classes.
	Traits support the reuse of\nmethod collections over several classes.
	However,\ntraits cannot be used when specifying unanticipated\nchanges
	to an application. On the other hand,\nclassboxes are a new module
	system that supports the\nlocal redefinition of classes: a collection
	of\nclasses can be locally extended with variables\nand/or methods
	and the existing clients do not get\nimpacted by changes. However,
	an extension applied\nto a class by a classbox cannot be reused for
	other\nclasses. This paper describes how combining Traits\nand Classboxes
	supports the safe introduction of\ncrosscutting collaborations: safe
	because the\nexisting clients of the classes do not get impacted,\ncrosscutting
	because collaborations between several\nclasses can be put in place
	in a unanticipated\nmanner. In the resulting system, a collaboration
	is\nrepresented by a classbox and a role by a trait.},
  issn = {3885793989},
  keywords = {snf05 jb06 scg-pub skip-doi alexPub stefPub listic},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Berg05dTraitsClassbox.pdf}
}

@ARTICLE{Bergel2005c,
author = {Alexandre Bergel and St Ducasse and Oscar Nierstrasz},
  title = {Analyzing Module Diversity},
  journal = {Journal of Universal Computer Science},
  year = {2005},
  volume = {11},
  pages = {1613--1644},
  number = {10},
  __markedentry = {[C5187727:6]},
  abstract = {Each object-oriented programming language proposes\nvarious grouping
	mechanisms to bundle interacting\nclasses (i.e., packages, modules,
	selector\nnamespaces, etc). To understand such diversity and\nto
	compare the different approaches, a common\nfoundation is needed.
	As far as we are aware of, no\nmajor attempt that would go in that
	direction has\nbeen realized. In this paper we present a simple\nmodule
	calculus together with a set of operators for\nmodeling the composition
	semantics of different\ngrouping mechanisms. Using this module calculus
	we\nare able to express the semantics of {Java}\npackages, C# namespaces,
	Ruby modules, selector\nnamespaces, gbeta classes, classboxes, MZScheme\nunits,
	and MixJuice modules. This calculus supports\nthe identification
	of system families sharing\nsimilar characteristics. In addition
	it provides a\nuniform way to represent and analyze fine-grained\nmodule
	semantics.},
  keywords = {scg-pub skip-doi jb06 classbox snf06 stefPub alexP},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.jucs.org/jucs_11_10/analyzing_module_diversity\nhttp://scg.unibe.ch/archive/papers/Berg05cModuleDiversity.pdf}
}

@ARTICLE{Bergel2008,
author = {Alexandre Bergel and St Ducasse and Oscar Nierstrasz and Roel Wuyts},
  title = {Stateful traits and their formalization},
  journal = {Computer Languages, Systems and Structures},
  year = {2008},
  volume = {34},
  pages = {83--108},
  number = {2-3},
  __markedentry = {[C5187727:6]},
  abstract = {Traits offer a fine-grained mechanism to compose classes from reusable
	components while avoiding problems of fragility brought by multiple
	inheritance and mixins. Traits as originally proposed are stateless,
	that is, they contain only methods, but no instance variables. State
	can only be accessed within stateless traits by accessors, which
	become required methods of the trait. Although this approach works
	reasonably well in practice, it means that many traits, viewed as
	software components, are artificially incomplete, and classes that
	use such traits may contain significant amounts of boilerplate glue
	code. We present an approach to stateful traits that is faithful
	to the guiding principle of stateless traits: the client retains
	control of the composition. Stateful traits consist of a minimal
	extension to stateless traits in which instance variables are purely
	local to the scope of a trait, unless they are explicitly made accessible
	by the composing client of a trait. We demonstrate by means of a
	formal object calculus that adding state to traits preserves the
	flattening property: traits contained in a program can be compiled
	away. We discuss and compare two implementation strategies, and briefly
	present a case study in which stateful traits have been used to refactor
	the trait-based version of the Smalltalk collection hierarchy. Â©
	2007 Elsevier Ltd. All rights reserved.},
  issn = {978-3-540-71835-2},
  keywords = {Eiffel, Flattening, Jigsaw, Mixin, Multiple-inheritance, Traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842407000140}
}

@INCOLLECTION{Bergel2007c,
author = {Alexandre Bergel and St Ducasse and Oscar Nierstrasz and Roel Wuyts},
  title = {Stateful Traits},
  publisher = {Springer},
  year = {2007},
  volume = {4406},
  pages = {66--90},
  __markedentry = {[C5187727:6]},
  abstract = {Traits offer a fine-grained mechanism to compose classes from reusable
	components while avoiding problems of fragility brought by multiple
	inheritance and mixins. Traits as originally proposed are stateless,
	that is, they contain only methods, but no instance variables. State
	can only be accessed within traits by accessors, which become required
	methods of the trait. Although this approach works reasonably well
	in practice, it means that many traits, viewed as software components,
	are artificially incomplete, and classes that use such traits may
	contain significant amounts of boilerplate glue code. Although these
	limitations are largely mitigated by proper tool support, we seek
	a cleaner solution that supports stateful traits. The key difficulty
	is how to handle conflicts that arise when composed traits contribute
	instance variables whose names clash. We present a solution that
	is faithful to the guiding principle of stateless traits: the client
	retains control of the composition. Stateful traits consist of a
	minimal extension to stateless traits in which instance variables
	are purely local to the scope of a trait, unless they are explicitly
	made accessible by the composing client of a trait. Naming conflicts
	are avoided, and variables of disjoint traits can be explicitly merged
	by clients. We discuss and compare two implementation strategies,
	and briefly present a case study in which stateful traits have been
	used to refactor the trait-based version of the Smalltalk collection
	hierarchy. &copy; Springer-Verlag Berlin Heidelberg 2007.},
  issn = {9783540718352},
  journal = {Lecture Notes in Computer Science including subseries Lecture Notes
	in Artificial Intelligence and Lecture Notes in Bioinformatics},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Berg07aStatefulTraits.pdf}
}

@ARTICLE{Bergel2005,
author = {Alexandre Bergel and St Ducasse and Oscar Nierstrasz and Roel Wuyts},
  title = {Classboxes: Controlling visibility of class extensions},
  journal = {Computer Languages, Systems and Structures},
  year = {2005},
  volume = {31},
  pages = {107--126},
  number = {3-4},
  __markedentry = {[C5187727:6]},
  abstract = {A class extension is a method that is defined in a module, but whose
	class is defined elsewhere. Class extensions offer a convenient way
	to incrementally modify existing classes when subclassing is inappropriate.
	Unfortunately existing approaches suffer from various limitations.
	Either class extensions have a global impact, with possibly negative
	effects for unexpected clients, or they have a purely local impact,
	with negative results for collaborating clients. Furthermore, conflicting
	class extensions are either disallowed, or resolved by linearization,
	with consequent negative effects. To solve these problems we present
	classboxes, a module system for object-oriented languages that provides
	for method addition and replacement. Moreover, the changes made by
	a classbox are only visible to that classbox (or classboxes that
	import it), a feature we call local rebinding. To validate the model
	we have implemented it in the Squeak Smalltalk environment, and performed
	benchmarks. Â© 2005 Elsevier Ltd. All rights reserved.},
  keywords = {Class extension, Language design, Method lookup, Modules, Selector
	namespace},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.esug.org/data/ESUG2004/iam-04-008.pdf#page=186}
}

@ARTICLE{Bergel2007b,
author = {Alexandre Bergel and St Ducasse and Colin Putney and Roel Wuyts},
  title = {Meta-driven browsers},
  journal = {Lecture notes in computer science},
  year = {2007},
  volume = {4406},
  pages = {134--156},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-71836-9.pdf#page=141}
}

@INCOLLECTION{Bergel2003,
author = {Alexandre Bergel and St Ducasse and Roel Wuyts},
  title = {Classboxes: A Minimal Module Model Supporting Local Rebinding},
  booktitle = {Lecture {Notes} in {Computer} {Science}},
  publisher = {Springer Berlin Heidelberg},
  year = {2003},
  volume = {2789},
  number = {2789},
  pages = {122--131},
  __markedentry = {[C5187727:6]},
  abstract = {Classical module systems support well the modular development of applications
	but do not offer the ability to add or replace a method in a class
	that is not defined in that module. On the other hand, languages
	that support method addition and replacement do not provide a modular
	view of applications, and their changes have a global impact. The
	result is a gap between module systems for object-oriented languages
	on one hand, and the very desirable feature of method addition and
	replacement on the other hand. To solve these problems we present
	classboxes, a module system for object-oriented languages that provides
	method addition and replacement. Moreover, the changes made by a
	classbox are only visible to that classbox (or classboxes that import
	it), a feature we call local rebinding. To validate the model, we
	have implemented it in the Squeak Smalltalk environment, and performed
	experiments modularising code.},
  issn = {978-3-540-40796-6},
  journal = {Proceedings of Joint Modular Languages Conference JMLC03},
  keywords = {Compilers, Interpreters, Logics and Meanings of Programs, Operating
	Systems, Programming Languages, Programming Techniques, class ex,
	language design, method lookup, modules, selector namespace, smalltalk,
	software engineering, tension},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Berg03aClassboxes.pdf}
}

@INPROCEEDINGS{Bergel2006a,
author = {Alexandre Bergel and Robert Hirschfeld and Siobh Clarke and Pascal Costanza},
  title = {Aspectboxes --- Controlling the Visibility of Aspects},
  booktitle = {In Proceedings of the International Conference on Software and Data
	Technologies (ICSOFT 2006)},
  year = {2006},
  pages = {29--38},
  __markedentry = {[C5187727:6]},
  abstract = {Aspect composition is still a hot research topic\nwhere there is no
	consensus on how to express where\nand when aspects have to be composed
	into a base\nsystem. In this paper we present a modular construct\nfor
	aspects, called aspectboxes, that enables\naspects application to
	be limited to a well defined\nscope. An aspectbox encapsulates class
	and aspect\ndefinitions. Classes can be imported into an\naspectbox
	defining a base system to which aspects\nmay then be applied. Refinements
	and instrumentation\ndefined by an aspect are visible only within
	this\nparticular aspectbox leaving other parts of the\nsystem unaffected.},
  issn = {972-8865-69-4},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.cs.tcd.ie/Alexandre.Bergel/download/papers/Berg06c-Aspectboxes.pdf}
}

@INCOLLECTION{Bergel2011,
author = {Alexandre Bergel and Oscar Nierstrasz and Lukas Renggli and Jorge Ressia},
  title = {Domain-specific profiling},
  publisher = {Springer},
  year = {2011},
  pages = {68--82},
  __markedentry = {[C5187727:6]},
  journal = {Objects, Models, Components, Patterns},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-21952-8_7}
}

@INPROCEEDINGS{Bergel2003a,
author = {Alexandre Bergel and Ducasse Stephane and Wuyts Roel},
  title = {The Classbox Module System},
  booktitle = {Ukpmc.Ac.Uk},
  year = {2003},
  volume = {3},
  pages = {1--10},
  address = {Darmstadt, Germany},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  abstract = {Classical module systems support well the modular development of applications
	but do not offer the ability to add or replace a method in a class
	that is not defined in that module. On the other hand, languages
	that support method addition and replacement do not provide a modular
	view of applications, and their changes have a global impact. The
	result is a gap between module systems for object-oriented languages
	on one hand, and the very desirable feature of method addition and
	replacement on the other hand. To solve these problems we present
	classboxes, a module system for object-oriented languages that provides
	method addition and replacement. Moreover, the changes made by a
	classbox are only visible to that classbox (or classboxes that import
	it), a feature we call local rebinding. To validate the model, we
	have implemented it in the Squeak Smalltalk environment, and performed
	experiments modularising code.},
  keywords = {class ex-, language design, method lookup, modules, selector namespace,
	smalltalk, tension},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ukpmc.ac.uk/abstract/CIT/631162}
}

@INPROCEEDINGS{Black2004,
author = {N Scharli},
  title = {Traits: tools and methodology},
  booktitle = {Proceedings. 26th International Conference on Software Engineering},
  year = {2004},
  pages = {676--686},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {Traits are an object-oriented programming language construct that
	allow groups of methods to be named and reused in arbitrary places
	in an inheritance hierarchy. Classes can use methods from traits
	as well as defining their own methods and instance variables. Traits
	thus enable a new style of programming, in which traits rather than
	classes are the primary unit of reuse. However, the additional sub-structure
	provided by traits is always optional: a class written using traits
	can also be viewed as a flat collection of methods, with no change
	in its semantics. This paper describes the tool that supports these
	two alternate views of a class, called the traits browser, and the
	programming methodology that we are starting to develop around the
	use of traits.},
  issn = {0-7695-2163-0},
  keywords = {Squeak},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=999471}
}

@INPROCEEDINGS{Bolz2008,
author = {Carl Friedrich Bolz and Adrian Kuhn and Adrian Lienhard and Nicholas D Matsakis and Oscar Nierstrasz and Lukas Renggli and Armin Rigo and Toon Verwaest},
  title = {Back to the future in one week - Implementing a smalltalk VM in PyPy},
  booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes
	in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year = {2008},
  volume = {5146 LNCS},
  pages = {123--139},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  abstract = {We report on our experiences with the Spy project, including implementation
	details and benchmark results. Spy is a re-implementation of the
	Squeak (i.e., Smalltalk-80) VM using the PyPy toolchain. The PyPy
	project allows code written in RPython, a subset of Python, to be
	translated to a multitude of different backends and architectures.
	During the translation, many aspects of the implementation can be
	independently tuned, such as the garbage collection algorithm or
	threading implementation. In this way, a whole host of interpreters
	can be derived from one abstract interpreter definition. Spy aims
	to bring these benefits to Squeak, allowing for greater portability
	and, eventually, improved performance. The current Spy codebase is
	able to run a small set of benchmarks that demonstrate performance
	superior to many similar Smalltalk VMs, but which still run slower
	than in Squeak itself. Spy was built from scratch over the course
	of a week during a joint Squeak-PyPy Sprint in Bern last autumn.},
  issn = {3540892745},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-89275-5.pdf#page=130}
}

@ARTICLE{Brichau2008,
author = {Johan Brichau and Andy Kellens and Kris Gybels and Kim Mens and Robert Hirschfeld and Theo Hondt},
  title = {Application-specific models and pointcuts using a logic metalanguage},
  journal = {Computer Languages, Systems and Structures},
  year = {2008},
  volume = {34},
  pages = {66--82},
  number = {2-3},
  __markedentry = {[C5187727:6]},
  abstract = {In contemporary aspect-oriented languages, pointcuts are usually specified
	directly in terms of the structure of the source code. The definition
	of such low-level pointcuts requires aspect developers to have a
	profound understanding of the entire application's implementation
	and often leads to complex, fragile and hard-to-maintain pointcut
	definitions. To resolve these issues, we present an aspect-oriented
	programming system that features a logic-based pointcut language
	that is open such that it can be extended with application-specific
	pointcut predicates. These predicates define an application-specific
	model that serves as a contract that base program developers provide
	and aspect developers can depend upon. As a result, pointcuts can
	be specified in terms of this more high-level model of the application
	which confines all intricate implementation details that are otherwise
	exposed in the pointcut definitions themselves. ?? 2007 Elsevier
	Ltd. All rights reserved.},
  issn = {9783540718352},
  keywords = {Aspect-oriented programming, Logic metaprogramming, Pointcut languages},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Brichau2008a,
author = {Johan Brichau and Andy Kellens and Kris Gybels and Kim Mens and Robert Hirschfeld and Theo Hondt},
  title = {Application-specific models and pointcuts using a logic metalanguage},
  booktitle = {Computer Languages, Systems and Structures},
  year = {2008},
  volume = {34},
  pages = {66--82},
  __markedentry = {[C5187727:6]},
  abstract = {In contemporary aspect-oriented languages, pointcuts are usually specified
	directly in terms of the structure of the source code. The definition
	of such low-level pointcuts requires aspect developers to have a
	profound understanding of the entire application's implementation
	and often leads to complex, fragile and hard-to-maintain pointcut
	definitions. To resolve these issues, we present an aspect-oriented
	programming system that features a logic-based pointcut language
	that is open such that it can be extended with application-specific
	pointcut predicates. These predicates define an application-specific
	model that serves as a contract that base program developers provide
	and aspect developers can depend upon. As a result, pointcuts can
	be specified in terms of this more high-level model of the application
	which confines all intricate implementation details that are otherwise
	exposed in the pointcut definitions themselves. ?? 2007 Elsevier
	Ltd. All rights reserved.},
  issn = {9783540718352},
  keywords = {Aspect-oriented programming, Logic metaprogramming, Pointcut languages},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{CallaAº2011,
author = {Romain Robbes and David thlisberger},
  title = {How developers use the dynamic features of programming languages},
  booktitle = {Proceeding of the 8th working conference on Mining software repositories
	- MSR '11},
  year = {2011},
  pages = {23--23},
  __markedentry = {[C5187727:6]},
  abstract = {The dynamic and reflective features of programming languages are powerful
	constructs that programmers often mention as extremely useful. However,
	the ability to modify a program at runtime can be both a boon-in
	terms of flexibility-, and a curse-in terms of tool support. For
	instance, usage of these features hampers the design of type systems,
	the accuracy of static analysis techniques, or the introduction of
	optimizations by compilers. In this paper, we perform an empirical
	study of a large Smalltalk codebase- often regarded as the poster-child
	in terms of availability of these features-, in order to assess how
	much these features are actually used in practice, whether some are
	used more than others, and in which kinds of projects. These results
	are useful to make informed decisions about which features to consider
	when designing language extensions or tool support.},
  issn = {9781450305747},
  keywords = {dynamic languages, smalltalk, static analysis},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1985441.1985448}
}

@INPROCEEDINGS{Costanza2005,
author = {Pascal Costanza and Robert Hirschfeld},
  title = {Language constructs for context-oriented programming},
  booktitle = {Proceedings of the 2005 conference on Dynamic languages symposium
	- DLS '05},
  year = {2005},
  pages = {1--10},
  __markedentry = {[C5187727:6]},
  abstract = {ContextL is an extension to the Common Lisp Object System that allows
	for Context-oriented Programming. It provides means to associate
	partial class and method definitions with layers and to activate
	and deactivate such layers in the control flow of a running program.
	When a layer is activated, the partial definitions become part of
	the program until this layer is deactivated. This has the effect
	that the behavior of a program can be modified according to the context
	of its use without the need to mention such context dependencies
	in the affected base program. We illustrate these ideas by providing
	different UI views on the same object while, at the same time, keeping
	the conceptual simplicity of object-oriented programming that objects
	know by themselves how to behave, in our case how to display themselves.
	These seemingly contradictory goals can be achieved by separating
	class definitions into distinct layers instead of factoring out the
	display code into different classes.},
  issn = {1595932836},
  keywords = {context-oriented programming, dynamic scope, layers, views},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://portal.acm.org/citation.cfm?doid=1146841.1146842}
}

@INPROCEEDINGS{Dara-Abrams2005,
author = {Benay Abrams},
  title = {Reaching adult learners through the Entry Point Framework and Problem-based
	Learning in a Croquet-based virtual environment},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {119--126},
  __markedentry = {[C5187727:6]},
  abstract = {Adult learners with varying needs, backgrounds, skills, experiences,
	and ways of learning place increasing demands on higher education
	to provide learning experiences that are accessible, applicable,
	and relevant to their own individual needs. At the same time, demands
	of the workplace require the development of competencies and the
	ability to not only understand but also to communicate, apply, and
	act on newly acquired knowledge, often through cooperative team work.
	Though adult learners may approach higher education with apprehension,
	they are increasingly comfortable with technology. In this paper,
	we discuss how the entry point framework and problem-based learning
	can be implemented in a Croquet-based virtual environment to support
	adult learners with varying profiles of intellectual strengths.},
  issn = {0769523250},
  keywords = {Buildings, Collaborative work, Croquet-based virtual environment,
	Educational institutions, Educational technology, Employment, Explosions,
	Fires, Joining processes, Virtual environment, adult learners, computer
	aided instruction, cooperative team work, education, entry point
	framework, further education, groupware, higher education, intellectual
	strengths, problem-based learning, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Deck2004,
author = {Diego G Deck and Jos Rodriguez},
  title = {Squeak in Spain as part of the LinEx project},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {160--165},
  __markedentry = {[C5187727:6]},
  abstract = {Extremadura regional government has started to use Squeak within the
	LinEx project. Cooperation from the group Small-Land, devoted to
	spread the use of Squeak in the Spanish-speaking community all over
	the world, has allowed us to install Squeak in all secondary education
	classrooms.},
  issn = {0769521665},
  keywords = {Application software, Collaborative work, Computer science education,
	Educational institutions, Educational technology, Electric shock,
	Extremadura regional government, Government, Internet, Joining processes,
	LinEx project, Small-Land, Spain, Spanish-speaking community, Squeak,
	computer aided instruction, computer graphics, multimedia computing,
	secondary education classrooms, smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Denker2007a,
author = {Marcus Denker and St Ducasse},
  title = {Software Evolution from the Field},
  journal = {Electronic Notes in Theoretical Computer Science},
  year = {2007},
  volume = {166},
  pages = {81--91},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1571066106005305}
}

@ARTICLE{Denker2006a,
author = {Marcus Denker and St Ducasse},
  title = {Runtime bytecode transformation for Smalltalk},
  journal = {Computer Languages, Systems and Structures},
  year = {2006},
  volume = {32},
  pages = {125--139},
  number = {2-3},
  __markedentry = {[C5187727:6]},
  abstract = {Transforming programs to alter their semantics is of wide interest,
	for purposes as diverse as off-the-shelf component adaptation, optimization,
	trace generation, and experimentation with new language features.
	The current wave of interest in advanced technologies for better
	separation of concerns, such as aspect-oriented programming, is a
	solid testimony of this fact. Strangely enough, almost all proposals
	are formulated in the context of Java, in which tool providers encounter
	severe restrictions due to the rigidity of the environment. This
	paper presents BYTESURGEON, a library to transform binary code in
	Smalltalk. BYTESURGEON takes full advantage of the flexibility of
	the Squeak environment to enable bytecode transformation at runtime,
	thereby allowing dynamic, on-the-fly modification of applications.
	BYTESURGEON operates on bytecode in order to cope with situations
	where the source code is not available, while providing appropriate
	high-level abstractions so that users do not need to program at the
	bytecode level. We illustrate the use of BYTESURGEON via the implementation
	of method wrappers and a simple MOP, and report on its efficiency.
	Â© 2005 Elsevier Ltd. All rights reserved.},
  keywords = {Bytecode transformation, Metaprogramming, Object-oriented programming,
	Smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842405000436}
}

@INPROCEEDINGS{Denker2007,
author = {Marcus Denker and T rba and Adrian Lienhard and Oscar Nierstrasz and Lukas Renggli and Pascal Zumkehr},
  title = {Encapsulating and exploiting change with changeboxes},
  booktitle = {ACM International Conference Proceeding Series},
  year = {2007},
  number = {286},
  pages = {25--49},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {Real world software systems change continuously to meet new demands.
	Most programming languages and development environments, however,
	are more concerned with limiting the effects of change rather than
	enabling and exploiting change. Various techniques and technologies
	to exploit change have been developed over the years, but there exists
	no common support for these approaches. We propose Changeboxes as
	a general-purpose mechanism for encapsulating change as a first-class
	entity in a running software system. Changeboxes support multiple,
	concurrent and possibly inconsistent views of software artifacts
	within the same running system. Since Changeboxes are first-class,
	they can be manipulated to control the scope of change in a running
	system. Furthermore, Changeboxes capture the semantics of change.
	Changeboxes can be used, for example, to encapsulate refactorings,
	or to replay or analyze the history of changes. In this paper we
	introduce Changeboxes by means of a prototype implementation. We
	illustrate the benefits that Changeboxes offer for evolving software
	systems, and we present the results of a preliminary performance
	evaluation that assesses the costs associated with Changeboxes while
	suggesting possible strategies for improvement.},
  issn = {9781605580845},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://portal.acm.org/citation.cfm?id=1352681}
}

@INPROCEEDINGS{Denker2006,
author = {Marcus Denker and Orla Greevy and Michele Lanza},
  title = {Higher Abstractions for Dynamic Analysis},
  booktitle = {2nd International Workshop on Program Comprehension through Dynamic
	Analysis (PCODA 2006)},
  year = {2006},
  pages = {32--38},
  publisher = {Universiteit Antwerpen},
  __markedentry = {[C5187727:6]},
  abstract = {The developers of tools for dynamic analysis are\nfaced with choosing
	from the many approaches to\ngathering runtime data. Typically, dynamic
	analysis\ninvolves instrumenting the program under\ninvestigation
	to record its runtime behavior.\nCurrent approaches for byte-code
	based systems like\nJava and Smalltalk rely often on inserting byte-code\ninto
	the program under analysis. However, detailed\nknowledge of the target
	programming language or\nvirtual machine is required to implement
	dynamic\nanalysis tools. Obtaining and exploiting this\nknowledge
	to build better analysis tools is\ncumbersome and often distracts
	the tool builder from\nthe actual goal, which is the analysis of
	the\nruntime behavior of a system. In this paper, we\nargue that
	we need to adopt a higher level view of a\nsoftware system when considering
	the task of\nabstracting runtime information. We focus on\nobject-oriented
	virtual machine based languages. We\nwant to be able to deal with
	the runtime system as a\ncollection of reified first-class entities.
	We\npropose to achieve this by introducing a layer of\nabstraction,
	i.e., a behavioral middle layer. This\nhas the advantage that the
	task of collecting\ndynamic information is not concerned with low
	level\ndetails of a specific language or virtual machine.\nThe positive
	effect of such a behavioral middle\nlayer is twofold: on the one
	hand it provides us\nwith a standard API for all dynamic analysis
	based\ntools to use, on the other hand it allows the tool\ndeveloper
	to abstract from the actual implementation\ntechnique.},
  keywords = {scg-pub skip-doi snf07 jb07 fb06 reflectivity},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Denk06cHigherAbstractionsPCODA06.pdf\nhttp://www.lore.ua.ac.be/Events/PCODA2006/index.html}
}

@INPROCEEDINGS{Denker2007b,
author = {Marcus Denker and Orla Greevy and Oscar Nierstrasz},
  title = {Supporting Feature Analysis with Runtime Annotations},
  booktitle = {Proceedings of the 3rd International Workshop on Program Comprehension
	through Dynamic Analysis (PCODA 2007)},
  year = {2007},
  pages = {29--33},
  publisher = {Technische Universiteit Delft},
  __markedentry = {[C5187727:6]},
  abstract = {The dynamic analysis approach to feature\nidentification describes
	a technique for capturing\nfeature behavior and mapping it to source
	code.\nMajor drawbacks of this approach are (1) large\namounts of
	data and (2) lack of support for\nsub-method elements. In this paper
	we propose to\nleverage sub-method reflection to identify and model\nfeatures.
	We perform an on-the-fly analysis\nresulting in annotating the operations
	participating\nin a feature's behavior with meta-data.The primary\nadvantage
	of our annotation approach is that we\nobtain a fine-grained level
	of granularity while at\nthe same time eliminating the need to retain
	and\nanalyze large traces for feature analysis.},
  keywords = {scg07 scg-pub skip-doi snf08 jb08 reflectivity},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Denk07dFeatureAnnotationPCODA.pdf\nhttp://swerl.tudelft.nl/bin/view/Main/PCODA2007}
}

@INCOLLECTION{Denker2008,
author = {Marcus Denker and Mathieu Suen and St Ducasse},
  title = {The Meta in Meta-object Architectures},
  publisher = {Springer},
  year = {2008},
  volume = {11},
  pages = {218--237},
  __markedentry = {[C5187727:6]},
  abstract = {Behavioral reflection is crucial to support for example functional
	upgrades, on-the-fly debugging, or monitoring critical applications.
	However the use of reflective features can lead to severe problems
	due to infinite metacall recursion even in simple cases. This is
	especially a problem when reflecting on core language features since
	there is a high chance that such features are used to implement the
	reflective behavior itself. In this paper we analyze the problem
	of infinite meta-object call recursion and solve it by providing
	a first class representation of meta-level execution: at any point
	in the execution of a system it can be determined if we are operating
	on a meta-level or base level so that we can prevent infinite recursion.
	We present how meta-level execution can be represented by a meta-context
	and how reflection becomes context-aware. Our solution makes it possible
	to freely apply behavioral reflection even on system classes: the
	meta-context brings stability to behavioral reflection. We validate
	the concept with a robust implementation and we present benchmarks.},
  issn = {9783540698241},
  journal = {Tools Europe 2008},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.iam.unibe.ch/~scg/Archive/Papers/Denk08bMetaContextLNBIP.pdf}
}

@INPROCEEDINGS{Ducasse2000a,
author = {St Ducasse and Serge Demeyer and Oscar Nierstrasz},
  title = {Tie Code And Questions: a Reengineering Pattern},
  booktitle = {Proceedings of the 5th European Conference on Pattern Languages of
	Programms},
  year = {2000},
  pages = {209--218},
  address = {Irsee, Germany},
  publisher = {UniversitÃ¤tsverlag Konstanz},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://hillside.net/europlop/HillsideEurope/Papers/EuroPLoP2000/2000_DucasseEtAl_TieCodeAndQuestions.pdf}
}

@ARTICLE{Ducasse2005c,
author = {St Ducasse and Michele Lanza},
  title = {The class blueprint: Visually supporting the understanding of classes},
  journal = {IEEE Transactions on Software Engineering},
  year = {2005},
  volume = {31},
  pages = {75--90},
  number = {1},
  __markedentry = {[C5187727:6]},
  abstract = {Understanding source code is an important task in the maintenance
	of software systems. Legacy systems are not only limited to procedural
	languages, but are also written in object-oriented languages. In
	such a context, understanding classes is a key activity as they are
	the cornerstone of the object-oriented paradigm and the primary abstraction
	from which applications are built. Such an understanding is however
	difficult to obtain because of reasons such as the presence of late
	binding and inheritance. A first level of class understanding consists
	of the understanding of its overall structure, the control flow among
	its methods, and the accesses on its attributes. We propose a novel
	visualization of classes called class blueprint that is based on
	a semantically enriched visualization of the internal structure of
	classes. This visualization allows a software engineer to build a
	first mental model of a class that he validates via opportunistic
	code-reading. Furthermore, we have identified visual patterns that
	represent recurrent situations and as such convey additional, information
	to the viewer. The contributions of this article are the class blueprint,
	a novel visualization of the internal structure of classes, the identification
	of visual patterns, and the definition of a vocabulary based on these
	visual patterns. We have performed several case studies of which
	one is presented in depth, and validated the usefulness of the approach
	in a controlled experiment.},
  keywords = {Object-oriented programming, Reverse engineering, Smalltalk, Software
	visualization, Visual patterns},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1392721}
}

@INPROCEEDINGS{Ducasse2005,
author = {St Ducasse and Michele Lanza and Laura Ponisio},
  title = {Butterflies: A visual approach to characterize packages},
  booktitle = {Proceedings - International Software Metrics Symposium},
  year = {2005},
  volume = {2005},
  pages = {45--54},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {Understanding sets of classes, or packages, is an important activity
	in the development and reengineering of large object-oriented systems.
	Packages represent the coarse grained structure of an application.
	They are artefacts to deploy and structure software, and therefore
	more than a simple generalization of classes. The relationships between
	packages and their contained classes are key in the decomposition
	of an application and its (re)-modularisation. However, it is difficult
	to quickly grasp the structure of a package and to understand how
	a package interacts with the rest of the system. We tackle this problem
	using butterfly visualizations, i.e., dedicated radar charts built
	from simple package metrics based on a language-independent meta-model.
	We illustrate our approach on two applications and show how we can
	retrieve the relevant characteristics of packages},
  issn = {0769523714},
  keywords = {Package metrics, Program understanding, Reverse engineering, Software
	visualization},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1509285}
}

@INPROCEEDINGS{Ducasse2004,
author = {St Ducasse and Adrian Lienhard and Lukas Renggli},
  title = {Seaside --- a Multiple Control Flow Web Application Framework},
  booktitle = {Proceedings of 12th International Smalltalk Conference (ISC'04)},
  year = {2004},
  pages = {231--257},
  __markedentry = {[C5187727:6]},
  abstract = {Developing web applications is difficult since (1)\nthe client-server
	relationship is asymmetric: the\nserver cannot update clients but
	only responds to\nclient requests and (2) the navigation facilities
	of\nweb browsers lead to a situation where servers\ncannot control
	the state of the clients.\nPage-centric web application frameworks
	fail to\noffer adequate solutions to model control flow at a\nhigh-level
	of abstraction. Developers have to work\nmanually around the shortcomings
	of the HTTP\nprotocol. Some approaches offer better abstractions\nby
	composing an application out of components,\nhowever they still fail
	to offer modeling control\nflow at a high level. Continuation-based
	approaches\nsolve this problem by providing the facilities to\nmodel
	a control flow over several pages with one\npiece of code. However
	combining multiple flows\ninside the same page is difficult. This
	article\npresents Seaside. Seaside is a framework which\ncombines
	an object-oriented approach with a\ncontinuation-based one. A Seaside
	application is\nbuilt out of components (i.e., objects) and the\nlogic
	of the application benefits from the\ncontinuation-based program
	flow infrastructure.\nSeaside offers a unique way to have multiple
	control\nflows on a page, one for each component. This\nenables the
	developer to write components that are\nhighly reusable and that
	can be used to compose\ncomplex web applications with higher quality
	in less\ntime.},
  keywords = {scg-pub skip-doi jb05 snf05 stefPub seaside-articl},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Duca04eSeaside.pdf\nhttp://www.iam.unibe.ch/publikationen/techreports/2004/iam-04-008}
}

@INPROCEEDINGS{Ducasse2000,
author = {St Ducasse and Oscar Nierstrasz and Serge Demeyer},
  title = {Transform Conditionals to Polymorphism},
  booktitle = {Proceedings of the 5th European Conference on Pattern Languages of
	Programms},
  year = {2000},
  pages = {219--252},
  address = {Irsee, Germany},
  publisher = {UniversitÃ¤tsverlag Konstanz},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://hillside.net/europlop/HillsideEurope/Papers/EuroPLoP2000/2000_DucasseEtAl_TransformConditionals.pdf}
}

@ARTICLE{Ducasse2006,
author = {St Ducasse and Oscar Nierstrasz and Nathaniel rli and Roel Wuyts and Andrew P Black},
  title = {Traits: A mechanism for fine-grained reuse},
  journal = {ACM Transactions on Programming Languages and Systems},
  year = {2006},
  volume = {28},
  pages = {331--338},
  number = {2},
  __markedentry = {[C5187727:6]},
  abstract = {Inheritance is well-known and accepted as a mechanism for reuse in
	object-oriented languages. Unfortunately, due to the coarse granularity
	of inheritance, it may be difficult to decompose an application into
	an optimal class hierarchy that maximizes software reuse. Existing
	schemes based on single inheritance, multiple inheritance, or mixins,
	all pose numerous problems for reuse. To overcome these problems
	we propose traits, pure units of reuse consisting only of methods.
	We develop a formal model of traits that establishes how traits can
	be composed, either to form other traits, or to form classes. We
	also outline an experimental validation in which we apply traits
	to refactor a non-trivial application into composable units.},
  keywords = {inheritance, languages, mixins, multiple inheritance, reuse, smalltalk,
	traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1119483}
}

@INPROCEEDINGS{Ducasse2005b,
author = {St Ducasse and Lukas Renggli and Roel Wuyts},
  title = {SmallWiki --- A Meta-Described Collaborative Content Management System},
  booktitle = {Proceedings ACM International Symposium on Wikis (WikiSym'05)},
  year = {2005},
  pages = {75--82},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {Wikis are often implemented using string-based\napproaches to parse
	and generate their pages. While\nsuch approaches work well for simple
	wikis, they\nhamper the customization and adaptability of wikis\nto
	the variety of end-users when more sophisticated\nneeds are required
	(i.e., different output formats,\nuser-interfaces, wiki managment,
	security policies,\n...). In this paper we present SmallWiki, the
	second\nversion of a fully object-oriented implementation of\na wiki.
	SmallWiki is implemented with objects from\nthe top to the bottom
	and it can be customized\neasily to accommodate new needs. In addition,\nSmallWiki
	is based on a powerful meta-description\ncalled Magritte that allows
	one to create\nuser-interface elements declaratively.},
  issn = {1595931112},
  keywords = {jb06 scg-pub snf-none stefPub moose-pub},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Duca05hSmallwikiWikiSymp05.pdf}
}

@ARTICLE{Ducasse2005a,
author = {St Ducasse and Nathanael rli and Roel Wuyts},
  title = {Uniform and safe metaclass composition},
  journal = {Computer Languages, Systems and Structures},
  year = {2005},
  volume = {31},
  pages = {143--164},
  number = {3-4},
  __markedentry = {[C5187727:6]},
  abstract = {In pure object-oriented languages, classes are objects, instances
	of other classes called metaclasses. In the same way as classes define
	the properties of their instances, metaclasses define the properties
	of classes. It is therefore very natural to wish to reuse class properties,
	utilizing them amongst several classes. However this introduced metaclass
	composition problems, i.e., code fragments applied to one class may
	break when used on another class due to the inheritance relationship
	between their respective metaclasses. Numerous approaches have tried
	to solve metaclass composition problems, but they always resort to
	an ad-hoc manner of handling conflicting properties, alienating the
	meta-programmer. We propose a uniform approach that represents class
	properties as traits, groups of methods that act as a unit of reuse
	from which classes are composed. Like all the other classes in the
	system, metaclasses are composed out of traits. This solution supports
	the reuse of class properties, and their safe and automatic composition
	based on explicit conflict resolution. The paper discusses traits
	and our solution, shows concrete examples implemented in the Smalltalk
	environment Squeak, and compares our approach with existing models
	for composing class properties. Â© 2005 Elsevier Ltd. All rights
	reserved.},
  keywords = {Metaclass composition, Mixins, Reflective kernel, Reuse, Traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.iam.unibe.ch/~ducasse/Web/Demoes/ESUG2004Proceedings.pdf#page=160}
}

@INPROCEEDINGS{Ducasse2003,
author = {St Ducasse and Nathanael rli and Roel Wuyts},
  title = {Open Surfaces for Controlled Visibility},
  booktitle = {Proceedings of the ECOOP '03 Workshop on Object-oriented Language
	Engineering for the Post-Java Era},
  year = {2003},
  volume = {3},
  pages = {--},
  address = {Darmstadt, Germany},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  abstract = {Current languages contain visibility mechanisms such\nas private,
	protected, or public to control who can\nsee what. However, these
	visibility mechanisms are\nfixed once for all. Moreover, they do
	not solve all\nproblems related to the visibility, and are\ntypically
	of a static nature. In this position paper\nwe present an open and
	uniform way of dealing with\nvisibility and introduce surfaces: i.e.,
	list of\nmethods that control the way the behavior of an ob\nject
	is accessible. We introduce two problems that\nother visibility mechanisms
	cannot solve, and show\nhow surfaces can.},
  keywords = {snf03 scg-pub skip-doi jb03 stefPub schaerli},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Duca03bSurfaces.pdf}
}

@ARTICLE{Ducasse2002,
author = {St Ducasse and Roel Wuyts},
  title = {Supporting Objects as An Anthropomorphic View at Computation or Why
	Smalltalk for Teaching Objects?},
  year = {2002},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Engelhard2009,
author = {Philipp Engelhard and Robert Hirschfeld and Jens Lincke},
  title = {Pitsupai - Collaborative scripting in a distributed, persistent 3D
	world},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {87--94},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper we present an authoring tool and an accompanying workflow
	to create interactive scenarios in a distributed 3D environment by
	multiple users. With Pitsupai we designed an environment that allows
	to create collaboratively simple games or game prototypes with a
	minimal effort, without the need to be a professional game developer.
	To facilitate collaborative work, our authoring tool uses a scripting
	language for easy programming and animation in the virtual world
	and provides awareness aspects - information regarding the whereabouts
	and current activities of the other participants. Scripts can be
	edited from within the running virtual world without the need for
	stopping or restarting it.},
  issn = {9780769536200},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ersavas2003,
author = {T Ersavas},
  title = {Collaborative end-user computing with snowball},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {22--22},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {Snowball is a visual tool that helps analyze, visualize and visually
	manipulate hierarchical structures in Squeak. Beyond its original
	aim of assisting developers to implement systems quicker, recent
	additions to Snowball can make it a viable collaborative tool for
	end-users as well. This paper focuses on innovations of Snowball
	that aim to make it an easy to use computational tool for end-users
	of various backgrounds. End-user computing is done via visual computation
	trees, which can be linked across the Internet.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ersavas2003a,
author = {T Ersavas},
  title = {Expanding the envelope of the object oriented approach},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {60--67},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper we will discuss a new approach to modeling information
	systems, namely Fuzzy Object and Behavior Modeling (FOBM) technique.
	FOBM is a fusion of the object-oriented approach with soft computing
	techniques. It is especially useful for dealing with increased complexity
	and noisy, incomplete and vague environments and mainly target areas
	such as 3D animation, robotics and intelligent autonomous agents.
	FOBM introduces many new concepts and integrates and enhances some
	existing ones. Concepts highlighted in this paper include message
	and event broadcasting, weighing and attenuation, continuous messages
	with emitters and sensors, degrees of membership, presence and relationships,
	continuously variable objects, and tolerant environments. Some of
	these concepts are demonstrated using a simple FOBM framework implemented
	in Squeak.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Felgentreffa,
author = {Tim Felgentreff and Alan Borning and Robert Hirschfeld},
  title = {Babelsberg : Specifying and Solving Constraints on Object Behavior},
  number = {818},
  pages = {--},
  __markedentry = {[C5187727:6]},
  issn = {9783869562650},
  keywords = {Cons, Constraints, Object Constraint Programming},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Felgentreffc,
author = {Tim Felgentreff and Todd Millstein and Alan Borning},
  title = {Developing a formal semantics for Babelsberg: A step-by-step approach},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Felgentreff,
author = {Tim Felgentreff and Tobias Pape and Lars Wassermann and Robert Hirschfeld and Carl Friedrich Bolz},
  title = {Towards Reducing the Need for Algorithmic Primitives in Dynamic Language
	VMs Through a Tracing JIT},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Felgentreffb,
author = {Tim Felgentreff and Michael Perscheid and Robert Hirschfeld},
  title = {Constraining Timing-dependent Communication for Debugging Non-deterministic
	Failures},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Fernandes2008,
author = {Hilaire Fernandes and Thibault Carron and St Ducasse},
  title = {ISTOA: Artefacts for mathematical interactive learning exercises},
  booktitle = {Proceedings - 6th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2008},
  year = {2008},
  pages = {65--72},
  __markedentry = {[C5187727:6]},
  abstract = {In primary schools, mathematics teachers use support tools to introduce
	new concepts. The objective of these tools is to reinforce a mental
	representation of the newly introduced concept. Tools can be physical
	objects or paper- pen based. We call these tools artefacts. In computer
	assisted environments, such artefacts are not always clearly present,
	those environments focus on the nature of the exercises (drills,
	quiz). To realise environments in closer relation to classroom teaching,
	we propose to analyse and categorise such artefacts: we used pedagogical
	literature and we extracted artefacts used in teaching multiplication.
	We present our infrastructure and a list of artefacts in the multiplication
	realm.},
  issn = {0769531156},
  keywords = {Collaborative tools, Computer science, Educational institutions, Instruments,
	International collaboration, Joining processes, Learning systems,
	Mathematics, artefact, authoring systems, classroom teaching, computer
	aided instruction, computer assisted environments, education, iStoa
	environment, interactive systems, learning environment, mathematical
	interactive learning exercises, mathematics computing, multiplication,
	multiplication teaching, pedagogical literature, primary schools,
	teaching},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Freudenberg,
author = {Bert Freudenberg and Dan Ingalls and Tim Felgentreff and Tobias Pape and Robert Hirschfeld},
  title = {SqueakJS - A Modern and Practical Smalltalk That Runs in Any Browser},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Freudenberg2009,
author = {Bert Freudenberg and Yoshiki Ohshima and Scott Wallace},
  title = {Etoys for one laptop per child},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {57--64},
  __markedentry = {[C5187727:6]},
  abstract = {We present an overview of the Â¿OLPC EtoysÂ¿ system, describe the
	intensive two-year development effort that produced the system, and
	discuss lessons learned. OLPC Etoys is an end-user authoring system
	for children, which was chosen to be distributed with the OLPC XO
	laptops at an early stage of the OLPC project. Since we planned to
	derive OLPC Etoys by evolving an existing, mature system (Â¿SqueaklandÂ¿),
	it was expected to be a relatively straightforward undertaking. However,
	the OLPC XO platform's special hardware characteristics, the evolution
	of the Sugar software stack, and the fundamentally international
	and multilingual nature of the project, all conspired to make the
	development effort challenging. Over the two-year course of the project,
	we successfully kept up with the challenges, and delivered usable
	Etoys systems for every OLPC release. We steadily improved the UI,
	added a few high-leverage features, and fixed bugs, with a small
	and widely-distributed team and with help from the community.},
  issn = {9780769536200},
  keywords = {Collaborative learning, Computer bugs, EToys, Hardware, History, Home
	computing, International collaboration, Joining processes, OLPC,
	OLPC Etoys, OLPC XO laptop, OLPC project, Physics computing, Squeak,
	Sugar software stack, Uncertainty, authoring systems, computer literacy,
	courseware, education, end-user authoring system, portable computers,
	program debugging, system bugs},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Fujioka2004,
author = {Takeshi Fujioka and Hiroki Karuno and Yahiko Kambayashi},
  title = {Practices of information education with Squeak toward the secure
	improvement of 'academic ability'},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {130--137},
  __markedentry = {[C5187727:6]},
  abstract = {This work describes a curriculum of information education using Squeak
	at Horikawa High School, which is specified as "Super Science High
	School (SSH)" where teachers try innovative teaching methods to stimulate
	students' interests in science. This curriculum aims to achieve the
	objectives of a subject "information study" specified by the Ministry
	of Education, Culture, Sports, Science and Technology. We consider
	that Squeak can provide powerful environments where students can
	think and try confirming the results visually, and the environments
	are ideal for them to learn how to design and evaluate graphical
	user interface. We introduce the first effort to create a curriculum
	for a subject "basic inquiry" in SSH.},
  issn = {0769521665},
  keywords = {Communication networks, Computer networks, Computer science education,
	Councils, Educational institutions, GUI design, GUI evaluation, Horikawa
	High School, Informatics, Information science, International collaboration,
	Joining processes, Particle measurements, Societies, Squeak, Super
	Science High School, academic ability, computer aided instruction,
	education, graphical user interface, graphical user interfaces, information
	education curriculum, multimedia computing, science, smalltalk, student
	interests, teaching, teaching method innovation, user interface management
	systems},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Fujioka2006,
author = {Takeshi Fujioka and Hideyuki Takada and Hajime Kita},
  title = {What does squeak provide students with? - A comparative study of
	squeak eToy and excel VBA as tools for problem-solving learning in
	high school},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {42--49},
  __markedentry = {[C5187727:6]},
  abstract = {We have designed a problem-based learning (PEL) curriculum called
	ISEC-SeT, which is designed for information science education in
	high schools using computer programming as a tool for problem solving.
	We adopted Squeak eToy and Excel VBA as programming environments
	for the PBL, and have practiced ISEC-SeT at Horikawa High School
	in Kyoto, Japan, from October 2004 to September 2005. Evaluation
	by teachers and students focused on the students' presentations and
	essays on the projects shows that the students achieved problem solving
	abilities through the curriculum and that Squeak eToy provides them
	with a better environment for PBL than Excel VBA.},
  issn = {0769525636},
  keywords = {Computer science education, Computer simulation, Educational institutions,
	Educational programs, Excel VBA, Horikawa High School, Informatics,
	Information science, Problem-solving, Programming, Programming profession,
	Seminars, Squeak etoy, computer aided instruction, computer programming,
	high school education, information science education, problem-solving
	learning, programming environments},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INCOLLECTION{GA¤lli2004,
author = {Markus lli},
  title = {Correlating Unit Tests and Methods under Test},
  publisher = {Springer},
  year = {2004},
  volume = {3092},
  pages = {317--317},
  __markedentry = {[C5187727:6]},
  abstract = {Research Questions: What are the relationships between unit tests
	and between unit tests and methods under test? What can be gained
	by making this relationships explicit? How does the concept of method
	examples compare with other possible techniques to relate this entities?},
  issn = {978-3-540-22137-1},
  journal = {Extreme Programming and Agile Processes in Software Engineering},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com.eaccess.ub.tum.de/chapter/10.1007/978-3-540-24853-8_48}
}

@PHDTHESIS{Gaelli2006,
author = {Markus Gaelli},
  title = {Modeling Examples to Test and Understand Software},
  year = {2006},
  __markedentry = {[C5187727:6]},
  abstract = {One of the oldest techniques to explain abstract\nconcepts is to provide
	concrete examples. By\nexplaining an abstract concept with a concrete\nexample
	people make sure that the concept is\nunderstood and remembered.
	Examples in software can\nbe used both to test the software and to
	illustrate\nits functionality. Object-oriented programs are\nbuilt
	around the concepts of classes, methods and\nvariables, where methods
	are the atoms of the\nfunctionality. But the meta-models of\nobject-oriented
	languages do not allow developers to\nassociate runnable and composable
	examples with\nthese concepts and particularly not with methods.\nUnit
	tests on the other hand, assure the quality of\nthe units under test
	and document them. Not being\nintegrated into the language, unit
	tests are not\nlinked explicitly to their units under test which\nmakes
	it unnecessarily dif ficult to use them for\ndocumenting, typing
	and debugging software. In\naddition they are not composable making
	it hard to\ndevelop higher level test scenarios in parallel with\nhigher
	level objects. In this thesis we analyze unit\ntests to learn about
	implicit dependencies among\ntests and from tests to the methods
	under test. We\ndevelop a technique to partially order unit tests
	in\nterms of their covered methods, which reveals\npossible redundancies
	due to the lack of\ncomposability. We show how partial orders can
	be\nused to debug and to comprehend software. We then\ndevelop a
	taxonomy based on several case studies\nrevealing that a high fraction
	of unit tests already\nimplicitly focuses on single methods. We show
	that\nthe rest of the tests can be decomposed into\ncommands focusing
	on single methods. We build a\nmeta-model based on our findings of
	analyzing test\ninterdependencies which establishes how tests can
	be\nexplicitly linked to their method under test and how\nthey can
	be composed to form higher-level test\nscenarios. We explain how
	the problems of missing\nlinks between tests and units under test
	are solved\nusing our meta-model. Furthermore, we implemented\nthe
	meta-model and a first user interface on top of\nit to give first
	evidence of how our model supports\nthe developer.},
  keywords = {scg-pub skip-doi scg-phd gaelli jb07 fb06 snf06},
  owner = {C5187727},
  pages = {--},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/phd/gaelli-phd.pdf}
}

@INPROCEEDINGS{Gaelli2003,
author = {Markus Gaelli},
  title = {Test composition with example objects and example methods.},
  booktitle = {Proceedings of the ECOOP '03 Workshop on Object-oriented Language
	Engineering for the Post-Java Era},
  year = {2003},
  volume = {3013},
  pages = {143--153},
  address = {Darmstadt, Germany},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  abstract = {While assertions of Design by Contract from Eiffel\nfound its way
	into the language-definitions of\nPython and of Java SDK 1.4, current
	object-oriented\nlanguages do not make the concepts of unit-testing\nexplicit
	in their definitions or meta-models. Not\nhaving support of unit-testing
	in a programming\nlanguage makes it harder to compose and re-compose\ntest-scenarios
	and tests. We propose, that an\nobject-oriented language should include
	explicit\nconcepts for example objects, example methods and\ninstance-specific
	assertions. This concepts ease the\ncomposition of complex test-scenarios,
	they help to\nrefactor the program with the tests and also to keep\nthe
	duration of the tests as low and the coverage of\nthe tests as high
	as possible.},
  issn = {978-3-540-22405-1},
  keywords = {snf03 jb-none scg-pub gaelli},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Gael03aTestComposition.pdf}
}

@INPROCEEDINGS{Gaelli2005,
author = {Markus Gaelli and Michele Lanza and Oscar Nierstrasz},
  title = {Towards a taxonomy of SUnit tests},
  booktitle = {13th International European Smalltalk Conference (ESUG 2005)},
  year = {2005},
  pages = {1--22},
  publisher = {University of Bern, Switzerland},
  __markedentry = {[C5187727:6]},
  abstract = {Not all unit tests are alike. Some tests are simple\none-liners, while
	others contain a battery of\nassertions. Certain tests focus on a
	single method,\nwhile others test interactions between methods.\nThere
	are even tests that do not contain assertions\nat all. This can make
	it difficult for a developer\nto understand which methods are tested
	by which\ntests, to what degree they are tested, and what to\ntake
	into account while refactoring. We have\nmanually analyzed the test
	base of a large existing\nobject-oriented system in order to derive
	a first\ntaxonomy of unit tests. We have then developed some\nsimple
	tools to semi-automatically categorize tests\naccording to this taxonomy,
	and applied it to two\ncase studies. Beside explaining our taxonomy,
	we\nreport on our initial results using it, namely that\na majority
	of unit tests focus on single methods and\nthat our lightweight automatic
	categorization could\nalready classify more than 50% of these single\nmethod
	commands.},
  keywords = {13th international european smalltalk, conference, conferences, esug,
	esug 2005, http, mustinclude, org, reverse engineering, smalltalk,
	taxonomy, thirteenthinternationalconference2005, unit testing, www},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.old.inf.usi.ch/faculty/lanza/Downloads/Gael05a.pdf}
}

@INPROCEEDINGS{Gaelli2004,
author = {Markus Gaelli and Oscar Nierstrasz and St Ducasse},
  title = {One-Method Commands: Linking Methods and Their Tests},
  booktitle = {OOPSLA Workshop on Revival of Dynamic Languages},
  year = {2004},
  pages = {--},
  publisher = {Citeseer},
  __markedentry = {[C5187727:6]},
  abstract = {Although unit testing is essential for programming,\ncurrent languages
	only barely support the developer\nin composing unit tests into new
	ones or in\nnavigating between unit tests and their\ncorresponding
	methods under test. We have taken\nseveral Smalltalk programs and
	analyzed the\nrelationships between unit tests and methods under\ntest,
	and the re- lationships amongst unit tests.\nFirst results indicate
	that most unit tests can be\nseen or at least decomposed into commands
	which\nfocus on single methods, and that large portions of\nunit
	tests overlap each other. But these\nrelationships between unit tests
	and methods under\ntest are not reflected in current languages. We\ntherefore
	first conceptually extend the meta-model\nof Smalltalk with one-method
	commands so that unit\ntests become both com- posable and navigable.
	Then\nwe introduce a first lightweight implementation of\nthis meta
	model using method comments to\ndifferentiate between the several
	test phases of\nexisting XUnit test case methods.},
  keywords = {snf05 scg-pub skip-doi gaelli jb05},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Gael04cLinkingMethodsAndTests.pdf}
}

@INPROCEEDINGS{Gaelli2006a,
author = {Markus Gaelli and Oscar Nierstrasz and Serge Stinckwich},
  title = {Idioms for composing games with EToys},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {222--229},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {Creating one's own games has been the main motivation for many people
	to learn programming. But the barrier to learn a general purpose
	programming language is very high, especially if some positive results
	can only be expected after having manually written more than 100
	lines of code. With this paper we first motivate potential users
	by showing that one can create classic board- and arcade games like
	Lights Out, TicTacToe, or Pacman within the playful and constructivist
	visual learning environment EToys dragging together only a few lines
	of code. Then we present recurring idioms which helped to develop
	these games},
  issn = {0769525636},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4019398}
}

@INPROCEEDINGS{Galli2004,
author = {M Galli and M Lanza and O Nierstrasz and R Wuyts},
  title = {Ordering broken unit tests for focused debugging},
  booktitle = {20th IEEE International Conference on Software Maintenance, 2004.
	Proceedings.},
  year = {2004},
  pages = {114--123},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {Current unit test frameworks present broken unit tests in an arbitrary
	order, but developers want to focus on the most specific ones first.
	We have therefore inferred a partial order of unit tests corresponding
	to a coverage hierarchy of their sets of covered method signatures:
	When several unit tests in this coverage hierarchy break, we can
	guide the developer to the test calling the smallest number of methods.
	Our experiments with four case studies indicate that this partial
	order is semantically meaningful, since faults that cause a unit
	test to break generally cause less specific unit tests to break as
	well.},
  issn = {0-7695-2213-0},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=1357796}
}

@INPROCEEDINGS{Gargus2005,
author = {Joshua Gargus},
  title = {Bootstrapping an animated sketchbook},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {33--40},
  __markedentry = {[C5187727:6]},
  abstract = {This paper describes initial steps towards a system for intuitively
	sketching animations in the context of a digital sketchbook for developing
	ideas and recording thoughts. Following a user-centric approach,
	the initial version of the system is designed as an interviewing
	tool to gather user feedback that would guide further UI development.
	To facilitate review of user interviews, we have implemented a history
	mechanism that works with arbitrarily nested 'worlds'. The history
	of the entire complex of worlds can be traversed, or sub-worlds can
	be traversed individually, or even be embedded in completely different
	worlds. We describe a novel approach to fitting, storing, and rendering
	strokes drawn by the user, which is designed for low storage overhead
	and efficient traversal by our history mechanism, and which supports
	expressively animated rendering styles using GPU shaders.},
  issn = {0769523250},
  keywords = {Animation, Art, CAD, Collaboration, Design automation, Digital recording,
	Feedback, GPU shader, History, Microcomputers, Production systems,
	animated digital sketchbook bootstrapping, computer animation, graphical
	user interfaces, rendering (computer graphics), stroke rendering,
	user centred design, user interface management systems, user interfaces,
	user-centric approach},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Geet2006,
author = {Joris Geet and Andy Zaidman},
  title = {A Lightweight Approach to Determining the Adequacy of Tests as Documentation},
  booktitle = {Proceedings International Workshop on Program Comprehension through
	Dynamic Analysis (PCODA 2006)},
  year = {2006},
  number = {October},
  pages = {315--315},
  __markedentry = {[C5187727:6]},
  issn = {0-7695-2719-1},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=4024010}
}

@INPROCEEDINGS{Graber,
author = {Maria Graber and Tim Felgentreff and Robert Hirschfeld and Alan Borning},
  title = {Solving Interactive Logic Puzzles With Object-Constraints: An Experience
	Report Using Babelsberg/S for Squeak/Smalltalk},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Group2008,
author = {Software Composition Group},
  title = {Hermion - Exploiting Runtime Information in the IDE},
  booktitle = {The 16th IEEE International Conference on Program Comprehension},
  year = {2008},
  pages = {63--72},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4556118}
}

@INPROCEEDINGS{Hagiwara2006,
author = {Gaku Hagiwara and Kokolo Ikeda and Mikihiko Mori and Tetsutaro Uehara and Hajime Kita},
  title = {On socialization of personal computing},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {71--75},
  __markedentry = {[C5187727:6]},
  abstract = {Education is a typical activity of collaboration, i.e., collaboration
	among instructors and students. While there have been vast amount
	of trials using computers in the classroom, their success is quite
	limited compared with total activities done in school education.
	The reasons of the limited success may be the cost of introducing
	computers into the classroom, lack of adequate software, or lack
	of specialists. In this paper, the authors would like to propose
	another hypothetical reason. That is, limit of the 'personal computing'
	as a media in the context of classroom where peoples' activities
	are more social and collaborative using rich media such as verbal
	and non-verbal communication in the face-to-face environment. Based
	on this hypothesis, the authors propose a research plan of extending
	the concept of personal computing to more social media that matches
	collaboration in the face-to-face environment.},
  issn = {0769528066},
  keywords = {Collaboration, Collaborative work, Computer science education, Context,
	Costs, Educational institutions, Educational programs, Joining processes,
	Programming profession, Space technology, computer aided instruction,
	face-to-face environment, groupware, hypothetical reason, non-verbal
	communication, personal computing, rich media, school education,
	social aspects of automation, social media, verbal communication},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Haldiman2009,
author = {Niklaus Haldiman and Marcus Denker and Oscar Nierstrasz},
  title = {Practical, pluggable types for a dynamic language},
  journal = {Computer Languages, Systems and Structures},
  year = {2009},
  volume = {35},
  pages = {48--62},
  number = {1},
  __markedentry = {[C5187727:6]},
  abstract = {Most languages fall into one of two camps: either they adopt a unique,
	static type system, or they abandon static type-checks for run-time
	checks. Pluggable types blur this division by (i) making static type
	systems optional, and (ii) supporting a choice of type systems for
	reasoning about different kinds of static properties. Dynamic languages
	can then benefit from static-checking without sacrificing dynamic
	features or committing to a unique, static type system. But the overhead
	of adopting pluggable types can be very high, especially if all existing
	code must be decorated with type annotations before any type-checking
	can be performed. We propose a practical and pragmatic approach to
	introduce pluggable type systems to dynamic languages. First of all,
	only annotated code is type-checked. Second, limited type inference
	is performed on unannotated code to reduce the number of reported
	errors. Finally, external annotations can be used to type third-party
	code. We present TypePlug, a Smalltalk implementation of our framework,
	and report on experience applying the framework to three different
	pluggable type systems. ?? 2008 Elsevier Ltd. All rights reserved.},
  issn = {9781605580845},
  keywords = {Dynamic languages, Programming languages, Type systems},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842408000262}
}

@INPROCEEDINGS{Hanenberg2004,
author = {Stefan Hanenberg and Robert Hirschfeld and Rainer Unland},
  title = {Morphing aspects: incompletely woven aspects and continuous weaving},
  booktitle = {Proc. 3rd Int' Conf. on Aspect-Oriented Software Development {({AOSD}-2004)}},
  year = {2004},
  pages = {46--55},
  __markedentry = {[C5187727:6]},
  abstract = {Weaving is one of the fundamental mechanisms of aspect-oriented systems.
	A weaver composes different aspects with the base system by determining
	and adapting all parts where aspect specific elements are needed
	eventually. At runtime, timeconsuming join point checks are necessary
	to determine if at a certain join point aspect-specific code needs
	to be executed. Current technologies enforce such checks even in
	locations that only temporarily or under restrictive conditions (or
	even never) execute aspect-specific code. In more complex applications,
	a large number of these checks fail and just cause a substantial
	runtime overhead without contributing to the system's overall behavior.
	The main reason for this flaw is complete weaving, the way how aspects
	are woven to an application using current technologies. In this paper
	we discuss the problem of unnecessary join point checks caused by
	complete weaving. We introduce morphing aspects - incompletely woven
	aspects in combination with continuous weaving - to overcome the
	problem of futile join point checks.},
  issn = {1-58113-842-3},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Haupt2007,
author = {Michael Haupt and Robert Hirschfeld and Marcus Denker},
  title = {Type feedback for bytecode interpreters},
  booktitle = {Proceedings of the Second Workshop on Implementation, Compilation,
	Optimization of Object-Oriented Languages, Programs and Systems (ICOOOLPS'2007),
	ECOOP Workshop},
  year = {2007},
  pages = {17--22},
  __markedentry = {[C5187727:6]},
  abstract = {This position paper proposes the exploitation of\ntype feedback mechanisms,
	or more precisely,\npolymorphic inline caches, for purely interpreting\nimplementations
	of object-oriented programming\nlanguages. Using Squeak's virtual
	machine as an\nexample, polymorphic inline caches are discussed as\nan
	alternative to global caching. An implementation\nproposal for polymorphic
	inline caches in the Squeak\nvirtual machine is presented, and possible
	future\napplications for online optimization are outlined.},
  keywords = {scg07 scg-pub skip-doi jb08 snf07},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Haup07aPIC.pdf}
}

@INPROCEEDINGS{Haupt2011,
author = {Michael Haupt and M Perscheid and R Hirschfeld},
  title = {Type harvesting: a practical approach to obtaining typing information
	in dynamic programming languages},
  booktitle = {â€¦ of the 2011 ACM Symposium on â€¦},
  year = {2011},
  pages = {1282--1289},
  __markedentry = {[C5187727:6]},
  abstract = {Dynamically typed programming languages are powerful tools for rapid
	software development. However, there are scenarios that would benefit
	from actual type information being available---e. g., code generation
	and optimisation as well as program comprehension. Since code written
	in such languages usually makes little or no explicit assumptions
	about types, type inference is not particularly well suited to obtain
	the desired information. This paper introduces type harvesting</i>,
	a practical approach to obtaining type information. It is based on
	stepwise code execution of the code in question, closely observing
	the types of entities in question. Type harvesting allows for exploiting
	unit tests to automatically obtain type information for a code base.
	The approach has been implemented in Squeak/Smalltalk. Its evaluation,
	using several complex applications, shows that type harvesting yields
	excellent results with high precision.},
  issn = {9781450301138},
  keywords = {dynamic analysis, dynamically typed programming languages, type harvesting,
	type inference, unit tests},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1982464}
}

@INPROCEEDINGS{Haupt2010,
author = {Michael Haupt and Michael Perscheid and Robert Hirschfeld},
  title = {PhidgetLab: crossing the border from virtual to real-world objects},
  booktitle = {Proceedings of the 15th Annual SIGCSE Conference on Innovation and
	Technology in Computer Science Education},
  year = {2010},
  pages = {73--77},
  __markedentry = {[C5187727:6]},
  abstract = {Teaching pupils the ideas behind objects in programming languages
	can be difficult since these concepts are mostly abstract and not
	comprehensible at first sight. Etoys as a visual programming environment
	counters such issues by introducing visible objects and simple tiles
	for programming them. However, all of these objects can only be experienced
	virtually on the screen. This paper presents PhidgetLab, a programming
	environment for electronic components (Phidgets) realised on top
	of the Etoys environment. PhidgetLab helps crossing the border from
	virtual to real-world objects. Pupils interact with tangible objects
	that are seamlessly connected to the digital world. PhidgetLab was
	evaluated in a case study with 22 pupils, following the principles
	of the Design Thinking methodology and comprised the realisation
	of five prototypes within a short period of time.},
  issn = {9781605588209},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1822112}
}

@INPROCEEDINGS{Hayashi2006,
author = {Tetsuya Hayashi},
  title = {Basket - An experimental email environment for sharing objects},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {29--34},
  __markedentry = {[C5187727:6]},
  abstract = {Basket is an e-mail environment for sharing objects. This environment
	is for publishing and subscribing of Squeak objects (Project or Morph)
	as e-mail, not dependents on special devices or proprietary server
	architecture. It would help people to authorize objects and to exchange
	them with each other, for example, children who want to publish a
	project and play it with others, or teachers who make a tutorial
	and want to deliver it widely. This environment provides a step to
	the further stage by using itself.},
  issn = {0769525636},
  keywords = {Basket e-mail environment, Computer architecture, Educational institutions,
	Electronic publishing, HTML, Postal services, Squeak object publishing,
	Squeak object subscription, Video sharing, Wideband, Workstations,
	authorisation, distributed object management, electronic mail, groupware,
	message passing, middleware, object authorization, object sharing,
	portals},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hintze2004,
author = {Jana Hintze and Maic Masuch},
  title = {Designing a 3D authoring tool for children},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {78--85},
  __markedentry = {[C5187727:6]},
  abstract = {When designing their own interactive 3D worlds and computer games,
	children can not only engage in a fun and playful activity that has
	meaning to them, but will be able to strengthen their creative power
	as well as their analytical and problem solving skills. However,
	this requires tools that are designed carefully to foster these processes
	and to be fun to use at the same time. We present work in progress
	on designing a 3D authoring tool for children to create interactive
	3D worlds. In the design process, emphasis was placed on fostering
	the user's creative process as well as on conveying mathematical
	and structural principles and ways of thinking through the tool's
	structure. In the design process of a 3D authoring tool, these two
	goals often stand in contradiction to each other. We discuss selected
	problems that are characteristic to the design of this authoring
	tool and present our solutions to these problems as well as the resulting
	preliminary prototype system JiVE.},
  issn = {0769521665},
  keywords = {3D authoring tool design, Application software, Geometry, Humans,
	JiVE prototype system, Paints, Paper technology, Problem-solving,
	Process design, Prototypes, Textiles, Writing, authoring systems,
	computer aided instruction, computer games, computer graphics, interactive
	3D worlds, interactive systems, mathematical principles, structural
	principles},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Hirschfeld2008,
author = {Robert Hirschfeld},
  title = {Dynamic Adaptation--Changing Services at Run Time},
  journal = {Towards 4G Technologies: Services with Initiative},
  year = {2008},
  pages = {191--209},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  publisher = {Wiley Online Library},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeld2003,
author = {Robert Hirschfeld},
  title = {AspectS - Aspect-Oriented Programming with Squeak},
  booktitle = {Objects, Components, Architectures, Services, and Applications for
	a Networked Worl(LNCS)},
  year = {2003},
  pages = {216--232},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dx.doi.org/10.1007/3-540-36557-5_17}
}

@ARTICLE{Hirschfeld2008a,
author = {Robert Hirschfeld and Pascal Costanza and Michael Haupt},
  title = {An introduction to context-oriented programming with contexts},
  journal = {Lecture Notes in Computer Science (including subseries Lecture Notes
	in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year = {2008},
  volume = {5235 LNCS},
  pages = {396--407},
  __markedentry = {[C5187727:6]},
  abstract = {Context-oriented Programming, or COP, provides programmers with dedicated
	abstractions and mechanisms to concisely represent behavioral variations
	that depend on execution context. By treating context explicitly,
	and by directly supporting dynamic composition, COP allows programmers
	to better express software entities that adapt their behavior late-bound
	at run-time. Our paper illustrates COP constructs, their application,
	and their implementation by developing a sample scenario, using ContextS
	in the Squeak/Smalltalk programming environment.},
  issn = {3540886427},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeld,
author = {Robert Hirschfeld and Pascal Costanza and Oscar Nierstrasz},
  title = {Context-oriented Programming},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfelda,
author = {Robert Hirschfeld and Stefan Hanenberg},
  title = {OPEN_aspects},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeldb,
author = {Robert Hirschfeld and Michael Haupt and Michael ger and Patrick nn and Norman Holz and Kerstin Knebel and Robert Timm},
  title = {SophieServer - The Future of Reading},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeld2006,
author = {Robert Hirschfeld and Katsuya Kawamura},
  title = {Dynamic service adaptation},
  booktitle = {Software - Practice and Experience},
  year = {2006},
  volume = {36},
  pages = {1115--1131},
  __markedentry = {[C5187727:6]},
  abstract = {Change can be observed in our environment and in the technology we
	build. While changes in the environment happen continuously and implicitly,
	our technology has to be kept in sync with the changing world around
	it. Although for some of the changes we can prepare, for most of
	them we cannot. This is especially true for next generation mobile
	communication systems that are expected to support the creation of
	a ubiquitous society where virtually everything is connected and
	made available within an organic information network. Resources frequently
	join or leave the network, new types of media or new combinations
	of existing ones are used to interact and cooperate, and services
	are tailored to preferences and needs of individual customers to
	better meet their needs. We outline our research in the area of dynamic
	service adaptation to provide concepts and technologies allowing
	for such environments.},
  issn = {0-7695-2087-1},
  keywords = {Aspect-oriented programming, DSA, Dynamic AOP, Dynamic service adaptation},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeld2004,
author = {Robert Hirschfeld and Katsuya Kawamura and Hendrik Berndt},
  title = {Dynamic Service Adaptation for Runtime System Extensions},
  booktitle = {Wireless On-Demand Network Systems},
  year = {2004},
  pages = {227--240},
  __markedentry = {[C5187727:6]},
  abstract = {Most of all software systems have to be changed after their initial
	deployment. This is not only because of changing knowledge and expectations
	about our domains and systems, but also because of the continuous
	change of the environment itself. While changes in the environment
	happen implicitly, we need to explicitly keep our technology in sync
	with the changing world around it. This is especially true for next
	generation mobile communication systems which we expect to be open
	to third-party service providers, allowing them to offer services
	on a variety of service platforms. Not all of these services to be
	offered will match with all of the platforms. Adjustments and extensions
	need to be made to offer a pleasant service experience. Research
	on dynamic service adaptation provides concepts and technologies
	needed to perform such changes late in a systemâ€™s lifecycle, possibly
	on demand, at runtime, without disruption of service.},
  keywords = {runtime evolution},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Hirschfeld2005,
author = {Robert Hirschfeld and Ralf mmel},
  title = {Reflective designs},
  booktitle = {Software, IEE Proceedings-},
  year = {2005},
  volume = {152},
  number = {1},
  pages = {38--51},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Hirschfeld2002,
author = {Robert Hirschfeld and Matthias Wagner and Kris Gybels},
  title = {Assisting System Evolution: A Smalltalk Retrospective},
  journal = {Unanticipated Software Evolution},
  year = {2002},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7444&amp;rep=rep1&amp;type=pdf}
}

@INPROCEEDINGS{Hofer2006,
author = {Christoph Hofer and Marcus Denker and St Ducasse},
  title = {Design and implementation of a backward-in-time debugger},
  booktitle = {NODe 2006},
  year = {2006},
  pages = {17--32},
  publisher = {GI},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {https://hal.inria.fr/inria-00555768/}
}

@INPROCEEDINGS{Holz2009,
author = {Norman Holz and Robert Hirschfeld and Jens Lincke and Michael Haupt and Michael ger},
  title = {Sophie - Tools and materials in multimedia book creation},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {20--26},
  __markedentry = {[C5187727:6]},
  abstract = {Sophie is an authoring tool for interactive multimedia books. The
	Sophie user can combine different kinds of media and synchronize
	them with events and time. Such highly interactive systems are difficult
	to design and to implement. The large amount of functionality provided
	has to be balanced with a significant ease of use. The standard software
	engineering approaches for the construction of large software systems
	are insufficient concerning the special requirements of interactive
	systems. The tools and materials pattern language is an alternative
	approach to design interactive systems. This paper exemplifies the
	use and benefits of tools and materials by the Sophie application.},
  issn = {9780769536200},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ingalls1997,
author = {Dan Ingalls and Ted Kaehler and John Maloney and Scott Wallace and Alan Kay},
  title = {Back to the future: the story of Squeak, a practical Smalltalk written
	in itself},
  booktitle = {Proc. of the 12th ACM SIGPLAN Conference on Object-oriented Programming,
	1997},
  year = {1997},
  pages = {318--326},
  __markedentry = {[C5187727:6]},
  abstract = {Squeak is an open, highly-portable Smalltalk implementation whose
	virtual machine is written entirely in Smalltalk, making it easy
	to debug, analyze, and change. To achieve practical performance,
	a translator produces an equivalent C program whose performance is
	comparable to commercial Smalltalks. Other noteworthy aspects of
	Squeak include: a compact object format that typically requires only
	a single word of overhead per object; a simple yet efficient incremental
	garbage collector for 32-bit direct pointers; efficient bulk- mutation
	of objects; extensions of BitBlt to handle color of any depth and
	anti-aliased image rotation and scaling; and real-time sound and
	music synthesis written entirely in Smalltalk.},
  issn = {0-89791-908-4},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kadobayashi2006,
author = {Rieko Kadobayashi and Mark P McCahill and Katsumi Tanaka and Julian Lombardi and Howard Stearns and Alan Kay},
  title = {3D model annotation from multiple viewpoints for croquet},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {10--15},
  __markedentry = {[C5187727:6]},
  abstract = {This paper explores ways by which multiple authors can annotate 3D
	models from multiple viewpoints in a 3D collaborative environment,
	with particular reference to the environment provided by Croquet.
	We deal with two types of viewpoint: the conceptual viewpoint and
	the physical viewpoint. Our approach is to exploit the portal, which
	is a notable feature of Croquet, in order to achieve our goal. We
	can assume that a physical viewpoint is expressed by the position
	and orientation of a portal. To provide a method for annotation based
	on the conceptual viewpoint, we developed a new portal called an
	"interactor". The design and our preliminary implementation are discussed},
  issn = {0769525636},
  keywords = {3D collaborative environment, 3D model annotation, Collaboration,
	Communications technology, Computer architecture, Croquet, Information
	services, Internet, Open source software, Peer to peer computing,
	Space technology, Web sites, computer graphics, groupware, modelling,
	multiple viewpoints, portal, portals},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Karaboncuk2008,
author = {Mehmet Karaboncuk and Mehmet Tansel Ersavas},
  title = {Evaluation, training and measurement system for autistic children},
  booktitle = {Proceedings - 6th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2008},
  year = {2008},
  pages = {77--82},
  __markedentry = {[C5187727:6]},
  abstract = {Special training is vitally important to detect and correct autism
	in children 2-4 years old. In order to achieve this goal, critical
	training needs to be performed in a speedy and efficient manner.
	We are developing an evaluation, training and measurement system
	for 2-6 years old autistic children using Squeak and EToys.},
  issn = {0769531156},
  keywords = {Deafness, EToys, Educational institutions, Electrical resistance measurement,
	International collaboration, Joining processes, Speech, Squeak, Tin,
	Wire, Working environment noise, autism, autistic children, computer
	based training, evaluation, handicapped aids, interactive learning,
	learning system, measurement system, special training, training system},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Karuno2003,
author = {H Karuno and S Konomi},
  title = {Squeak workshop experiences in Kyoto},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {126--127},
  __markedentry = {[C5187727:6]},
  abstract = {This poster presentation introduces our first Squeak workshops offered
	in the context of the ALAN-K (Advanced LeArning Network in Kyoto)
	project (Konomi and Karuno, 2003) which is part of a major effort
	to create a new learning environment for elementary, junior high
	and high school students in Kyoto, Japan.},
  issn = {0-7695-1975-X},
  keywords = {ALAN-K project, Advanced Learning Network in Kyoto, Animation, Application
	software, Argon, Art, Educational institutions, Feedback, Frequency,
	Informatics, Intelligent networks, Japan, Squeak, computer literacy,
	courseware, education, elementary school, high school student, junior
	high school, learning environment, object-oriented languages, object-oriented
	programming, student interaction},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kawamura2003,
author = {T Kawamura and Y Kawaguchi and S Nakanishi and K Sugahara and G Suzuki},
  title = {Machine cycle CPU simulator for educational use based on Squeak environment},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {120--121},
  __markedentry = {[C5187727:6]},
  abstract = {A machine cycle CPU simulator is developed on the Squeak environment
	for educational use. The developed simulator is able to show hardware
	behavior in CPU at each system clock. Any component of the simulator
	is implemented as a Morphic object in Squeak. The developed simulator
	is examined by execution of example programs and correct behaviors
	of their executions are confirmed.},
  issn = {0-7695-1975-X},
  keywords = {CPU circuit, Circuit simulation, Clocks, Computer languages, Educational
	institutions, Hardware, Knowledge engineering, Morphic object, Registers,
	Software performance, Squeak environment, central processing unit,
	digital simulation, educational aids, educational computing, educational
	use, execution behavior, hardware behavior, high-level programming
	environment, high-level programming language, machine cycle CPU simulator,
	object-oriented programming, programming environments, simulator
	component, smalltalk, system clock},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kawamura2005,
author = {Takao Kawamura and Ryosuke Nakatani and Kazunori Sugahara},
  title = {P2P e-learning system and its squeak-based user interface},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {57--63},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper, we present a novel framework for asynchronous Web-based
	training. The proposed system has two distinguishing features. Firstly,
	it is based on P2P architecture for scalability and robustness. Secondly,
	all contents in the system are not only data but also agents so that
	they can mark user's answers, can tell the correct answers, and can
	show some extra information without human instruction. We also present
	a prototype implementation of the proposed system on Maglog. Maglog
	is a Prolog-based framework for building mobile multi-agent systems
	we have developed. The user interface program of the proposed system
	is built on Squeak. Performance simulations demonstrate the effectiveness
	of the proposed system.},
  issn = {0769523250},
  keywords = {Computer networks, Electronic learning, History, Humans, Internet,
	Knowledge engineering, Maglog, Multiagent systems, P2P e-learning
	system, PROLOG, Prolog-based framework, Prototypes, Robustness, Scalability,
	Squeak-based user interface, asynchronous Web-based training, computer
	based training, mobile agents, mobile multiagent systems, multi-agent
	systems, peer-to-peer computing, smalltalk, user interfaces},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kidawara2006,
author = {Yutaka Kidawara and Takashi Yamamiya and Masaki Hayashi and Katsumi Tanaka},
  title = {Croquet with TVML: Scripting and generating croquet 3D worlds using
	TVML},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {2--9},
  __markedentry = {[C5187727:6]},
  abstract = {We developed a new 3D content browser based on Croquet that has a
	TVML processing engine and peer-to-peer network connectivity. Croquet
	can create a collaborative 3D world for many users. Users can share
	their knowledge as virtual 3D objects with information in virtual
	spaces. TVML is a scripting language for generating TV-like content,
	and it can control virtual 3D character's behaviors and camera positions.
	Croquet and TVML are very powerful tools for creating virtual 3D
	content. However, both systems lack important functions for virtual
	3D content browsers using the Internet. The usual Croquet does not
	have easy-to-use functions for authoring 3D characters' behaviors.
	A usual TVML player also does not have functions for sharing virtual
	3D objects and virtual space among PCs. We added TVML processing
	functions to Croquet to develop a novel virtual 3D content browser.
	We call the browser `Croquet with TVML'. The new Croquet can play
	virtual 3D content in shared virtual 3D space through peer-to-peer
	networks. TVML generates a virtual 3D world in the new Croquet},
  issn = {0769525636},
  keywords = {3D content browser, Collaboration, Computer architecture, Computer
	networks, Croquet 3D world generation, Croquet 3D world scripting,
	Internet, Knowledge management, Laboratories, Peer to peer computing,
	Personal communication networks, Space technology, TV, TVML processing
	engine, authoring systems, collaborative 3D world, distributed object
	management, groupware, knowledge sharing, peer-to-peer computing,
	peer-to-peer network connectivity, search engines, virtual 3D world,
	virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kim2003,
author = {SeungBum Kim SeungBum Kim},
  title = {Small Squeaking in Korea},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {124--125},
  __markedentry = {[C5187727:6]},
  abstract = {Squeak (Smalltalk language) is not widely known in Korea. A few people
	are taking an interest in Squeak, but there are not enough resources
	to quench their thirst for knowledge. In spite of harsh environments,
	the sounds of squeaking are reverberating silently but happily.},
  issn = {0-7695-1975-X},
  keywords = {Feeds, Korea, Natural languages, Smalltalk language, Squeak, Writing,
	knowledge resources, multilingual project, object-oriented programming,
	programming environments, smalltalk, software tools},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kimura2003,
author = {K Kimura},
  title = {We would like to use Squeak as the instrument for expression!},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {131--131},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {At Visual Arts College Osaka, we are exploring ways to use the computer
	as an instrument for expressing art. Usually, our students learn
	to create works of Web, CD-ROM and video content using the computer.
	We had been thinking about using Squeak for a while, however, it
	was not easy to introduce Squeak in our classes because of the issues
	relevant to the need of using the Japanese language in Squeak and
	the need of Japanese manuals. Fortunately, we met with Mr. Kazuhiro
	Abe in May 2002, who was developing a Japanese edition of Squeak.
	We decided to use Squeak in our class for 3 months aiming at making
	Squeak "our instruments". This attempt was experimental.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kirilichev,
author = {Vasily Kirilichev and Eric Seckler and Benjamin Siegmund and Michael Perscheid and Robert Hirschfeld},
  title = {Stepwise Back-in-time Debugging},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kojarski2003,
author = {Sergei Kojarski and Karl Lieberherr and David H Lorenz and Robert Hirschfeld},
  title = {Aspectual Reflection},
  booktitle = {SPLAT: Software engineering Properties of Languages for Aspect Technologies},
  year = {2003},
  pages = {--},
  __markedentry = {[C5187727:6]},
  abstract = {This workshop will advance the field of AOSD language design by emphasizing
	the need to understand the practical consequences of design decisions
	on the software engineering properties of aspect-oriented software.
	In particular, it will help language designers understand and evaluate
	the tradeoffs entailed by aspect language features, and address the
	need for consistent language design with respect to composability
	of language constructs and features.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.daimi.au.dk/~eernst/splat03/papers/Sergei_Kojarski.ps}
}

@INPROCEEDINGS{Konomi2003,
author = {S Konomi and H Karuno},
  title = {Initial experiences of ALAN-K: an Advanced LeArning Network in Kyoto},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {96--103},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {This paper describes the start-up phase of the ALAN-K (Advanced LeArning
	Network in Kyoto) project, which is part of a major effort to create
	new learning environments for elementary, junior high and high school
	students in Kyoto, Japan. Our visions of digitally fluent and creative
	citizens are largely influenced by the visions, ideas, and experiences
	of Alan Kay and his colleagues. We view the Squeak system (Ingalls
	et al., 1997; Guzdial and Rose, 2002) as powerful learning tools
	and media for enabling both active independent learning and collaboration.
	A series of Squeak workshops were designed and conducted at two elementary
	schools, which will be the basis for designing further activities.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kowark2009,
author = {Thomas Kowark},
  title = {Object-Relational Mapping with SqueakSave},
  booktitle = {Structure},
  year = {2009},
  pages = {1--15},
  __markedentry = {[C5187727:6]},
  issn = {9781605588995},
  keywords = {automatic schema creation, impedance mismatch, object-relational mapping},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Kowark2011,
author = {Thomas Kowark and Philipp Dobrigkeit and Alexander Zeier},
  title = {Towards a shared repository for patterns in virtual team collaboration},
  booktitle = {The 5th International Conference on New Trends in Information Science
	and Service Science},
  year = {2011},
  volume = {2},
  pages = {346--351},
  __markedentry = {[C5187727:6]},
  abstract = {The way teams use virtual collaboration tools, such as wikis, email
	systems, social networks, or version control systems can provide
	indicators for the success or failure of projects. We previously
	created a platform that allows to collect and analyze these virtual
	collaboration activities during project runtime in a non-interfering
	manner. In this paper, we provide a formal definition of collaboration
	patterns to enable sharing of beneficial or detrimental collaboration
	behavior amongst scientist and practitioners. We further define a
	mapping from collaboration pattern descriptions to SPARQL queries
	that allows to automatically test other projects for occurrences
	of the described behavior. By that, we provide a research tool that
	is able to stimulate relevant and rigorous findings in empirical
	engineering research and lead to the creation of a shared repository
	of patterns that reflect best practices in virtual team collaboration.},
  issn = {978-1-4577-0665-3},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/chapter/10.1007/978-3-642-31991-4_14\nhttp://link.springer.com.ezproxy.is.ed.ac.uk/chapter/10.1007/978-3-642-31991-4_14\nhttp://link.springer.com/content/pdf/10.1007%2F978-3-642-31991-4_14.pdf}
}

@INPROCEEDINGS{Kuhn2008,
author = {Adrian Kuhn and Oscar Nierstrasz},
  title = {Composing new abstractions from object fragments},
  booktitle = {VMIL '08: Proceedings of the 2nd Workshop on Virtual Machines and
	Intermediate Languages for emerging modularization mechanisms},
  year = {2008},
  pages = {1--12},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {As object-oriented languages are extended with novel modularization
	mechanisms, better underlying models are required to implement these
	high-level features. This paper describes Cell, a language model
	that builds on delegation-based chains of object fragments. Composition
	of groups of cells is used: 1) to represent objects, 2) to realize
	various forms of method lookup, and 3) to keep track of method references.
	A running prototype of Cell is provided and used to realize the basic
	kernel of a Smalltalk system. The paper shows, using several examples,
	how higher-level features such as traits can be supported by the
	lower-level model.},
  issn = {978-1-60558-384-6},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dx.doi.org/10.1145/1507504.1507505}
}

@INPROCEEDINGS{Lienhard2005,
author = {Adrian Lienhard and St Ducasse and Gabriela valo},
  title = {Identifying traits with formal concept analysis},
  booktitle = {Proceedings of the 20th IEEE/ACM international Conference on Automated
	software engineering SE - ASE '05},
  year = {2005},
  pages = {66--75},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {Traits are basically mixins or interfaces but with method bodies.
	In languages that support traits, classes are composed out of traits.
	There are two main advantages with traits. Firstly, decomposing existing
	classes into traits from which they can be recomposed improves the
	factoring of hierarchies. Secondly it increases the library reuse
	potential by providing more reusable traits. Identifying traits and
	decomposing class hierarchies into traits is therefore an important
	and challenging task to facilitate maintainability and evolution.
	In this paper we present how we use Formal Concept Analysis to identify
	traits in inheritance hierarchies. Our approach is two-staged: first
	we identify within a hierarchy maximal groups of methods that have
	a set of classes in common, second we cluster cohesive groups of
	methods based on method invocations as potential traits. We applied
	our approach on two significant hierarchies and compare our results
	with the manual refactorization of the same code which was done by
	the authors of traits.},
  issn = {1-58113-993-4},
  keywords = {formal_concept_analysis},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://portal.acm.org/citation.cfm?id=1101908.1101921\nciteulike-article-id:8423351\nhttp://dx.doi.org/10.1145/1101908.1101921}
}

@ARTICLE{Lienhard2009,
author = {Adrian Lienhard and St Ducasse and Tudor rba},
  title = {Taking an object-centric view on dynamic information with object
	flow analysis},
  journal = {Computer Languages, Systems and Structures},
  year = {2009},
  volume = {35},
  pages = {63--79},
  number = {1},
  __markedentry = {[C5187727:6]},
  abstract = {A large body of research analyzes the runtime execution of a system
	to extract abstract behavioral views. Those approaches primarily
	analyze control flow by tracing method execution events or they analyze
	object graphs of heap memory snapshots. However, they do not capture
	how objects are passed through the system at runtime. We refer to
	the exchange of objects as the object flow, and we claim that it
	is necessary to analyze object flows if we are to understand the
	runtime of an object-oriented application. We propose and detail
	object flow analysis, a novel dynamic analysis technique that takes
	this new information into account. To evaluate its usefulness, we
	present a visual approach that allows a developer to study classes
	and components in terms of how they exchange objects at runtime.
	We illustrate our approach on three case studies. Â© 2008 Elsevier
	Ltd. All rights reserved.},
  issn = {978-1-60558-084-5},
  keywords = {Dynamic analysis, Object flow analysis},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842408000201}
}

@ARTICLE{Lienhard2008,
author = {Adrian Lienhard and Tudor rba and Oscar Nierstrasz},
  title = {Practical object-oriented back-in-time debugging},
  journal = {Lecture Notes in Computer Science},
  year = {2008},
  volume = {5142},
  pages = {592--615},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/content/pdf/10.1007/978-3-540-70592-5.pdf#page=604}
}

@INPROCEEDINGS{Lienhard2007,
author = {Adrian Lienhard and Orla Greevy and Oscar Nierstrasz},
  title = {Tracking objects to detect feature dependencies},
  booktitle = {IEEE International Conference on Program Comprehension},
  year = {2007},
  pages = {59--68},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {The domain-specific ontology of a software system includes a set of
	features and their relationships. While the problem of locating features
	in object-oriented programs has been widely studied, runtime dependencies
	between features are less well understood. Features cannot be understood
	in isolation, since their behavior often depends on objects created
	and referenced in previously exercised features. It is difficult
	to spot runtime dependencies between features just by browsing source
	code. Hence, code modifications intended for one feature, often inadvertently
	affect other features. In this paper, we propose an approach to precisely
	identify dependencies between features based on a fine-grained dynamic
	analysis which captures details about how objects are referenced
	at runtime. The results of two case studies indicate that our approach
	helps software maintainers in understanding critical feature dependencies.},
  issn = {0769528600},
  keywords = {Dynamic analysis, Feature analysis, Object aliasing, Reverse engineering,
	Visualization},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4268241}
}

@INPROCEEDINGS{Lincke2008,
author = {Jens Lincke and Robert Hirschfeld and Michael ger and Maic Masuch},
  title = {SophieScript - Active content in multimedia documents},
  booktitle = {Proceedings - 6th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2008},
  year = {2008},
  pages = {21--28},
  __markedentry = {[C5187727:6]},
  abstract = {Active content in multimedia documents helps the reader to grasp the
	implications of nonlinear and complex systems that are difficult
	to understand in a text-based description. The readers are able to
	make their own experiments by changing the underlying rules of these
	systems. The multimedia authoring environment Sophie has limited
	capabilities for authoring active dynamic contents. For that reason
	we integrated a tile scripting system based on Tweak Etoys in Sophie.
	In SophieScript scripts can be embedded into the text and the reader
	changes them via direct graphical manipulation. With the implemented
	tile scripting system the user can easily create dynamic content
	and, at the same time, make use of the multimedia and text capabilities
	of Sophie.},
  issn = {0769531156},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Lombardi2005,
author = {Julian Lombardi and Mark P McCahill},
  title = {User interfaces for self and others in croquet learning spaces},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {3--10},
  __markedentry = {[C5187727:6]},
  abstract = {Croquet-based learning environments should combine a rich media vocabulary
	with a distributed multi-user social experience. Such environments
	can provide unique opportunities for creating and delivering experiences
	that enhance online teaching and learning. Designing a user interface
	for such collaborative spaces presents several unique challenges.
	To enable productive interactions between users of such spaces requires
	that software designers choose what sorts of social interactions
	and cues to support such interactions within the collaborative space,
	and which to avoid. Design considerations are further complicated
	by the need to accommodate usability expectations created by users
	who are familiar with modern video game conventions while at the
	same time creating a user interface that provides an accessible path
	to the novice user of three-dimensional collaborative virtual environments.
	In this paper we examine how the user interface must explicitly address
	the boundary between private and public in a virtual collaborative
	social space, and propose a set of initial user interface conventions
	so that we can start the trial and error process of developing the
	optimal user interface for Croquet-based collaborative spaces to
	support learning and instruction.},
  issn = {0769523250},
  keywords = {Collaborative software, Collaborative work, Croquet learning spaces,
	Games, Information technology, Online Communities/Technical Collaboration,
	Software design, Space technology, Vocabulary, computer aided instruction,
	distributed multiuser social experience, education, groupware, human
	computer interaction, user interface, user interfaces, virtual collaborative
	social space, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Lombardi2004,
author = {Julian Lombardi and Mark P McCahill},
  title = {Enabling social dimensions of learning through a persistent, unified,
	massively multi-user, and self-organizing virtual environment},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {166--172},
  __markedentry = {[C5187727:6]},
  abstract = {Existing online learning experiences lack the social dimension that
	characterizes learning in the real world. This social dimension extends
	beyond the traditional classroom into the university's common areas
	where learners build knowledge and understanding through serendipitous
	and collaborative exchanges both within and across traditional subject
	area boundaries. A next generation virtual learning environment (VLE)
	can address the limitations of current online systems by providing
	a richer social context for online learning. We describe the end-user
	properties of a highly-scalable self-organizing Croquet-based VLE
	that fosters dynamic group learning experiences and the development
	of communities of practice. This proposed VLE provides the capacity
	to merge the institutional infrastructure for academic computing,
	enterprise-level networks, Squeak/Croquet-based content authoring,
	and the educational principles of constructivist pedagogy.},
  issn = {0769521665},
  keywords = {Cities and towns, Collaboration, Computer networks, Computer science
	education, Discussion forums, Electronic learning, Environmental
	management, Information technology, Knowledge management, Peer to
	peer computing, Squeak/Croquet-based content authoring, Virtual environment,
	academic computing, computer aided instruction, content management,
	dynamic group learning, end-user properties, enterprise-level networks,
	groupware, highly-scalable self-organizing Croquet-based VLE, institutional
	infrastructure, knowledge building, multimedia computing, online
	learning, online systems, persistent unified massively multiuser
	self-organ, smalltalk, social aspects of automation, social context,
	social dimensions, virtual learning environment, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Lombardi2005a,
author = {Marilyn May Lombardi and Julian Lombard},
  title = {Croquet learning environments: Extending the value of campus life
	into the online experience},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {135--142},
  __markedentry = {[C5187727:6]},
  abstract = {Croquet is a broadband communications platform with a 3D user interface
	and peer-to-peer network architecture that provides educators with
	a new expressive meta-medium that is capable of replicating - and
	in certain ways, surpassing - the most valuable features of campus
	life. By comparing the campus to a collaborative "information space"
	where we are free to roam and "interoperate" at will, we underscore
	the role that proprietary restrictions - operating systems, applications,
	and formats - have played in making online learning a remote, cramped,
	and emotionally "flat" experience. From there, we examine the technical
	hurdles that must be overcome before our online learning experiences
	can approximate the vitality of campus-based, socially contextualized
	education.},
  issn = {0769523250},
  keywords = {3D user interface, Broadband communication, Computational modeling,
	Computer science, Concrete, Croquet broadband communications platform,
	Croquet learning environment, Information technology, Internet, Mathematics,
	Object oriented modeling, Peer to peer computing, Programming profession,
	campus-based socially contextualized education, collaborative information
	space, computer aided instruction, distance learning, expressive
	meta-medium, graphical user interfaces, groupware, online learning
	experience, peer-to-peer computing, peer-to-peer network architecture,
	user interfaces, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Luebbe2011,
author = {Alexander Luebbe and Mathias Weske},
  title = {Bringing Design Thinking to Business Process Modeling},
  booktitle = {Design Thinking: Understand â€“ Improve â€“ Apply},
  year = {2011},
  pages = {181--195},
  __markedentry = {[C5187727:6]},
  abstract = {Business processmanagement is at the heart of organizations. It provides
	concepts andmethods to capture, analyze and improve operational procedures
	in the daily business of organizations. The elicitation of process
	models is the first step in any process improvement project. Processmodels
	mediate communication between the different stakeholders involved,
	such as, for instance, business analysts, process participants, and
	software architects. Process models provide a shared understand-
	ing, so that everyone can contribute knowledge. Based on design thinking
	principles, this paper develops a method that aims at improving business
	process modeling. To achieve this goal, we introduce physical building
	blocks and methodological guidance to fundamentally change theway
	peo- ple interact with process models. Tangible prototypes have been
	successfully used in design thinking, and initial experiments show
	that a tangible toolset is a promis- ing approach to improve business
	process modeling and comprehension. The focus of this paper is on
	the insights we got during the cooperative research project, i.e.,
	the research path we took. Finally, we explain our research method
	and outline the next steps.},
  issn = {978-3-642-13756-3},
  keywords = {BPM, Business Process Modeling, Design Thinking},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/10.1007/978-3-642-13757-0}
}

@INPROCEEDINGS{Lunzer2009,
author = {Aran Lunzer and Jun Fujima},
  title = {Building and exploring with the RecipeSheet},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {41--47},
  __markedentry = {[C5187727:6]},
  abstract = {The RecipeSheet is a spreadsheet-inspired environment for building
	applications that support the parallel, side-by-side exploration
	of alternative processing results. Our early investigations suggest
	that such an environment can be valuable for educational activities
	in which a student's understanding of some topic would be improved
	by being able to explore and compare many alternative cases. In this
	paper, oriented towards readers who are familiar with the Squeak
	environment on which the RecipeSheet has been built, we explain and
	illustrate the facilities available to end users for building their
	own applications. This is a step towards a release of the RecipeSheet
	to the community of educators who are excited by the general promise
	of Squeak, and the various kinds of tool that can be built with it.},
  issn = {9780769536200},
  keywords = {International collaboration, Joining processes, RecipeSheet, Squeak
	environment, computer aided instruction, educational activities,
	software engineering, spreadsheet programs, spreadsheet-inspired
	environment},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Maloney2004,
author = {John Maloney and Natalie Rusk and Leo Burd and Brian Silverman and Yasmin Kafai and Mitchel Resnick},
  title = {Scratch: A sneak preview},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {104--109},
  __markedentry = {[C5187727:6]},
  abstract = {Scratch is a networked, media-rich programming environment designed
	to enhance the development of technological fluency at after-school
	centers in economically-disadvantaged communities. Just as the LEGO
	MindStorms robotics kit added programmability to an activity deeply
	rooted in youth culture (building with LEGO bricks), Scratch adds
	programmability to the media-rich and network-based activities that
	are most popular among youth at after-school computer centers. Taking
	advantage of the extraordinary processing power of current computers,
	Scratch supports programming paradigms and activities that were previously
	infeasible, making it better positioned to succeed than previous
	attempts to introduce programming to youth. Our working hypothesis
	is that, as kids work on personally meaningful Scratch projects such
	as animated stories, games, and interactive art, they develop technological
	fluency, mathematical and problem solving skills, and a justifiable
	self-confidence that serves them well in the wider spheres of their
	lives.},
  issn = {0769521665},
  keywords = {Animation, Art, Buildings, Computer networks, Educational programs,
	Environmental economics, Power generation economics, Programming
	profession, Robot programming, Scratch, after-school centers, computer
	graphics, distributed programming, educational computing, media-rich
	programming environment, networked programming environment, object-oriented
	programming, programming environments, technological fluency, visual
	programming},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Masahiro2003,
author = {S Masahiro},
  title = {The agent Morph - the implementation of information agent on Squeak
	and Croquet},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {72--73},
  __markedentry = {[C5187727:6]},
  abstract = {This is about the implementation of a cooperative information-gathering
	agent as Morph on Squeak. The purpose of this project is to make
	an agent that solves this point on Squeak. This agent includes three
	main functions. First, it collects information. Second, it shows
	information to the user, who selects from it, and then properly stores
	it. Lastly, which is also a characteristic, it allows fellow agents
	that have received information disclosure range and permission from
	the user exchange information to further refine it. With these three
	functioning continually, the circulation of knowledge occurs, and
	the Internet can become a true knowledge processor.},
  issn = {0-7695-1975-X},
  keywords = {Avatars, Croquet, Dark states, Data mining, Fellows, Information resources,
	Internet, Logic programming, Morph agent, Permission, Programming
	profession, Search methods, Squeak, cooperative information-gathering
	agent, data handling, groupware, information agent, information collection,
	information disclosure range, knowledge circulation, knowledge processor,
	mobile agents, object-oriented programming, search engines, smalltalk,
	user exchange information},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Masuch2006,
author = {Maic Masuch and Knut Hartman and Grit Schuster},
  title = {Emotional agents for interactive environments},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {96--102},
  __markedentry = {[C5187727:6]},
  abstract = {Interactive environments need believable characters. Their personality
	and emotions should affect the behavior in order to increase the
	emotional immersion of the player. In our new model virtual characters
	(or agents) are equipped with an individual personality and dynamic
	emotions. Both models interact within the selection of appropriate
	actions, and are thus central for the exhibited behavior of autonomous
	agents. The proposed model is application-independent and allows
	to render a rich set of behaviors for virtual characters in learning
	environments like Squeak eToys or even distributed 3D spaces like
	Open Croquet},
  issn = {0769525636},
  keywords = {Attitude control, Autonomous agents, Collaborative work, Graphics,
	Humans, Mood, Oceans, Speech, Virtual environment, behavior rendering,
	computer aided instruction, distributed 3D spaces, distributed processing,
	emotional agents, interactive environments, learning environments,
	psychology, software agents, virtual characters, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Masuch2005,
author = {Maic Masuch and Michael Rueger},
  title = {Challenges in collaborative game design developing learning environments
	for creating games},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {67--74},
  __markedentry = {[C5187727:6]},
  abstract = {We perform a general analysis of the game design process, the structure
	of digital games and investigate the requirements for the use of
	OpenCroquet as a platform for collaborative game design. Based on
	our experiences of using a Squeak/Tweak programming environment in
	many game projects and recently for teaching game design we derive
	properties of a learning environment for teaching game design in
	an OpenCroquet environment with a special focus on collaboration.},
  issn = {0769523250},
  keywords = {Analytical models, Collaboration, Collaborative software, Open source
	software, OpenCroquet environment, Process design, Production, Programming
	profession, Squeak, Teamwork, Tweak programming environment, collaborative
	game design teaching, computer aided instruction, computer games,
	digital game creation, education, groupware, learning environment,
	programming environments, smalltalk, teaching},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Matsuoka2006,
author = {Mamoru Matsuoka and Haruhiko Okumura and Tomosumi Sasaki and Hiroshi Shimamura and Tsutomu Shimomura and Takaharu Kameoka},
  title = {Global environmental education using squeak and field servers},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {3--7},
  __markedentry = {[C5187727:6]},
  abstract = {We are promoting projects in combination with Squeak eToys, visual
	programming software for children and Field Server, remote monitoring
	system for edible vegetation. We developed a Squeak interface with
	Field Servers, the remote environment monitoring equipments developed
	by the National Agricultural Research Center of Japan and installed
	throughout the world. The interface allows children to create Squeak
	eToys Programs easily that can monitor remote environment. We are
	preparing an educational program that encourage children to develop
	such Squeak eToys Programs and to discuss environmental issues with
	overseas peers using Picton, the picture language developed by Pangaea,
	the Japan-based nonprofit activity. Our project is backed by the
	Japanese Ministry of Education, Culture, Sports, Science and Technology.},
  issn = {0769528066},
  keywords = {Educational institutions, Educational programs, Educational technology,
	Field Servers, Natural languages, Network servers, Picton picture
	language, Programming profession, Remote monitoring, Squeak etoys,
	Vegetation, Web server, Wireless LAN, courseware, edible vegetation,
	environment monitoring equipments, environmental science computing,
	global environmental education, remote monitoring system, user interfaces,
	visual programming, visual programming software},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Matsuzawa2004,
author = {Yoshiaki Matsuzawa and Manabu Sugiura and Hajime Ohiwa},
  title = {A trial course of programming with squeak},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {188--188},
  __markedentry = {[C5187727:6]},
  abstract = {The purpose of programming education is not only to memorize the knowledge
	of programming language but also to let the learners acquire useful
	concepts for realizing one's idea in the form of a program. It requires
	such activities as logical thinking, problem solving, modeling and
	abstraction. However, most of beginners are bothered to memorize
	a lot of knowledge of the programming language and to eliminate compile
	errors. It prevents learners from concentrating on their concept
	acquisition. We think that Squeak proposed by Alan Kay has potential
	to solve this problem. However, if a teacher teaches only the knowledge
	of Squeak and its environment, the problem is not resolved. In this
	report, we propose a Squeak based curriculum and its concept for
	education of programming.},
  issn = {0769521665},
  keywords = {Computer languages, Computer science education, Educational institutions,
	Educational products, Educational programs, Natural languages, Problem-solving,
	Programming profession, Sorting, Squeak based curriculum, Tiles,
	abstraction, compile errors, computer aided instruction, concept
	acquisition, concept learning, education, educational courses, logical
	thinking, modeling, multimedia computing, problem solving, programming
	education, programming language, programming languages, smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{McCahill2005,
author = {Mark P McCahill and Julian Lombardi},
  title = {User interfaces for places and things in croquet learning spaces},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {11--18},
  __markedentry = {[C5187727:6]},
  abstract = {Croquet collaborative learning environments are computer-mediated
	three-dimensional social environments where users create and modify
	the shared virtual world simulation. Users build and modify Croquet
	collaborative spaces by creating new spaces, linking spaces together,
	and populating spaces with objects. The spaces and objects that users
	control can have behaviors and other attributes which users may modify.
	This flexibility presents unique challenges in designing a user interface
	that is functional for a user community with a wide range of experience
	and expertise. In this paper, we examine how the user interface can
	support user control of things and places in Croquet-based collaborative
	learning spaces, and propose a set of initial user interface conventions
	so that we can start the trial and error process of developing the
	optimal user interface for Croquet-based collaborative spaces that
	support learning and instruction.},
  issn = {0769523250},
  keywords = {Collaboration, Collaborative work, Computational modeling, Computer
	simulation, Croquet collaborative spaces, Croquet-based collaborative
	learning spaces, Error correction, Information technology, Joining
	processes, Optimal control, Space technology, computer aided instruction,
	computer-mediated three-dimensional social enviro, groupware, user
	interface design, user interface management systems, user interfaces,
	virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{McCahill2004,
author = {Mark P McCahill and Julian Lombardi},
  title = {Design for an extensible croquet-based framework to deliver a persistent,
	unified, massively multi-user, and self-organizing virtual environment},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {71--77},
  __markedentry = {[C5187727:6]},
  abstract = {We describe a design for a collaborative virtual learning environment
	(VLE) to support massively multi-user and multi-institutional learning
	communities. This architecture extends Croquet to encompass a tier
	of distributed cache servers that allow intelligent caching and pre-fetching
	of objects, scene definitions, and textures. The design also provides
	for interactivity servers tied to specific regions in the VLE. Interactivity
	servers provide persistence for neighborhoods, coordinate modification
	and transient phenomena for locales in the virtual space, and ensure
	trust relations by managing user identification, authentication,
	and authorization via integration with existing institutional authentication
	infrastructure. This system supports real-time interactions that
	promote a self organizing, interdisciplinary knowledge sharing system
	within a scalable VLE in a manner that ensures accountability and
	trust relations.},
  issn = {0769521665},
  keywords = {Authentication, Authorization, Collaboration, Computer architecture,
	Energy management, Information technology, Internet, Large-scale
	systems, Learning systems, Virtual environment, cache storage, collaborative
	virtual learning environment, courseware, distributed cache servers,
	distributed shared memory systems, extensible Croquet-based framework,
	intelligent caching, interactivity servers, interdisciplinary knowledge
	sharing system, multi-access systems, multi-agent systems, multiinstitutional
	learning communities, multiuser self-organizing virtual environment,
	object prefetching, scene definitions, self organizing knowledge
	sharing system, storage management, user authentication, user authorization,
	user identification management},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{McCahill2006,
author = {Mark P McCahill and Peter Moore and Liz Wendland and Anthony Zampogna},
  title = {Extending croquet spaces with vector fields, vehicles, and virtual
	presence},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {68--72},
  __markedentry = {[C5187727:6]},
  abstract = {The Croquet system is a toolkit for constructing collaborative multi-user
	virtual environments incorporating time-synchronization and advanced
	3D visualization and simulations. To investigate how a Croquet environment
	might be used in education to explore physical phenomenon, we are
	developing metaphors for visualizing and making audible space-varying
	forces (vector fields). These vector fields can interact with objects,
	and this allows us to construct simulations of systems such as charged
	particles in fields or sailboats interacting with wind. A natural
	extension of the vector field/object interaction is to allow for
	objects that act as vehicles so that users may ride them. By providing
	a vehicle capability to objects, we have both an intuitive metaphor
	for changing the user's spatial navigational interfaces, and allow
	users to experience the path of an object through a field. This vehicle
	metaphor also points toward an interface for guided tours of spaces.
	Guided tours imply voice and text chat to enable user discussion
	and collaboration. Not everyone is present in a given Croquet space
	at all times - this motivates our work to provide bridges between
	the Croquet in-world experience and legacy text-chat/voice communications
	systems. These legacy chat systems can also provide information about
	who is currently present and active in a given Croquet space to those
	outside the space and so help address user-rendezvous problems. While
	chat is important, if Croquet is seen as nothing more than chat in
	the form of a 3D avatar fancy-dress party, we will not achieve our
	goals of transforming educational content via multi-user simulations
	and advanced visualization. It is the synergies inherent in combining
	virtual presence, vehicles, vector fields that allows for rich collaborative
	construction and exploration of spaces and physical simulations (such
	as charged particles in fields or sailboats) with user-led guided
	tours of these spaces},
  issn = {0769525636},
  keywords = {3D simulations, 3D visualization, Avatars, Bridges, Collaboration,
	Collaborative tools, Collaborative work, Croquet spaces, Navigation,
	Physics computing, Space charge, Space vehicles, Virtual environment,
	audible space-varying forces, collaborative multiuser virtual environments,
	computer aided instruction, data visualisation, educational computing,
	groupware, legacy text chat systems, legacy voice communication systems,
	navigational interfaces, telecommunication computing, time synchronization,
	vector field simulation, vehicle simulation, virtual presence, virtual
	reality, visualization, voice communication},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{McGeer2005,
author = {Rick McGeer and Andreas Raab and Michael Rueger},
  title = {The media messenger},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {101--107},
  __markedentry = {[C5187727:6]},
  abstract = {We describe a new messaging system, designed to transparently send
	media (video, presentations, animations, audio, interactive games,
	still images, 3D spaces, or combinations thereto) to other users
	across the Internet. Unlike previous Internet communication systems
	(Web, email, IM), the MediaMessenger incorporates all code and media
	types as first class objects; unlike previous media systems, the
	MediaMessenger offers rich mixed-media spaces, hyperlinked through
	a system of portals. In addition, the MediaMessenger exhibits a pure
	peer-to-peer unrooted namespace, explicit authorizations to send
	and receive messages (and thus prevents unwanted messaging, or spam),
	and blends the features of both electronic mail and Web browsing.},
  issn = {0769523250},
  keywords = {Animation, Games, IM, Internet, Internet communication systems, MediaMessenger
	messaging system, Network servers, Peer to peer computing, Publishing,
	Web browsing, Web pages, electronic mail, hyperlinks, hypermedia,
	message authentication, mixed-media spaces, multimedia computing,
	online front-ends, peer-to-peer computing, peer-to-peer unrooted
	namespace, portals, rendering (computer graphics)},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Mcgregor2005,
author = {John D Mcgregor},
  title = {Reasoning about the Testability of Product Line Components},
  booktitle = {Proceedings of the International Workshop on Software Product Line
	Testing},
  year = {2005},
  pages = {1--7},
  publisher = {Citeseer},
  __markedentry = {[C5187727:6]},
  abstract = {The testability of a software component is the ability of the software
	to reveal its faults. In the development of high reliability systems,
	testability is an important quality attribute for guiding architecture
	decisions. The reuse of assets in a software product line propagates
	defects as readily as correct code. The strategic levels of reuse
	in a product line produce a high level of inter-dependency among
	the products in the product line that support this propagation. The
	increased frequency with which product line components are executed
	and the range of inputs over which they operate influence the amount
	of testing required to achieve specific levels of reliability. In
	this paper we begin the definition of a reasoning framework for testability
	by considering the characteristics of a product line that influence
	our view of how testable a component is. Keywords: testability, reachability,
	software product line},
  keywords = {Software product line, Testability},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.85.391&rep=rep1&type=pdf#page=22}
}

@INPROCEEDINGS{Miller2006,
author = {John David Miller and Cindy Pickering},
  title = {From one to many: Transforming Miramar into a collaboration space},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {109--116},
  __markedentry = {[C5187727:6]},
  abstract = {The Miramar virtual collaboration environment was originally designed
	and constructed as a single-user 3D workspace. Its transformation
	into a multiuser collaboration workspace - while still retaining
	its core capabilities - posed major challenges, some anticipated,
	some empirical. The authors identify the issues faced in this transmogrification,
	discuss how they were addressed and why, the lessons learned, and
	remaining challenges.},
  issn = {0769528066},
  keywords = {Collaboration, Collaborative software, Collaborative work, Containers,
	Context, Knowledge management, Miramar virtual collaboration environment,
	Navigation, Object oriented modeling, Technological innovation, distributed
	processing, groupware, multiuser collaboration workspace, single-user
	3D workspace, virtual reality, visualization},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Minjat2005,
author = {Florian Minjat and Alexandre Bergel and Pierre Cointe and St Ducasse},
  title = {Mise en symbiose des traits et des classboxes. Application Ã  l'expression
	des collaborations},
  journal = {L'objet},
  year = {2005},
  volume = {11},
  pages = {33--46},
  number = {1-2},
  __markedentry = {[C5187727:6]},
  abstract = {The trait model is complementary to class\ninheritance and allows
	collections of methods to be\nreused by several classes. The classbox
	model allows\na collection of classes to be locally extended with\nvariables
	and/or methods addition. This paper\ndescribes a symbiosis of these
	two models: classes\ncan be locally extended by using a trait. It
	is\nillustrated by an efficient implementation of the\ncollaboration
	model where a collaboration is\nrepresented by a classbox and a role
	by a trait.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.researchgate.net/profile/Stephane_Ducasse/publication/228642592_Mise_en_symbiose_des_traits_et_des_classboxes_Application__l'expression_des_collaborations/links/00463536dc0d786604000000.pdf}
}

@INPROCEEDINGS{Morimoto2012,
author = {Tatsuya Morimoto and Ai Ohira},
  title = {Development of a Programing-Project Sharing Environment on Virtual
	Space},
  booktitle = {2012 10th {International} {Conference} on {Creating}, {Connecting}
	and {Collaborating} through {Computing} ({C}5)},
  year = {2012},
  pages = {29--36},
  __markedentry = {[C5187727:6]},
  abstract = {Recently, there are classes using GUI programming environment such
	as Squeak Etoys or Scratch in primary education. When children study
	in such environment, children do not have enough opportunity to view
	the other's works and show their own work to parents and it is difficult
	to perform mutual evaluation and review lesson. In this paper, we
	propose an environment where children or parents can view the children's
	works on virtual space. It can provide opportunities for children
	to do mutual evaluation or review the past lesson. We have deployed
	this system to classes using GUI-programming environment and conducted
	a questionnaire for children. As a result, seven out of eleven children
	could view the other's works well. Moreover, eight out of ten children
	could find a scene in which other children watch the work together,
	and among these children, six of them viewed this attracting work.},
  issn = {978-1-4673-1009-3},
  keywords = {Avatars, Educational institutions, GUI programming environment, Motion
	pictures, Programming profession, Scratch, Squeak, Synchronization,
	collaboration space, computer aided instruction, graphical user interfaces,
	groupware, primary education, programming-project sharing environment,
	virtual reality, virtual space},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Nierstrasz2005a,
author = {Oscar Nierstrasz and Franz Achermann},
  title = {Separating Concerns with First-Class Namespaces},
  journal = {Aspect-Oriented Software Development},
  year = {2005},
  pages = {243--259},
  __markedentry = {[C5187727:6]},
  abstract = {As applications evolve, it becomes harder and harder\nto separate
	independent concerns. Small changes to a\nsoftware system increasingly
	affect different parts\nof the source code. AOP and related approaches
	offer\nvarious ways to separate concerns into concrete\nsoftware
	artifacts, but what is the \emph{essence}\nof this process? We claim
	that first-class\nnamespaces ---which we refer to as \emph{forms}---\noffer
	a suitable foundation for separating concerns,\nby offering simple,
	yet expressive mechanisms for\ndefining composable abstractions.
	We demonstrate how\nforms help a programmer to separate concerns
	by\nmeans of practical examples in Piccola, an\nexperimental composition
	language.},
  issn = {0-321-21976-7},
  keywords = {snf04 scg-pub skip-doi jb05},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Nier05aNamespaces.pdf}
}

@INCOLLECTION{Nierstrasz2002,
author = {Oscar Nierstrasz and Franz Achermann},
  title = {A Calculus for Modeling Software Components},
  booktitle = {Lecture {Notes} in {Computer} {Science}},
  publisher = {Springer Berlin Heidelberg},
  year = {2002},
  volume = {2852},
  number = {2852},
  pages = {339--360},
  __markedentry = {[C5187727:6]},
  abstract = {Many competing definitions of software components have been proposed
	over the years, but still today there is only partial agreement over
	such basic issues as granularity (are components bigger or smaller
	than objects, packages, or application?), instantiation (do components
	exist at run-time or only at compile-time?), and state (should we
	distinguish between components and â€œinstancesâ€� of components?).
	We adopt a minimalist view in which components can be distinguished
	by composable interfaces. We have identified a number of key features
	and mechanisms for expressing composable software, and propose a
	calculus for modeling components, based on the asynchronous Ï€ calculus
	extended with explicit namespaces, or â€œformsâ€�. This calculus
	serves as a semantic foundation and an executable abstract machine
	for Piccola, an experimental composition language. The calculus also
	enables reasoning about compositional styles and evaluation strategies
	for Piccola. We present the design rationale for the Piccola calculus,
	and briefly outline some of the results obtained.},
  issn = {978-3-540-20303-2, 978-3-540-39656-7},
  journal = {Formal Methods for Components and Objects},
  keywords = {Compilers, Interpreters, Logics and Meanings of Programs, Operating
	Systems, Programming Languages, software engineering},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/chapter/10.1007/978-3-540-39656-7_14}
}

@INPROCEEDINGS{Nierstrasz2005,
author = {Oscar Nierstrasz and Alexandre Bergel and Marcus Denker and St Ducasse and Roel Wuyts},
  title = {On the Revival of Dynamic Languages},
  booktitle = {Software Composition},
  year = {2005},
  volume = {3628},
  pages = {1--13},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  abstract = {The programming languages of today are stuck in a deep rut that has
	developed over the past 50 years. Although we are faced with new
	challenges posed by enormous advances in hardware and internet technology,
	we continue to struggle with old-fashioned languages based on rigid,
	static, closed-world file-based views of programming. We argue the
	need for a new class of dynamic languages that support a view of
	programming as constant evolution of living and open software models.
	Such languages would require features such as dynamic first-class
	namespaces, explicit meta-models, optional, pluggable type systems,
	and incremental compilation of running software systems.},
  issn = {3540287485},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.springerlink.com/index/5kyfv61vjdww2dw8.pdf}
}

@INPROCEEDINGS{Nierstrasz2006a,
author = {Oscar Nierstrasz and Marcus Denker},
  title = {Analyzing, Capturing and Taming Software Change},
  booktitle = {Workshop on Revival of Dynamic Languages (co-located with ECOOP'06)},
  year = {2006},
  number = {July},
  pages = {1--9},
  __markedentry = {[C5187727:6]},
  abstract = {Software systems need to continuously change to remain useful. Change
	appears in several forms and needs to be accommodated at different
	levels. We propose ChangeBoxes as a mechanism to encapsulate, manage,
	analyze and exploit changes to software systems. Our thesis is that
	only by making change explicit and manipulable can we enable the
	software developer to manage software change more effectively than
	is currently possible. Furthermore we argue that we need new insights
	into assessing the impact of changes and we need to provide new tools
	and techniques to manage them. We report on the results of some initial
	prototyping efforts, and we outline a series of research activities
	that we have started to explore the potential of ChangeBoxes.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Nier06bRDL06ACTSC.pdf}
}

@INPROCEEDINGS{Nierstrasz2004,
author = {Oscar Nierstrasz and Marcus Denker},
  title = {Supporting Software Change in the Programming Language},
  booktitle = {OOPSLA Workshop on Revival of Dynamic Languages},
  year = {2004},
  number = {October},
  pages = {1--5},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper we briefly review various kinds of software changes
	and the issues that arise from them. As a consequence, we propose
	research into programming languages with explicit support for representing
	first-class changes, and for manipulating and merging multiple viewpoints
	of evolving software systems.},
  keywords = {classboxes, languages, sofware evolution, traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Nier04dRDLchange.pdf}
}

@ARTICLE{Nierstrasz2006,
author = {Oscar Nierstrasz and St Ducasse and Nathanael rli},
  title = {Flattening traits},
  journal = {Journal of Object Technology},
  year = {2006},
  volume = {5},
  pages = {129--148},
  number = {4},
  __markedentry = {[C5187727:6]},
  abstract = {Traits are fine-grained components that can be used\nto compose classes,
	while avoiding many of the\nproblems of multiple inheritance and
	mixin-based\napproaches. Since most implementations of traits\nhave
	focused on dynamically-typed languages, the\nquestion naturally arises,
	how can one best\nintroduce traits to statically-typed languages,
	like\n{Java} and C#? In this paper we argue that the\nflattening
	property of traits should be used as a\nguiding principle for any
	attempt to add traits to\nstatically-typed languages. This property\nessentially
	states that, semantically, traits can be\ncompiled away. We demonstrate
	how this principle\napplies to FTJ, a conservative extension to\nFeatherweight
	{Java}.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://boris.unibe.ch/19424/1/article4.pdf}
}

@INPROCEEDINGS{Ogino2003,
author = {T Ogino and Y Kambayashi},
  title = {A model of recording students' actions for elementary education with
	Squeak},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {68--71},
  __markedentry = {[C5187727:6]},
  abstract = {In education, it is very important for teachers to grasp students'
	activities. To support teachers, we suggest that all students' actions
	should be automatically recorded. These learning histories are required
	to be flexible for various uses such as personal recommendations,
	analysis, and visualizations. For this requirement, we designed a
	recording model by connecting action history model and MVC model
	on Squeak environments.},
  issn = {0-7695-1975-X},
  keywords = {Animation, Computer interfaces, Computer networks, Computer science
	education, Data mining, Educational institutions, History, Informatics,
	MVC model, Squeak environment, Video recording, action history model,
	automatic recording, elementary education, expert systems, graphical
	user interfaces, learning history, multimedia computing, multimedia
	support, personal analysis, personal recommendation, personal visualization,
	smalltalk, student action recording model, student activity, user
	interface, virtual machine, virtual machines, visualization},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ohshima2005,
author = {Yoshiki Ohshima},
  title = {The early examples of Kedama, a massively parallel system in Squeak},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {93--100},
  __markedentry = {[C5187727:6]},
  abstract = {This paper presents an overview of a massively parallel programming
	system that the author has been developing and also a few examples
	of the system. This system, named "Kedama", provides specialized
	programming construct to express particle simulation. This helps
	in the math and science education in school setting where the students
	don't have particular programming training. Kedama is deeply inspired
	by StarLogo, the previous work in the domain. However, Kedama has
	a few notable differences from the previous works. Firstly, scripts
	can be constructed in a graphical user interface. This GUI is very
	similar to the well-known Squeak eToys and users can write scripts
	with little effort. Secondly, the system allows dynamic changes while
	it is running. It lets users modify their program and explore their
	problem domain quickly. Thirdly, the notion of the Observer script
	and Turtle script are unified. A user can freely mix the global actions
	and turtle actions in one script with little constraint. This paper
	introduces the concepts and semantics of the system, and discusses
	the examples that illustrate how to access these features. The simulations
	discussed are bouncing atoms, the epidemic and pixel manipulations.},
  issn = {0769523250},
  keywords = {Dynamic programming, Educational institutions, Educational programs,
	Engines, Kedama parallel programming system, Mathematical programming,
	Observer script, Programming profession, Squeak etoys, StarLogo,
	Sun, Tiles, Turtle script, educational computing, graphical user
	interface, graphical user interfaces, interactive systems, mathematics
	education, parallel programming, science education, smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ohshima2003,
author = {Y Ohshima and K Abe},
  title = {The design and implementation of multilingualized Squeak},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {44--51},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {This paper describes the design and implementation of multilingualization
	("m17n") of a dynamic object-oriented environment called Squeak.
	The goal of this project is to provide a collaborative and late-bound
	environment where the users can use many different natural languages
	and characters. Squeak is a highly portable implementation of a dynamic
	objects environment and it is a good starting point toward the future
	collaborative environment. However, its text related classes lack
	the ability to handle natural languages that require extended character
	sets such as Arabic, Chinese, Greek, Korean, and Japanese. We have
	been implementing the multilingualization extension to Squeak. The
	extension we wrote can be classified as follows: 1) new character
	and string representations for extended character sets, 2) keyboard
	input and the file out of multilingual text mechanism, 3) flexible
	text composition mechanism, 4) extended font handling mechanisms
	including dynamic font loading and outline font handling, 5) higher
	level application changes including a Japanese version of SqueakToys.
	The resulting environment has the following characteristics: 1) various
	natural languages can be used in the same context, 2) the pixels
	on screen, including the appearance of characters can be completely
	controlled by the program, 3) decent word processing facility for
	a mixture of multiple languages, 4) existing Squeak capability, such
	as remote collaborative mechanism will be integrated with it, 5)
	small memory footprint requirement.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ohshimat2006,
author = {Yoshiki Ohshimat and Takashi Yamamiya and Scott Wallacet and Andreas Raab},
  title = {TinLizzie WysiWiki and WikiPhone: Alternative approaches to asynchronous
	and synchronous collaboration on the Web},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {36--43},
  __markedentry = {[C5187727:6]},
  abstract = {This paper presents TinLizzie WysiWiki and WikiPhone, two systems
	which explore new approaches to media-rich end-user collaboration
	on the World Wide Web. TinLizzie WysiWiki enables authoring of interactive,
	media-rich documents, containing graphical objects bearing user-defined
	scripts, on the Web. In TinLizzie WysiWiki, a user manipulates text
	and active objects in a WYSIWYG graphical editor in a manner similar
	to Squeak eToys. A notable aspect of TinLizzie WysiWiki is that it
	allows both synchronous and asynchronous collaboration among multiple
	users. In asynchronous collaboration, the user content is saved in
	a common format and posted on the Web. Later, another user can visit
	and update the document on the server. In synchronous collaboration,
	more than one user can share a document and edit it simultaneously
	and collaboratively in real-time. The second system presented is
	called WikiPhone. WikiPhone is a minimalist voice over IP (VoIP)
	system which uses only HTTP. WikiPhone allows multiple users to talk
	to each other using a web browser. WikiPhone's strength is its simplicity
	in terms both of the user experience and of its implementation. The
	user simply points a Web-browser to a URL, and then directly participates
	in a conversation, or listens to ongoing conversations among others.
	In the implementation, it seeks the simplest possible approach, yet
	provides a usable VoIP system. Both systems still require a small,
	portable Web browser plugin, but otherwise they stay within the artificial
	limitations of today's World Wide Web. The authors think that they
	exhibit possible future directions for collaboration on the Web.},
  issn = {0769528066},
  keywords = {Application software, Collaboration, Delay, HTTP, Internet telephony,
	Java, TinLizzie WysiWiki, Uniform resource locators, WYSIWYG graphical
	editor, Web browser, Web server, Web sites, WikiPhone, World Wide
	Web, asynchronous collaboration, computer graphics, electronic mail,
	graphical object, groupware, hypermedia, media-rich document, media-rich
	end-user collaboration, minimalist VOIP system, user-defined script},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Okada2009,
author = {Yasuhiko Okada and Takuma Yokomae and Shozi Mizobuchi and Nobukazu Iguchi and Sonoyo Mukai and Takaharu Kameoka},
  title = {Environmental information viewing system (EIVS) using squeak on OLPC-XO},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {65--70},
  __markedentry = {[C5187727:6]},
  abstract = {Our software (the EIVS) is designed for supporting environmental education
	by providing tools for (1) automatic data collection through networks,
	(2) data analysis, and (3) graph drawing of the environmental data
	measured by sensor-robots located at remote areas. Our software using
	Squeak (the Smalltalk environment) works on the hardware OLPC-XO
	with Squeak Virtual Machine. Our software on the OLPC-XO will allow
	a larger number of children using the OLPC-XO to recognize situations
	and problems of our environment for the discussions and the considerations
	of their better solutions.},
  issn = {9780769536200},
  keywords = {Automatic data collection, Environmental education, OLPC-XO, Remotely
	located sensors, Squeak},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Otowa2009,
author = {Tadayuki Otowa and Hideyuki Takada},
  title = {Development of a project exchange tool for Squeak eToys using tangible
	media and its application to primary education},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {71--77},
  __markedentry = {[C5187727:6]},
  abstract = {In these days, some primary schools have computer-based lessons using
	programming tools such as Squeak eToys to promote the ability of
	logical thinking ability and scientific concept. However, some students
	often give up their study at the programming lessons, and how to
	keep their motivation is an important problem. This paper describes
	the development of a project exchange tool for Squeak eToys using
	tangible media. We also report the results of evaluation on the usefulness
	of this method through conducted verification in primary school.},
  issn = {9780769536200},
  keywords = {Application software, Collaborative tools, Collaborative work, Collavoration
	Learning, Computer science education, Educational institutions, Educational
	programs, Joining processes, Logic programming, Personal communication
	networks, Programming profession, RFID tag, Squeak etoys, computer
	aided instruction, computer-based lessons, logical thinking ability,
	primary education, programming lesson, programming tools, project
	exchange tool, scientific concept, tangible media},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Perscheid2012,
author = {Michael Perscheid and Damien Cassou and Robert Hirschfeld},
  title = {Test quality feedback improving effectivity and efficiency of unit
	testing},
  booktitle = {Proceedings - 10th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2012},
  year = {2012},
  pages = {60--67},
  __markedentry = {[C5187727:6]},
  abstract = {Writing unit tests for a software system enhances the confidence that
	a system works as expected. Since time pressure often prevents a
	complete testing of all application details developers need to know
	which new tests the system requires. Developers also need to know
	which existing tests take the most time and slow down the whole development
	process. Missing feedback about less tested functionality and reasons
	for long running test cases make it, however, harder to create a
	test suite that covers all important parts of a software system in
	a minimum of time. As a result a software system may be inadequately
	tested and developers may test less frequently. Our approach provides
	test quality feedback to guide developers in identifying missing
	tests and correcting low-quality tests. We provide developers with
	a tool that analyzes test suites with respect to their effectivity
	(e.g., missing tests) and efficiency (e.g., time and memory consumption).
	We implement our approach, named Path Map, as an extended test runner
	within the Squeak Smalltalk IDE and demonstrate its benefits by improving
	the test quality of representative software systems.},
  issn = {9780769546728},
  keywords = {Dynamic Analysis, Test Quality Feedback, Unit Tests},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Perscheid2014,
author = {Michael Perscheid and Tim Felgentreff and Robert Hirschfeld},
  title = {Follow the path: Debugging state anomalies along execution histories},
  booktitle = {2014 Software Evolution Week - IEEE Conference on Software Maintenance,
	Reengineering, and Reverse Engineering, CSMR-WCRE 2014 - Proceedings},
  year = {2014},
  pages = {124--133},
  __markedentry = {[C5187727:6]},
  abstract = {To understand how observable failures come into being, back-in-time
	debuggers help developers by providing full access to past executions.
	However, such potentially large execution histories do not include
	any hints to failure causes. For that reason, developers are forced
	to ascertain unexpected state properties and wrong behavior completely
	on their own. Without deep program understanding, back-in-time debugging
	can end in countless and difficult questions about possible failure
	causes that consume a lot of time for following failures back to
	their root causes. In this paper, we present state navigation as
	a debugging guide that highlights unexpected state properties along
	execution histories. After deriving common object properties from
	the expected behavior of passing test cases, we generate likely invariants,
	compare them with the failing run, and map differences as state anomalies
	to the past execution. So, developers obtain a common thread through
	the large amount of run-time data which helps them to answer what
	causes the observable failure. We implement our completely automatic
	state navigation as part of our test-driven fault navigation and
	its Path tools framework. To evaluate our approach, we observe eight
	developers during debugging four non-trivial failures. As a result,
	we find out that our state navigation is able to aid developers and
	to decrease the required time for localizing the root cause of a
	failure. Â© 2014 IEEE.},
  issn = {9781479937516},
  keywords = {Back-in-time Debugging, Dynamic Analysis, Likely Invariants, Test-driven
	Fault Navigation, Testing},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Perscheid2012a,
author = {Michael Perscheid and Michael Haupt and Robert Hirschfeld and Hidehiko Masuhara},
  title = {Test-driven Fault Navigation for Debugging Reproducible Failures},
  booktitle = {Journal of the Japan Society for Software Science and Technology},
  year = {2012},
  volume = {29},
  pages = {3_188--3_211},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Perscheid2014a,
author = {Michael Perscheid and Robert Hirschfeld},
  title = {Follow the path: Debugging tools for test-driven fault navigation},
  booktitle = {2014 Software Evolution Week - IEEE Conference on Software Maintenance,
	Reengineering, and Reverse Engineering (CSMR-WCRE)},
  year = {2014},
  pages = {446--449},
  __markedentry = {[C5187727:6]},
  issn = {978-1-4799-3752-3},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=6747215}
}

@INPROCEEDINGS{Perscheid2010,
author = {Michael Perscheid and Bastian Steinert and Robert Hirschfeld and Felix Geller and Michael Haupt},
  title = {Immediacy through interactivity: Online analysis of run-time behavior},
  booktitle = {Proceedings - Working Conference on Reverse Engineering, WCRE},
  year = {2010},
  pages = {77--86},
  __markedentry = {[C5187727:6]},
  abstract = {Visualizations of actual run-time data support the comprehension of
	programs, like examples support the explanation of abstract concepts
	and principles. Unfortunately, the required run-time analysis is
	often associated with an inconvenient overhead that renders current
	tools impractical for frequent use. We propose an interactive approach
	to collect and present run-time data. An initial shallow analysis
	provides for immediate access to visualizations of run-time information.
	As users explore this information, it is incrementally refined on-demand.
	We present an implementation that realizes our proposed approach
	and enables developers to instantly explore run-time behavior of
	selected code entities. We evaluate our interactive approach by measuring
	time and memory overhead in the context of ten different-sized projects.
	Our empirical results show that run-time data for an initial overview
	can be collected in less than 300 milliseconds for 95% of cases.},
  issn = {9780769541235},
  keywords = {Development environments, Dynamic analysis, Object collaboration,
	Program comprehension, Test cases},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Pickering2006,
author = {Cindy Pickering and John David Miller and Eleanor Wynn and Chuck House},
  title = {3D global virtual teaming environment},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {126--133},
  __markedentry = {[C5187727:6]},
  abstract = {Based on research conducted at a large multinational corporation,
	we identified several unique requirements for global team collaboration.
	Our findings included that two-thirds of employees work on distributed
	teams and the same percentage also work on multiple teams. These
	and other data led us to seek a solution that would seamlessly support
	the complexities discovered while enhancing team and personal productivity.
	To adequately represent the complexities, we needed an object-oriented
	information workspace where the use of a 3D user interface allows
	users to retain multiple contexts. We chose an environment already
	developed by Intel Research, Miramar, as a prototyping vehicle},
  issn = {0769525636},
  keywords = {3D global virtual teaming environment, 3D user interface, Collaborative
	software, Collaborative work, Cultural differences, Global communication,
	Hardware, International collaboration, Manufacturing, global team
	collaboration, graphical user interfaces, groupware, object-oriented
	information workspace, object-oriented programming, personal productivity,
	productivity, software tools, team productivity, team working, user
	interfaces},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Pierce2003,
author = {J Pierce},
  title = {Introducing Alice to a Squeak wonderland},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {40--43},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {The Alice project, started at the University of Virginia by Randy
	Pausch and now continuing at Carnegie Mellon University, is designed
	to simplify the process of building interactive 3D worlds so that
	novices without extensive training can build interesting worlds.
	In this paper I describe some of the aspects of Squeak Alice, a version
	of the Alice tool that I ported to Squeak, an open-source descendant
	of Smalltalk. Because Squeak Alice applies many of the lessons learned
	from Alice, I describe some of those lessons. Rather than dwelling
	on the similarities between the two systems, I then focus on describing
	some of the architectural, surface, and functional differences between
	Squeak Alice and Alice, and I describe some of the new capabilities
	that Squeak Alice provides.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{RA¶thlisberger2008a,
author = {David thlisberger},
  title = {Embedding Moose Facilities Directly in IDEs},
  year = {2008},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Roet08gMooseFacilitiesInIDE.pdf}
}

@INPROCEEDINGS{RA¶thlisberger2008b,
author = {David thlisberger},
  title = {Querying runtime information in the ide},
  booktitle = {Proceedings of the 2008 workshop on Query Technologies and Applications
	for Program Comprehension (QTAPC 2008)},
  year = {2008},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.researchgate.net/profile/David_Roethlisberger/publication/229037623_Querying_runtime_information_in_the_ide/links/02e7e532bb2a852fda000000.pdf}
}

@ARTICLE{RA¶thlisberger2008,
author = {David thlisberger and Marcus Denker},
  title = {Unanticipated partial behavioral reflection: Adapting applications
	at runtime},
  journal = {Computer Languages, Systems and Structures},
  year = {2008},
  volume = {34},
  pages = {46--65},
  number = {2-3},
  __markedentry = {[C5187727:6]},
  abstract = {Dynamic, unanticipated adaptation of running systems is of interest
	in a variety of situations, ranging from functional upgrades to on-the-fly
	debugging or monitoring of critical applications. In this paper we
	study a particular form of computational reflection, called unanticipated
	partial behavioral reflection (UPBR), which is particularly well
	suited for unanticipated adaptation of real-world systems. Our proposal
	combines the dynamicity of unanticipated reflection, i.e., reflection
	that does not require preparation of the code of any sort, and the
	selectivity and efficiency of partial behavioral reflection (PBR).
	First, we propose unanticipated partial behavioral reflection which
	enables the developer to precisely select the required reifications,
	to flexibly engineer the metalevel and to introduce the metabehavior
	dynamically. Second, we present a system supporting unanticipated
	partial behavioral reflection in Squeak Smalltalk, called GEPPETTO,
	and illustrate its use with a concrete example of a web application.
	Benchmarks validate the applicability of our proposal as an extension
	to the standard reflective abilities of Smalltalk. Â© 2007 Elsevier
	Ltd. All rights reserved.},
  issn = {978-3-540-71835-2},
  keywords = {Metaobject protocol, Metaprogramming, Reflection, Smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842407000127}
}

@INPROCEEDINGS{RA¶thlisberger2007b,
author = {David thlisberger and Orla Greevy and Adrian Lienhard},
  title = {Feature-centric environment},
  booktitle = {4th IEEE International Workshop on Visualizing Software for Understanding
	and Analysis (VISSOFT 2007)},
  year = {2007},
  pages = {150--151},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4290714}
}

@INPROCEEDINGS{RA¶thlisberger2007a,
author = {David thlisberger and Orla Greevy and Oscar Nierstrasz},
  title = {Feature Driven Browsing},
  booktitle = {Proceedings of the 2007 international Conference on Dynamic Languages:
	in Conjunction with the 15th international Smalltalk Joint Conference
	2007},
  year = {2007},
  number = {August},
  pages = {25--31},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1352684}
}

@ARTICLE{RA¶thlisberger2007,
author = {David thlisberger and Oscar Nierstrasz},
  title = {Combining Development Environments with Reverse Engineering},
  journal = {Proceedings of FAMOOSr},
  year = {2007},
  volume = {2007},
  pages = {20--20},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.researchgate.net/profile/David_Roethlisberger/publication/240804387_Combining_Development_Environments_with_Reverse_Engineering/links/5437f79f0cf2d5fa292ba03a.pdf}
}

@INPROCEEDINGS{RA¶thlisberger2009,
author = {David thlisberger and Oscar Nierstrasz and St Ducasse},
  title = {Autumn leaves: Curing the window plague in IDEs},
  booktitle = {Proceedings - Working Conference on Reverse Engineering, WCRE},
  year = {2009},
  pages = {237--246},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {Navigating large software systems is difficult as the various artifacts
	are distributed in a huge space, while the relationships between
	different artifacts often remain hidden and obscure. As a consequence,
	developers using a modern interactive development environment (IDE)
	are forced to open views on numerous source artifacts to reveal these
	hidden relationships, leading to a crowded workspace with many opened
	windows or tabs. Developers often lose the overview in such a cluttered
	workspace as IDEs provide little support to get rid of unused windows.
	AutumnLeaves automatically selects windows unlikely for future use
	to be closed or grayed out while important ones are displayed more
	prominently. This reduces the number of windows opened at a time
	and adds structure to the developer's workspace. We validate AutumnLeaves
	with a benchmark evaluation using recorded navigation data of various
	developers to determine the prediction quality of the employed algorithms.},
  issn = {9780769538679},
  keywords = {Developer activity analysis, Development environments, Productivity,
	Program comprehension, Software navigation},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5328777}
}

@INPROCEEDINGS{RA¶thlisberger2009a,
author = {David thlisberger and Oscar Nierstrasz and St Ducasse and Damien Pollet and Romain Robbes},
  title = {Supporting task-oriented navigation in IDEs with configurable HeatMaps},
  booktitle = {IEEE International Conference on Program Comprehension},
  year = {2009},
  pages = {253--257},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {Mainstream IDEs generally rely on the static structure of a software
	project to support browsing and navigation. We propose HeatMaps,
	a simple but highly configurable technique to enrich the way an IDE
	displays the static structure of a software system with additional
	kinds of information. A HeatMap highlights software artifacts according
	to various metric values, such as bright red or pale blue, to indicate
	their potential degree of interest. We present a prototype system
	that implements HeatMaps, and we describe an initial study that assesses
	the degree to which different HeatMaps effectively guide developers
	in navigating software.},
  issn = {9781424439973},
  keywords = {Development environments, Program comprehension, Software analysis,
	Static analysis},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=5090052}
}

@INPROCEEDINGS{RA¼ger2008,
author = {Michael ger and Bob Stein and Dan Visel},
  title = {Sophie: The future of reading},
  booktitle = {Proceedings - 6th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2008},
  year = {2008},
  pages = {13--20},
  __markedentry = {[C5187727:6]},
  abstract = {Sophie is an easy-to-use authoring tool that enables its users to
	combine various media into a new kind of book. With SophieServer,
	an extension to Sophie, it is now possible to share Sophie Books
	with readers all over the world. Readers can share their knowledge
	and discuss their insights with the community. For that, virtual
	book-clubs offer guided tours that can be prepared, attended, commented,
	and evolved online by interested members. Alternatively, readers
	can just enjoy Sophie books, reading them within their Web browser.},
  issn = {0769531156},
  keywords = {Books, Collaborative tools, Electronic publishing, HTML, International
	collaboration, Internet, Joining processes, Microcomputers, Programming
	profession, Sophie, Videos, authoring, document handling, eBooks,
	electronic books, multimedia, multimedia books, software tools},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{Reichhart2007,
author = {Stefan Reichhart and Tudor rba and St Ducasse},
  title = {Rule-based assessment of test quality},
  journal = {Journal of Object Technology},
  year = {2007},
  volume = {6},
  pages = {231--251},
  number = {9},
  __markedentry = {[C5187727:6]},
  abstract = {With the success of agile methodologies more and\nmore projects develop
	large test suites to ensure\nthat the system is behaving as expected.
	Not only do\ntests ensure correctness, but they also offer a live\ndocumentation
	for the code. However, as the system\nevolves, the tests need to
	evolve as well to keep up\nwith the system, and as the test suite
	grows larger,\nthe effort invested into maintaining tests is a\nsignificant
	activity. In this context, the quality\nof tests becomes an important
	issue, as developers\nneed to assess and understand the tests they
	have to\nmaintain. In this paper we present TestLint, an\napproach
	together with an experimental tool for\nqualifying tests. We define
	a set of criteria to\ndetermine test quality, and we evaluate our
	approach\non a large sample of unit tests found in open-source\nprojects.},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.jot.fm/issues/issue_2007_10/paper12/index}
}

@ARTICLE{Renggli2010,
author = {Lukas Renggli and St Ducasse and Tudor rba and Oscar Nierstrasz},
  title = {Domain-specific program checking},
  journal = {Lecture Notes in Computer Science (including subseries Lecture Notes
	in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year = {2010},
  volume = {6141 LNCS},
  pages = {213--232},
  __markedentry = {[C5187727:6]},
  abstract = {Lint-like program checkers are popular tools that\nensure code quality
	by verifying compliance with\nbest practices for a particular programming\nlanguage.
	The proliferation of internal\ndomain-specific languages and models,
	however, poses\nnew challenges for such tools. Traditional program\ncheckers
	produce many false positives and fail to\naccurately check constraints,
	best practices, common\nerrors, possible optimizations and portability\nissues
	particular to domain-specific languages. We\nadvocate the use of
	dedicated rules to check\ndomain-specific practices. We demonstrate
	the\nimplementation of domain-specific rules, the\nautomatic fixing
	of violations, and their\napplication to two case-studies: (1) Seaside
	defines\nseveral internal DSLs through a creative use of the\nsyntax
	of the host language; and (2) Magritte adds\nmeta-descriptions to
	existing code by means of\nspecial methods. Our empirical validation\ndemonstrates
	that domain-specific program checking\nsignificantly improves code
	quality when compared\nwith general purpose program checking.},
  issn = {3642139523},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INCOLLECTION{Renggli2007a,
author = {Lukas Renggli and St Ducasse and Adrian Kuhn},
  title = {Magritte --- A Meta-Driven Approach to Empower Developers and End
	Users},
  publisher = {Springer},
  year = {2007},
  volume = {4735},
  pages = {106--120},
  __markedentry = {[C5187727:6]},
  abstract = {Model-driven engineering is a powerful approach to\nbuild large-scale
	applications. However, an\napplication's metamodel often remains
	static after\nthe development phase and cannot be changed unless
	a\nnew development effort occurs. Yet, end users often\nneed to rapidly
	adapt their applications to new\nbusiness needs. In many cases, the
	end users would\nknow how to make the required adaptations, if only,\nthe
	application would let them do so. In this paper\nwe present how we
	built a runtime-dynamic\nmeta-environment by integrating Magritte,
	a\nself-described metamodel, into Smalltalk's\nreflective language
	model. Our solution offers the\nbest of both worlds: developers can
	develop their\napplications using the same tools they were used to,\nbut
	at the same time they gain the power of\nmeta-programming. We show
	in particular that our\napproach is adapted to support end user\ncustomization
	of applications: the adaptive model of\nMagritte enables to not only
	describe existing\nclasses, but also lets end users build their own\nmetamodels
	on the fly.},
  issn = {978-3-540-75208-0},
  journal = {Model Driven Engineering Languages and Systems},
  keywords = {scg07 scg-pub jb07 snf07 snf-bmcc akuhn fame},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Reng07aMagritte.pdf}
}

@INPROCEEDINGS{Renggli2007,
author = {Lukas Renggli and Oscar Nierstrasz},
  title = {Transactional Memory for Smalltalk},
  booktitle = {Proceedings of the 2007 international conference on Dynamic languages:
	in conjunction with the 15th International Smalltalk Joint Conference
	2007},
  year = {2007},
  number = {August},
  pages = {25--31},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1352692}
}

@INPROCEEDINGS{Robbes2012,
author = {Romain Robbes and Mircea Lungu and David thlisberger},
  title = {How Do Developers React to API Deprecation?: The Case of a Smalltalk
	Ecosystem},
  booktitle = {Proceedings of the ACM SIGSOFT 20th International Symposium on the
	Foundations of Software Engineering},
  year = {2012},
  pages = {56:1--56:11},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {When the Application Programming Interface (API) of a framework or
	library changes, its clients must be adapted. This change propagation---known
	as a ripple effect---is a problem that has garnered interest: several
	approaches have been proposed in the literature to react to these
	changes. Although studies of ripple effects exist at the single system
	level, no study has been performed on the actual extent and impact
	of these API changes in practice, on an entire software ecosystem
	associated with a community of developers. This paper reports on
	an empirical study of API deprecations that led to ripple effects
	across an entire ecosystem. Our case study subject is the development
	community gravitating around the Squeak and Pharo software ecosystems:
	seven years of evolution, more than 3,000 contributors, and more
	than 2,600 distinct systems. We analyzed 577 methods and 186 classes
	that were deprecated, and answer research questions regarding the
	frequency, magnitude, duration, adaptation, and consistency of the
	ripple effects triggered by API changes.},
  issn = {978-1-4503-1614-9},
  keywords = {Mining software repositories, ecosystems, empirical studies},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://doi.acm.org/10.1145/2393596.2393662}
}

@INPROCEEDINGS{Ruger2003,
author = {M Ruger},
  title = {SuperSwiki - bringing collaboration to the class room},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {18--21},
  __markedentry = {[C5187727:6]},
  abstract = {SuperSwiki is not yet a well defined term. Its origins go back to
	Ward Cunningham's Wiki and its Squeak variant, the Swiki. It provides
	a place to share and edit Web pages, files, and, in case of the SuperSwiki,
	Squeak projects. The concept of a (Super)Swiki lends itself very
	well to facilitate collaboration in the classroom, on a campus or
	even across the Internet. It is easy to set up and all that is needed
	on the client side is a Web browser (and Squeak). This paper illustrates
	some of the key ideas behind SuperSwikis, how to run and use them,
	and considers some existing installations.},
  issn = {0-7695-1975-X},
  keywords = {Collaboration, Educational institutions, HTML, Internet, Linux, Navigation,
	OpenSource project, Postal services, Squeak project, Squeak variant,
	SuperSwiki, Virtual manufacturing, Web browser, Web design, Web file,
	Web page editing, Web page sharing, Web pages, Web server, Wiki,
	class room collaboration, courseware, groupware, object-oriented
	languages, object-oriented programming, programming environments,
	programming language, smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ruger2004,
author = {M Ruger and Y Ohshima},
  title = {TranSqueak - making the world a smaller place: on-the-fly translation
	of Etoy projects and instant messaging},
  booktitle = {Proceedings. Second International Conference on Creating, Connecting
	and Collaborating through Computing, 2004.},
  year = {2004},
  pages = {110--116},
  __markedentry = {[C5187727:6]},
  abstract = {This work presents an extension to the existing multilingualization
	work (ml7n) which allows people to collaborate on Squeak Etoy projects
	across different natural languages. Squeak etoys support several
	languages, both ISO-Latin based ones (erg., English, German, French),
	and nonISO languages (e.g., Japanese). Switching between languages
	for the Etoy tiles is fairly easy to support as the tiles provide
	a predefined set of words and phrases, which only need to be translated
	once. There are two areas where we need to go beyond the predefined
	and pretranslated set of phrases: user supplied names and communication
	between collaborators. This work presents an approach based on online
	translation services. We demonstrate a working prototype and a first
	analysis of the feasibility of this approach.},
  issn = {0-7695-2166-5},
  keywords = {Etoy tiles, International collaboration, Joining processes, Squeak
	etoys, TranSqueak, collaborate working, electronic messaging, groupware,
	instant messaging, language translation, natural language interfaces,
	on-the-fly translation, online translation services, smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Sakai2006,
author = {M Sakai and Y Ishizaki and a Togawa and T Yamamoto},
  title = {3D Environments Utilization Effects in Development Processes of Embedded
	IT Devices},
  booktitle = {Fourth International Conference on Creating, Connecting and Collaborating
	through Computing (C5'06)},
  year = {2006},
  pages = {26--28},
  __markedentry = {[C5187727:6]},
  abstract = {Since there is a considerable amount of history regarding development
	processes of embedded IT devices, a lot of advanced applications
	exist. However, it is often the case that the attempts to consistently
	integrate each process in order to process information smoothly are
	limited to products offered by a single software vender. Accordingly,
	we have experimentally produced information that is able to be processed
	by a variety of legacy applications on an OS and its circumstances
	based on 3D environments using the embedded UML technique. Consequently,
	we researched the environments and effects in which users could easily
	handle the information necessary for the development of embedded
	IT devices},
  issn = {0-7695-2563-6},
  keywords = {3D environments utilization effects, Application software, Collaborative
	software, Design engineering, Electronic circuits, Embedded software,
	Hardware, Information science, Packaging, Software design, Unified
	modeling language, electronic engineering computing, embedded IT
	device development processes, embedded UML technique, embedded systems},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Santos2008,
author = {Filipe Santos and Benjamim Fonseca and Leonel Morgado and Paulo Martins},
  title = {Children as active partners: Strategies for collaboration in spatial
	tasks through Virtual Worlds},
  booktitle = {Proceedings - 6th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2008},
  year = {2008},
  pages = {73--76},
  __markedentry = {[C5187727:6]},
  abstract = {This paper, referring to a work in progress, describes functional
	elements of the user interface of a Virtual World that may provide
	an important contribution to the process by which primary teachers
	and pupils collaborate in negotiating spatial configurations of educational
	spaces (classroom, playground, set for a theatre play, etc.). We
	have observed this process and some of its inherent difficulties
	and identified requirements or the functional elements of the interface.
	Finally, we reflect about factors impacting children's feelings of
	lack of authorship and ownership of spatial configurations resulting
	from collaboration and how a computer system may help in this regard.
	This Virtual World is therefore configured to be applied in educational
	contexts where curricular models reflect the new childhood culture
	where children have an active role in the spaces where they spend
	most of their time, as schools that adopt the Portuguese Modern School
	Movement pedagogical model.},
  issn = {0769531156},
  keywords = {Collaborative work, Computer interfaces, Context modeling, Decision
	making, Educational institutions, International collaboration, Joining
	processes, Mediation, Programming profession, computer aided instruction,
	education, groupware, pedagogical model, spatial configuration, teaching,
	user interface, user interfaces, virtual reality, virtual world},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{SchA¤rli2001,
author = {Nathanael rli and Franz Achermann},
  title = {Partial Evaluation of Inter-Language Wrappers},
  year = {2001},
  pages = {--},
  address = {Vienna, Austria},
  month = sep,
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@ARTICLE{SchA¤rli2004,
author = {Nathanael rli and Andrew P Black},
  title = {A browser for incremental programming},
  journal = {Computer Languages, Systems and Structures},
  year = {2004},
  volume = {30},
  pages = {79--95},
  number = {1-2},
  __markedentry = {[C5187727:6]},
  abstract = {Much of the elegance and power of Smalltalk comes from its programming
	environment and tools. First introduced more than 20 years ago, the
	Smalltalk browser enables programmers to "home in" on particular
	methods using a hierarchy of manually-defined classifications. By
	its nature, this classification scheme says a lot about the desired
	state of the code, but little about the actual state of the code
	as it is being developed. We have extended the Smalltalk browser
	with dynamically computed virtual categories that dramatically improve
	the browser's support for incremental programming. We illustrate
	these improvements by example, and describe the algorithms used to
	compute the virtual categories efficiently. Â© 2003 Elsevier Ltd.
	All rights reserved.},
  issn = {1477-8424},
  keywords = {Incremental programming, Intentional programming, Method reachability,
	Requires set, Smalltalk browser},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.sciencedirect.com/science/article/pii/S1477842403000460}
}

@INPROCEEDINGS{SchA¤rli2004b,
author = {Nathanael rli and Andrew P Black and St Ducasse},
  title = {Object-oriented encapsulation for dynamically typed languages},
  booktitle = {ACM SIGPLAN Notices},
  year = {2004},
  volume = {39},
  number = {10},
  pages = {130--130},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {Encapsulation in object-oriented languages has traditionally been
	based on static type systems. As a consequence, dynamically-typed
	languages have only limited support for encapsulation. This is surprising,
	considering that encapsulation is one of the most fundamental and
	important concepts behind object-oriented programming and that it
	is essential for writing programs that are maintainable and reliable,
	and that remain robust as they evolve.},
  issn = {1-58113-831-9},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=1028988}
}

@INCOLLECTION{SchA¤rli2003,
author = {N rli and S Ducasse and O Nierstrasz and A Black},
  title = {Traits: Composable units of behaviour},
  booktitle = {Lecture {Notes} in {Computer} {Science}},
  publisher = {Springer Berlin Heidelberg},
  year = {2003},
  volume = {2743},
  number = {2743},
  pages = {248--274},
  __markedentry = {[C5187727:6]},
  abstract = {Despite the undisputed prominence of inheritance as the fundamental
	reuse mechanism in object-oriented programming languages, the main
	variants single inheritance, multiple inheritance, and mixin inheritance
	all suffer from conceptual and practical problems. In the first part
	of this paper, we identify and illustrate these problems. We then
	present traits, a simple compositional model for structuring object-oriented
	programs. A trait is essentially a group of pure methods that serves
	as a building block for classes and is a primitive unit of code reuse.
	In this model, classes are composed from a set of traits by specifying
	glue code that connects the traits together and accesses the necessary
	state. We demonstrate how traits overcome the problems arising from
	the different vari- ants of inheritance, we discuss how traits can
	be implemented effectively, and we summarize our experience applying
	traits to refactor an existing class hierarchy.},
  issn = {978-3-540-40531-3},
  journal = {Lecture Notes in Computer Science},
  keywords = {inheritance, mixins, multiple inheritance, reuse, smalltalk, traits},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://www.springerlink.com/index/169MBRAEPN4GMYD2.pdf}
}

@INCOLLECTION{SchA¤rli2004a,
author = {Nathanael rli and St Ducasse and Oscar Nierstrasz and Roel Wuyts},
  title = {Composable Encapsulation Policies},
  publisher = {Springer},
  year = {2004},
  volume = {3086},
  pages = {26--50},
  __markedentry = {[C5187727:6]},
  abstract = {Given the importance of encapsulation to\nobject-oriented programming,
	it is surprising to\nnote that mainstream object-oriented languages
	offer\nonly limited and fixed ways of encapsulating\nmethods. Typically
	one may only address two\ncategories of clients, users and heirs,
	and one must\nbind visibility and access rights at an early stage.\nThis
	can lead to inflexible and fragile code as well\nas clumsy workarounds.
	We propose a simple and\ngeneral solution to this problem in which\nencapsulation
	policies can be specified separately\nfrom implementations. As such
	they become\nfirst-class composable entities that can be reused\nby
	different classes. We present a detailed analysis\nof the problem
	with encapsulation and visibility\nmechanisms in mainstream OO languages,
	we introduce\nour approach in terms of a simple model, and we\nevaluate
	how our approach compares with existing\napproaches. We also assess
	the impact of\nincorporating encapsulation policies into Smalltalk\nand
	discuss some implementation issues.},
  issn = {978-3-540-22159-3},
  journal = {Proceedings of European Conference on Object-Oriented Programming
	(ECOOP'04)},
  keywords = {snf04 scg-pub jb04 scg-traits stefPub schaerli},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Scha04aEncapsulationPolicies.pdf}
}

@INPROCEEDINGS{Schaerli2002,
author = {Nathanael Schaerli and St Ducasse and Oscar Nierstrasz},
  title = {Classes= traits+ states+ glue},
  booktitle = {Proceedings of The Inheritance Workshop at ECOOP 2002},
  year = {2002},
  pages = {82--88},
  address = {MÃ¡laga, Spain},
  publisher = {Springer},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Schuster2006,
author = {Grit Schuster and Christine Strothotte and Carola Zwick},
  title = {Syncing croquet with the real world},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {117--124},
  __markedentry = {[C5187727:6]},
  abstract = {3D virtual environments like Croquet need to be attractive in order
	to be visited and used. Their attractiveness depends on the level
	of vitality that the user is able to experience. Vitality can only
	be recognized by constant changes, similar to phenomena we know from
	nature like breathing. We introduce two sorts of vitality by which
	a virtual environment can be judged: active and passive vitality.
	By passive vitality we summarize all constant changes happening within
	the environment, while active vitality includes all personal expressions
	the user can perform. For creating both types of vitality within
	a virtual environment this virtual environment has to be synced with
	reality. With syncing we definitely do not mean to mimic the visual
	appearance of reality, but to create properties and behaviours corresponding
	to phenomena of the real world. By means of sensors and microcontrollers
	we build a technological bridge to dynamically sync data of the real
	world with their abstract representations within Croquet. Two example
	applications demonstrate the potential of this syncing method. The
	degree and extent of syncing reality affects the degree of attractiveness
	because the user recognizes the virtual environment as vital and
	lively. This syncing method provides authentic information beyond
	simulation.},
  issn = {0769528066},
  keywords = {3D virtual environments, Atmosphere, Books, Bridges, Collaborative
	work, Croquet, International collaboration, Microcontrollers, Optical
	arrays, Sensor phenomena and characterization, Virtual environment,
	passive vitality, portable computers, syncing method, virtual reality},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Schwarz2012a,
author = {Niko Schwarz},
  title = {Hot clones: Combining search-driven development, clone management,
	and code provenance},
  booktitle = {Proceedings - International Conference on Software Engineering},
  year = {2012},
  pages = {1628--1629},
  publisher = {IEEE Press},
  __markedentry = {[C5187727:6]},
  abstract = {Code duplication is common in current programming-practice: programmers\nsearch
	for snippets of code, incorporate them into their projects and\nthen
	modify them to their needs. In today's practice, no automated\nscheme
	is in place to inform both parties of any distant changes of the\ncode.
	As code snippets continue to evolve both on the side of the user\nand
	on the side of the author, both may wish to benefit from remote bug\nfixes
	or refinements - authors may be interested in the actual usage of\ntheir
	code snippets, and researchers could gather information on clone\nusage.
	We propose to maintain a link between software clones across\nrepositories
	and outline how the links can be created and maintained.},
  issn = {9781467310673},
  keywords = {clone detection, corrective clone management, software maintenance},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=2337504}
}

@INPROCEEDINGS{Schwarz2012,
author = {Niko Schwarz and Mircea Lungu and Romain Robbes},
  title = {On how often code is cloned across repositories},
  booktitle = {Proceedings - International Conference on Software Engineering},
  year = {2012},
  pages = {1289--1292},
  publisher = {IEEE Press},
  __markedentry = {[C5187727:6]},
  abstract = {Detecting code duplication in large code bases, or even across project\nboundaries,
	is problematic due to the massive amount of data involved.\nLarge-scale
	clone detection also opens new challenges beyond asking for\nthe
	provenance of a single clone fragment, such as assessing the\nprevalence
	of code clones on the entire code base, and their evolution.\nWe
	propose a set of lightweight techniques that may scale up to very\nlarge
	amounts of source code in the presence of multiple versions. The\ncommon
	idea behind these techniques is to use bad hashing to get a quick\nanswer.
	We report on a case study, the Squeaksource ecosystem, which\nfeatures
	thousands of software projects, with more than 40 million\nversions
	of methods, across more than seven years of evolution. We\nprovide
	estimates for the prevalence of type-1, type-2, and type-3\nclones
	in Squeaksource.},
  issn = {9781467310673},
  keywords = {Clone detection, Software ecosystems},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=2337398}
}

@INPROCEEDINGS{Seckler,
author = {Eric Seckler and Robert Hirschfeld},
  title = {Archipelago: A Research Platform for Component Interaction in Distributed
	Applications},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Smith2003,
author = {D Smith and a Kay and a Raab and D Reed},
  title = {Croquet - a collaboration system architecture},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {2--2},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {Croquet is a computer software architecture built from the ground
	up with a focus on deep collaboration between teams of users. It
	is a totally open, totally free, highly portable extension to the
	Squeak (Ingalls et al., 2002) programming system. Croquet is a complete
	development and delivery platform for doing real collaborative work.
	There is no distinction between the user environment and the development
	environment. Croquet is focused on interactions inside of a 3D shared
	space that is used for context based collaboration, where each user
	can see all of the others and what their current focus is. This allows
	for an extremely compelling shared experience. A new collaboration
	architecture/protocol called TeaTime has been developed to enable
	this functionality. The rendering architecture is built on top of
	OpenGL (Woo et al., 1999).},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Smith2005,
author = {David Smith and Andreas Raab and Yoshiki Ohshima and David P Reed and Alan Kay},
  title = {Filters and tasks in Croquet},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {50--56},
  __markedentry = {[C5187727:6]},
  abstract = {Croquet is a collaborative 3D platform that allows users to work together
	to create and share ideas. We are developing an architecture that
	incorporates the ideas of filters and controls for 3D to solve this
	problem. Our model uses the Croquet 2D portals as view filters that
	can modify the nature of the content displayed on the other side
	of the filter. Another problem is that this collaborative sharing
	of interfaces tends to be complex. A new approach to this, an extension
	of the model-view-controller approach pioneered in Smalltalk is described.
	This extension of MVC to collaborative 3D user interface design consists
	of interactors, tasks, and replicants. This architecture solves the
	collaboration UI problem in a way that makes it quite easy for the
	designer to create robust multi-user applications without having
	to manage the divergent states and goals of each user. The programmer
	can focus on the design of an extensible system as if he is dealing
	with a single user.},
  issn = {0769523250},
  keywords = {Croquet 2D portals, Filters, Information filters, collaborative 3D
	platform, collaborative 3D user interface design, graphical user
	interfaces, groupware, model-view-controller approach, portals, smalltalk,
	user interface management systems, view filters},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Smith2004,
author = {D Smith and a Raab and D Reed and a Kay},
  title = {Croquet: a menagerie of new user interfaces},
  booktitle = {Proceedings. Second International Conference on Creating, Connecting
	and Collaborating through Computing, 2004.},
  year = {2004},
  pages = {4--11},
  __markedentry = {[C5187727:6]},
  abstract = {A new architecture like Croquet presents numerous opportunities and
	challenges to create useful interfaces to enable access to the underlying
	power of the system. In particular, our focus on an integrated 2D
	and 3D system ensures that we have a rich intellectual environment
	within which to explore. This experience is similar to the development
	of the original modern windowing user interface created by Alan Kay,
	his team at Xerox Pare, and his Squeak team (Ingalls et al., 2002;
	Kay, 1996). Just as those teams did, we also have an infrastructure
	that is rich enough to allow us to perform some deep exploration
	into the presentation and manipulation of rich media expressed in
	3D, and in the negotiations through these rich media worlds. A number
	of key technologies will be discussed including dynamic movable portals,
	floating 3D windows, true 3D creation tools, live teleporting snapshots,
	and completely new concepts such as 3D portals.},
  issn = {0-7695-2166-5},
  keywords = {3D graphics, 3D portals, Chromium, Collaboration, Collaborative work,
	Croquet, Floors, Graphics, Humans, Laboratories, OpenGL, Peer to
	peer computing, Squeak team, TeaTime, Xerox Pare, computer graphics,
	dynamic movable portals, floating 3D windows, graphical user interfaces,
	live teleporting snapshots, peer-to-peer computing, portals, smalltalk,
	true 3D creation tools, user interfaces},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Stearns2006,
author = {Howard Stearns and Joshua Gargus and Martin Schuetze and Julian Lombardi},
  title = {A language supporting direct manipulation of component-based object
	construction and deconstruction in collaborative croquet spaces},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {136--141},
  __markedentry = {[C5187727:6]},
  abstract = {We describe the language architecture of Brie, a framework for authoring
	3D spaces and user interfaces. Brie is designed to take advantage
	of the unique social characteristics of the Croquet collaboration
	architecture, in particular by lowering the bar for content creation,
	thus greatly expanding the community of content developers. This
	is achieved through a 3D direct-manipulation interface to objects.
	To support this, the Brie architecture consists of a prototype-based
	language extension to Squeak with flexible inheritance, demand-driven
	evaluation, dependency-directed backtracking, and a special copy
	algorithm that conditionally copies dependent references},
  issn = {0769525636},
  keywords = {Component architectures, Computer architecture, Costs, Games, Graphics,
	Information technology, Online Communities/Technical Collaboration,
	Programming profession, Space technology, authoring systems, collaborative
	Croquet 3D spaces, component-based object construction, component-based
	object deconstruction, content creation, distributed programming,
	groupware, object-oriented programming, simplified distributed authoring,
	user interface elements, user interfaces},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Steinert2012,
author = {Bastian Steinert and Damien Cassou and Robert Hirschfeld},
  title = {CoExist: Overcoming Aversion to Change - Preserving Immediate Access
	to Source Code and Run-time Information of Previous Development States},
  booktitle = {Proceedings of the 8th symposium on Dynamic languages},
  year = {2012},
  pages = {107--118},
  __markedentry = {[C5187727:6]},
  issn = {978-1-4503-1564-7},
  keywords = {continuous testing, continuous versioning, debugging, evolution, explore-first
	programming, fault localization, prototyping},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://doi.acm.org/10.1145/2384577.2384591}
}

@INPROCEEDINGS{Steinert2009a,
author = {B Steinert and M Grunewald and S Richter and J Lincke and R Hirschfeld},
  title = {Multi-user multi-account interaction in groupware supporting single-display
	collaboration},
  booktitle = {2009 5th International Conference on Collaborative Computing: Networking,
	Applications and Worksharing},
  year = {2009},
  pages = {--},
  __markedentry = {[C5187727:6]},
  abstract = {Combining support for single display collaboration with support for
	asynchronous and remote collaboration in one groupware challenges
	some basic assumptions of application design and brings up new requirements
	for application platforms. While user accounts are central in many
	kinds of groupware, they are not respected in groupware support for
	multi-user single-screen interaction. Current support for this interaction
	paradigm does not allow users to act on their own behalf; they have
	to act on behalf of a host user. We suggest an approach to distinguish
	the interactions with different users in multi-user single-screen
	scenarios. Our approach enables applications to link actions to the
	acting user's account. We describe the integration of suggested concepts
	in the groupware ProjectTalk, an application for managing XP projects
	that supports multi-user single-screen interaction. All interacting
	users are allowed to work with ProjectTalk on their own behalf.},
  issn = {978-963-9799-76-9},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Steinert2010,
author = {Bastian Steinert and Michael Haupt and Robert Krahn and Robert Hirschfeld},
  title = {Continuous selective testing},
  booktitle = {Lecture Notes in Business Information Processing},
  year = {2010},
  volume = {48 LNBIP},
  pages = {132--146},
  __markedentry = {[C5187727:6]},
  abstract = {A manual and explicit activity, the frequent selection and execution
	of tests requires considerable discipline. Our approach automatically
	derives a subset of tests based on actual modifications to the code
	base at hand, then continuously executes them transparently in the
	background, and so supports developers in instantly assessing the
	effect of their coding activities with respect to the overall set
	of unit tests to be passed. We apply techniques of selective regression
	testing, mainly relying on dynamic analysis. By taking advantage
	of the internal program representation available in IDEs, we do not
	need to rely on expensive comparisons of different program versions
	to detect modified code entities. Â© Springer-Verlag Berlin Heidelberg
	2010.},
  issn = {9783642130533},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Steinert2014,
author = {Bastian Steinert and Robert Hirschfeld},
  title = {How to Compare Performance in Program Design Activities : Towards
	an Empirical Evaluation of CoExist},
  booktitle = {Design Thinking Research: Building Innovation Eco-Systems},
  year = {2014},
  pages = {219--238},
  __markedentry = {[C5187727:6]},
  issn = {9783319013039},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Steinert2012a,
author = {Bastian Steinert and Robert Hirschfeld},
  title = {Applying Design Knowledge to Programming},
  booktitle = {Design Thinking Research: Studying Co-Creation in Practice},
  year = {2012},
  pages = {259--277},
  __markedentry = {[C5187727:6]},
  abstract = {Arguably programming involves design: computational logic â€“ the
	program â€“ is constantly reorganized to keep complexity manageable
	and provide for current and future coding activities to be feasible.
	However, design practices have gained less attention in the field
	of programming, even though decades of research on design have led
	to a large body of knowledge about theories, methods, and best practices.
	This chapter reports on the first results of our research efforts
	to transfer and apply design knowledge to programming activities.
	We improved tool support for software developers in two respects,
	both of which are based on key concepts in design practices: continuous
	feedback and ease of exploration.},
  issn = {978-3-642-21642-8},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/10.1007/978-3-642-21643-5}
}

@INPROCEEDINGS{Steinert2009,
author = {Bastian Steinert and Michael Perscheid and Martin Beck and Jens Lincke and Robert Hirschfeld},
  title = {Debugging into examples leveraging tests for program comprehension},
  booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes
	in Artificial Intelligence and Lecture Notes in Bioinformatics)},
  year = {2009},
  volume = {5826 LNCS},
  pages = {235--240},
  __markedentry = {[C5187727:6]},
  issn = {3642050301},
  keywords = {Dynamic analysis, Program comprehension, Test coverage},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Steinert,
author = {Bastian Steinert and Marcel Taeumel and Jens Lincke and Tobias Pape and Robert Hirschfeld},
  title = {CodeTalk-Conversations About Code},
  pages = {--},
  __markedentry = {[C5187727:6]},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Sunaga2009,
author = {Takeshi Sunaga and Koji Yokokawa and Jae Sung Won},
  title = {Integration of expression and analysis using constructive scrapbook},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {48--53},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper, we present how to use the Constructive Scrapbook to
	integrate expression and analysis and propose that its design is
	effective for learning. Constructive Scrapbook is a computer application
	in which the user arranges compositions of pictures in a two-dimensional
	space, makes various compositions, and switches them freely. Although
	subjective expression and objective analysis are treated as different
	activities in the educational world today, we have designed a tool
	that handles both types of activities simultaneously through constructive
	learning. Our objective is to have children and ordinary persons
	use various facets to analyze their expressions and then create new
	expressions.We held a workshop using the Constructive Scrapbook.
	The results show that the tool has the potential to make the user
	analyze expressions, extract significances to consider them deeply,
	and then create new expressions.},
  issn = {9780769536200},
  keywords = {Art, Computer applications, Constructive Scrapbook tool, Documentation,
	Graphics, International collaboration, Joining processes, Numerical
	analysis, Painting, Software, Squeak, Switches, cognition, computer
	aided instruction, constructionism, constructive learning, education,
	objective analysis, pictures composition, subjective expression,
	two-dimensional space},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Suslov2012,
author = {Nikolai Suslov},
  title = {Krestianstvo SDK towards end-user mobile 3D virtual learning environment},
  booktitle = {Proceedings - 10th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2012},
  year = {2012},
  pages = {9--14},
  __markedentry = {[C5187727:6]},
  abstract = {Virtual worlds are setting up new standards in software engineering
	for building virtual learning environments (VLE) today. Open Qwaq,
	which is based on Open Croquet architecture offers to both programmers
	and domain experts nearly an unlimited capabilities for creating
	novel computer-based simulated environments. But, even being built
	using a highly dynamic, reflective language and self-exploratory
	Squeak/Smalltalk IDE, it still suffers from tight bindings to client-server
	architecture, platform dependence and third-party tools. That leads
	to unnecessary inflexibility to develop or deploy new or existing
	virtual worlds on heterogeneous ad hoc networks. The article describes
	efforts being done for bringing Open Croquet/OpenQwaq SDK more closer
	to a mobile VLE development platform. Krestianstvo SDK is proposed
	as a one-click application, for instantly setting up a VLE in classroom's
	network, ART installation, educational disc and similar environments
	with support of augmented reality and collaborative tangible user
	interfaces.},
  issn = {9780769546728},
  keywords = {augmented reality, virtual learning environment, virtual worlds},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Suzuki2003,
author = {G Suzuki and S Kohtsuki and M Yamagishi and K Sugahara},
  title = {Toward a seamless learning environment},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {130---},
  __markedentry = {[C5187727:6]},
  abstract = {A new plan and a design concept to develop an e-Learning environment
	using Squeak, is proposed. The following key points for motivation
	design are described: Flexibility between learners and teachers,
	and portability for field environment.},
  issn = {0-7695-1975-X},
  keywords = {Computer science education, Educational technology, Electronic learning,
	Internet, Learning systems, Machine learning, Peer to peer computing,
	Personal digital assistants, Roads, Squeak, Timing, computer aided
	instruction, design concept, e-Learning environment development,
	education environment design, educational aids, field environment,
	flexibility, formal specification, learner, learning environment,
	motivation design, portability, software development management,
	teacher},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Taeumel2014,
author = {Marcel Taeumel},
  title = {Interleaving of Modification and Use in Dataflow-driven Tool Development},
  year = {2014},
  pages = {--},
  __markedentry = {[C5187727:6]},
  issn = {9781450332101},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Taeumel2014a,
author = {Marcel Taeumel and Tim Felgentreff and Robert Hirschfeld},
  title = {Applying Data-driven Tool Development to Context-oriented Languages},
  booktitle = {Proceedings of 6th International Workshop on Context-Oriented Programming
	- COP'14},
  year = {2014},
  pages = {1--7},
  __markedentry = {[C5187727:6]},
  issn = {9781450328616},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dl.acm.org/citation.cfm?id=2637066.2637067}
}

@INPROCEEDINGS{Taeumel2012,
author = {Marcel Taeumel and Bastian Steinert and Robert Hirschfeld},
  title = {The VIVIDE programming environment: connecting run-time information
	with programmers' system knowledge},
  booktitle = {Proceedings of the ACM international symposium on New ideas, new
	paradigms, and reflections on programming and software},
  year = {2012},
  pages = {117--126},
  __markedentry = {[C5187727:6]},
  issn = {978-1-4503-1562-3},
  keywords = {concurrent views, dynamic analysis, navigation, program comprehension,
	programming environments, source code},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://doi.acm.org/10.1145/2384592.2384604}
}

@INPROCEEDINGS{Takeda2003,
author = {T Takeda},
  title = {A design for computer supported collaborative learning using concerns
	oriented model},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {89--95},
  __markedentry = {[C5187727:6]},
  abstract = {This paper describes a new technique and interface named Concerns
	Oriented Modeling to design cognitive user models and distributed
	application architecture for computer supported collaborative learning
	(CSCL). It is based on Linda, a coordination model for distributed
	network systems.},
  issn = {0-7695-1975-X},
  keywords = {Application software, Collaboration, Collaborative software, Collaborative
	work, Computer applications, Computer architecture, Computer interfaces,
	Concerns Oriented Modeling, Linda coordination model, Programming,
	Software design, cognitive systems, cognitive user model design,
	computer supported collaborative learning, courseware, distributed
	application architecture, distributed computing, distributed network
	system, distributed processing, groupware, learning environment,
	learning system, object-oriented programming, software development,
	student collaboration, user modelling},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Takemura2006,
author = {Kentaro Takemura and Yasuo Shirai and Tetsuo Ogino and Hideyuki Takada and Tsuneo Jozen},
  title = {A proposal and initial design of the morph packaging system},
  booktitle = {Proceedings - Fifth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2007},
  year = {2006},
  pages = {15--21},
  __markedentry = {[C5187727:6]},
  abstract = {In these days, the number of educators who use Squeak in their education
	is increasing. However, most of them do not have enough experience
	in teaching with Squeak and are looking for how to educate children
	with it. We introduce a new system, which helps us to generate new
	specialized morph kits. This system helps educators to create and
	share good methods of Squeak education by the specialized kits. We
	held a workshop using a specialized kit, "animation Morph ", and
	found that the specialized kit was effective in squeak education.
	We also compare existing Squeak systems and consider what is important
	for the new system.},
  issn = {0769528066},
  keywords = {Computer science education, Educational institutions, Educational
	programs, Information science, Information technology, Packaging,
	Physics computing, Physics education, Proposals, Smalltalk-based
	programming environment, Squeak education, courseware, morph kits,
	morph packaging system, programming environments, smalltalk, teaching},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Tanaka2003,
author = {K Tanaka},
  title = {Tea-Time museum: Croquet as a browsing and searching environment
	for digital libraries},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {12--17},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper, we describe a research project in the planning stage,
	called a Tea-Time Museum, that aims at exploration of a new environment
	for content browsing and multi-user collaboration based on contents.
	Tea (currently, Croquet) is a next generation collaborative 3D user
	environment proposed by Reed et al. (2002). Although Croquet is implemented
	as a collaborative 3D environment for users, new constructs, such
	as the notion of portals are considered to be key technologies for
	constructing the next generation digital libraries. We provide our
	interpretations of Croquet constructs from the view point of hypermedia
	processing, which will be useful for using Croquet as a basis for
	constructing a new method of content browsing/searching and a new
	collaborative (social) search based on Web content.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INCOLLECTION{Tanter2003,
author = {Denis Caromel and Pierre Cointe},
  title = {Partial behavioral reflection},
  publisher = {Springer},
  year = {2003},
  volume = {38},
  number = {11},
  pages = {27--27},
  __markedentry = {[C5187727:6]},
  issn = {1581137125},
  journal = {ACM SIGPLAN Notices},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://link.springer.com/chapter/10.1007/978-3-540-71836-9_3}
}

@INPROCEEDINGS{Thalmann2006a,
author = {Florian Thalmann and Markus Gaelli},
  title = {Jam tomorrow: Collaborative music generation in croquet using OpenAL},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {73--78},
  publisher = {IEEE},
  __markedentry = {[C5187727:6]},
  abstract = {We propose a music generation software that allows large numbers of
	users to collaborate. In a virtual world, groups of users generate
	music simultaneously at different places in a room. This can be realized
	using OpenAL sound sources. The generated musical pieces have to
	be modifiable while they are playing and all collaborating users
	should immediately see and hear the results of such modifications.
	We are testing these concepts within Croquet by implementing a software
	called Jam Tomorrow},
  issn = {0769525636},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://ieeexplore.ieee.org/xpls/abs_all.jsp?arnumber=4019379}
}

@INPROCEEDINGS{Thamsen2012,
author = {Lauritz Thamsen and Anton Gulenko and Michael Perscheid and Robert Krahn and Robert Hirschfeld and David a Thomas},
  title = {Orca: A single-language web framework for collaborative development},
  booktitle = {Proceedings - 10th International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2012},
  year = {2012},
  pages = {45--52},
  __markedentry = {[C5187727:6]},
  issn = {9780769546728},
  keywords = {Collaborative Web Development, JavaScript, Orca, Smalltalk},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Tsuji2006,
author = {Takaaki Tsuji},
  title = {Learning in a distance and collaborative course that connected Kyoto
	University and UCLA},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {58--65},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper, I'll report the learning in a distance and collaborative
	course that connected Kyoto University and UCLA. This course on Kyoto
	University side consisted of various activities, for example, a distance
	lecture by instructors and guest speakers, a visit to UCLA, group
	work for designing educational content by using squeak, and an open
	workshop held with Horikawa High School. The author noticed in the
	quantitative and qualitative data collected to research the various
	activities that students in this course at Kyoto University have
	experienced authentic learning with others mediated by information
	technology or computers},
  issn = {0769525636},
  keywords = {Collaboration, Collaborative work, Computer interfaces, Computer science
	education, Cultural differences, Educational institutions, Global
	communication, Information technology, Kyoto University, Tides, UCLA,
	collaborative course, courseware, distance learning, educational
	courses},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Umezawa2003,
author = {M Umezawa and K Abe and S Nishihara and T Kurihara},
  title = {NetMorph - an intuitive mobile object system},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {32--39},
  __markedentry = {[C5187727:6]},
  abstract = {NetMorph is a mobile object system that provides a seamless integration
	of network and desktop. We introduce the notion of network location
	to desktop objects. By combining desktop 2D coordinates with network
	locations, NetMorph provides free intuitive cyber spaces. It helps
	computer beginners to acquire skills of network computing in a very
	natural way.},
  issn = {0-7695-1975-X},
  keywords = {Application software, Collaboration, Computer architecture, Computer
	networks, Humans, Internet, NetMorph system, Tiles, desktop 2D coordinate,
	desktop object, distributed computing, distributed programming, expert
	systems, interactive environment, intuitive cyber space, intuitive
	mobile object system, mobile computing, network computing, network
	integration, network location, networking system, object-oriented
	programming, visualization},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Valente2009,
author = {Lu Valente and Ant rio},
  title = {What if you created your own digital adventurers' park?},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {78--83},
  __markedentry = {[C5187727:6]},
  abstract = {In the ambient of a summer school, we have proposed to a group of
	nearly 40 students between 10 and 15 years old to create a digital
	adventures' park with Squeak. None of them knew the software nor
	had previous had programming knowledge and many little over the basic
	competences for the use of a computer, though they showed a special
	interest in computers. In this text we intend to approach some of
	the attitudes demonstrated by the students in the face of the challenge
	proposed at the course and their imaginary's transposition to Squeak's
	environment, in an ecologic perspective of the media. We will pay
	special attention to creativity's emergency which seems to us anchor
	the development of object-oriented programming competences in inexperienced
	programmers. In addition we will also refer to the self-learning
	and collaborative learning aspects resulting from the interaction
	between Â¿creatorsÂ¿ and Â¿programmersÂ¿, in light of their importance
	in learning environments without a teacher.},
  issn = {9780769536200},
  keywords = {Adders, Computer science education, Computers, Concrete, Educational
	institutions, IEC, International collaboration, Joining processes,
	Object oriented programming, Programming profession, Proposals, Squeak,
	Squeak environment, children programming, collaborative learning
	aspects, computer aided instruction, creativity, digital adventure
	park, ecologic perspective of media, object-oriented programming,
	self-learning},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Verwaest2009,
author = {Toon Verwaest and Lukas Renggli},
  title = {Safe reflection through polymorphism},
  booktitle = {CASTA '09: Proceedings of the first international workshop on Context-aware
	software technology and applications},
  year = {2009},
  pages = {21--24},
  publisher = {ACM},
  __markedentry = {[C5187727:6]},
  abstract = {Code executed in a fully reflective system switches back and forth
	between application and interpreter code. These two states can be
	seen as contexts in which an expression is evaluated. Current language
	implementations obtain reflective capabilities by exposing objects
	to the interpreter. However, in doing so these systems break the
	encapsulation of the application objects. In this paper we propose
	safe reflection through polymorphism, i.e. by unifying the interface
	and ensuring the encapsulation of objects from both the interpreter
	and application context. We demonstrate a homogeneous system that
	defines the execution semantics in terms of itself, thus enforcing
	that encapsulation is not broken.},
  issn = {978-1-60558-707-3},
  keywords = {schemetalk},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://dx.doi.org/10.1145/1595768.1595776}
}

@ARTICLE{Wuyts2004,
author = {Roel Wuyts and St Ducasse},
  title = {Unanticipated Integration of Development Tools using the Classification
	Model},
  journal = {Journal of Computer Languages Systems and Structures},
  year = {2004},
  volume = {30},
  pages = {63--77},
  number = {1-2},
  __markedentry = {[C5187727:6]},
  abstract = {The increasing complexity of software development spawns lots of specialised
	tools to edit code, employ UML schemes, integrate documentation,
	and so on. The problem is that the tool builders themselves are responsible
	for making their tools interoperable with other tools or development
	environments. Because they cannot anticipate all other tools they
	can integrate with, a lot of tools cannot co-operate. This paper
	introduces the classication model, a lightweight integration medium
	that enables unrelated tools that were not meant to be integrated
	to cooperate easily. Moreover, the tool integration is done by a
	tool integrator, and not by the tool builder. To validate this claim,
	we show how to integrate several third-party tools using the classication
	model, and how it forms the foundation for the StarBrowser, a Smalltalk
	browser integrating different tools.},
  keywords = {recast04 scg pub jb04 decomp pub},
  owner = {C5187727},
  timestamp = {2015.06.26},
  url = {http://scg.unibe.ch/archive/papers/Wuyt04aClassifications.pdf}
}

@INPROCEEDINGS{Yamamiya2005,
author = {Takashi Yamamiya},
  title = {Meta-toys workshop and environment with Squeak},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {21--26},
  __markedentry = {[C5187727:6]},
  abstract = {This paper discussed an idea of curriculum and the software project
	named meta-toys. The first primary motivation of the curriculum was
	designed for learning way of media-art, but now the goal is more
	comprehensive for leading generic computer literacy. Through the
	workshop, students could learn not only how to use computer software,
	but also how to make software for works along with own independent
	needs. Meta-toys workshop introduces the way of thinking about how
	to use computer effectively with making presentation tools. In addition
	to show the workshop, we describe necessary software features for
	the workshop.},
  issn = {0769523250},
  keywords = {Squeak scripting system, authoring systems, computer aided instruction,
	computer literacy, computer software, educational courses, humanities,
	meta-toys workshop, software project, user interfaces},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yamamiya2004,
author = {Takashi Yamamiya},
  title = {Skeleton - Easy simulation system},
  booktitle = {Proceedings - Second International Conference on Creating, Connecting
	and Collaborating Through Computing},
  year = {2004},
  pages = {50--53},
  __markedentry = {[C5187727:6]},
  abstract = {Skeleton is a visual scripting environment as an extension of Squeak
	etoy with Connectors system to make mathematical and physical simulation
	for non professional computer user. Squeak etoy system is a unique
	attempt to provide effective way of programming for children in learning
	environment. Skeleton makes logical relationships among graphical
	objects in the etoy system with spreadsheets-style interface, and
	users can describe object's behavior in declarative representation.
	Concreteness is one of the key words of end user scripting. Direct
	manipulation with objects on the screen is helpful to understand
	what is happened in your computer. Skeleton's spreadsheets style
	interface realizes this concreteness to show any input and output
	data same time. Sometime user scripting system like etoy has a problem
	of modularity. This aspect is important as a basis of reusing, thus
	Skeleton has some features for reusing. Tree structured naming system
	like ECMAScipt is used to access to Skeleton object by name. And
	modularity is realized by sheet-card mechanism that is possible to
	reuse a behavior of objects in another context in Skeleton.},
  issn = {0769521665},
  keywords = {Computational modeling, Computer science education, Computer simulation,
	Concrete, Connectors, Connectors system, ECMAScipt, Joining processes,
	Physics computing, Programming profession, Propulsion, Skeleton,
	Squeak etoy, children learning environment, computer aided instruction,
	easy simulation system, end user scripting, graphical objects, graphical
	user interfaces, logic programming languages, mathematical simulation,
	nonprofessional computer user, object-oriented programming, physical
	simulation, programming for children, spreadsheets-style interface,
	tree structured naming system, user interfaces, visual programming,
	visual scripting environment},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yamamiya2003,
author = {T Yamamiya},
  title = {LanguageGame - an interactive parser generator},
  booktitle = {First Conference on Creating, Connecting and Collaborating Through
	Computing, 2003. C5 2003. Proceedings.},
  year = {2003},
  pages = {110--110},
  publisher = {IEEE Computer Society},
  __markedentry = {[C5187727:6]},
  abstract = {LanguageGame is a tool for a non-professional computer user to make
	a new programming language. Playing with LanguageGame allows a user
	to make an original new programming language. In order to give an
	instruction to a computer, now we have many ways such as selecting
	menu, push button, drag icon or so. Recent researches of computer
	user interface have developed various methods of interacting with
	computer. Above all, with using WYSIWYG (What You See Is What You
	Get) way, user interface becomes very rich and useful for non-engineer
	users. But yet, the most fundamental way of having a dialog with
	computer is to input a sequence of command kind of programming language.
	Using WYSIWIG style has advantages when a user uses a computer instead
	of real paper. But to deal with more abstract or involved matter,
	using a programming language has more benefit because symbols are
	more stable and we can use powerful idea as a recursiveness or a
	reference with such language. The importance of programming language
	could never change however GUI will be more improved. There are various
	languages in the world, and there are many interesting aspects and
	tastes in each language. As the grammars of the programming language
	are very interesting, developing a language must be more fun. Of
	course making a language seemed to be difficult. And it was planned
	to develop a parser generator that common people can make their own
	language easily. A parser generator is one of the most basic software
	in computer. Historically, various programming languages have been
	developed. And to make developing their parser easily, the technique
	of automatic parser generation was found. Now the parser generator
	becomes established technology. LanguageGame is such a parser generator
	that has graphical user interface. Contrary to popular professional
	parser generator like yacc/lex in UNIX platform, it is intended to
	use non-professional computer users, students and children. Playing
	with LanguageGame, users can learn and build simple parser with pretty
	graphical interface, drag-and-drop and graphical syntax tree representation.
	In current implementation, LanguageGame is developed on Squeak -
	a free open environment of Smalltalk. Hereby, the user grammar with
	LanguageGame can use all objects like a sketch a- nd sound in Squeak.},
  issn = {0-7695-1975-X},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yamamiya2009,
author = {Takashi Yamamiya and Alessandro Warth and Ted Kaehler},
  title = {Active essays on the web},
  booktitle = {7th International Conference on Creating, Connecting and Collaborating
	through Computing - C5 2009},
  year = {2009},
  pages = {3--10},
  __markedentry = {[C5187727:6]},
  abstract = {This paper describes "active essays" and their implementation with
	Internet technology. An active essay combines a written essay, program
	fragments, and the resulting live simulations into a single cohesive
	narrative. We believe the integration of programming and natural
	language makes a superior teaching medium for expressing mathematical,
	scientific, and even literary ideas. It is especially effective when
	it can be read, run, and authored in a Web browser. We review our
	previous implementations of active essays on the Web. Chalkboard
	is our latest active essay framework. We discuss Chalkboard's features,
	examples, design decisions, and unresolved issues.},
  issn = {9780769536200},
  keywords = {Animation, Chalkboard, Computational modeling, Computer languages,
	Humans, International collaboration, Internet, Internet technology,
	Joining processes, Mathematical programming, Natural languages, Web
	browser, Web sites, active essays, computer aided instruction, literature,
	live simulations, natural language, online front-ends, program fragments,
	programming language, programming languages, teaching medium, written
	essay},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yanase2007,
author = {D Yanase and T Fujioka},
  title = {Promoting Mathematics as a Tool for a PBL Type High School Mathematics
	Curriculum - Its Design and Evaluation},
  booktitle = {Fifth International Conference on Creating, Connecting and Collaborating
	through Computing (C5 '07)},
  year = {2007},
  pages = {8--14},
  __markedentry = {[C5187727:6]},
  abstract = {We have designed a PBL curriculum for "period for integrated study"
	using mathematics as a tool for problem solving and evaluated its
	effectiveness. Students learned two methods, which were how to use
	differential equation as a tool, and how to choose their own problems,
	and solve them. We introduced a method using spreadsheet in order
	to calculate numeric solutions of differential equations. We instructed
	students so that they would choose a problem that required differential
	equation in order to solve it. The curriculum was practiced at Kyoto
	Municipal Horikawa Senior High School in Kyoto, Japan from October
	2005 to September 2006. The curriculum was proved effective according
	to the outcome of students' researches, the results of questionnaires
	given after finishing the curriculum, and the impressions by the
	teachers who participated in it. We also found ideas for future improvement.},
  issn = {0-7695-2806-6},
  keywords = {Educational institutions, Finishing, International collaboration,
	Japan, Joining processes, Kyoto Municipal Horikawa Senior High School,
	Mathematics, PBL type high school mathematics curriculum, Problem-solving,
	differential equation, differential equations, education, mathematics
	computing, period for integrated study, spreadsheet},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Ye2004,
author = {Juan Ye Juan Ye and Zhiyong Peng Zhiyong Peng},
  title = {A Squeak-based educational software - Happy Learning},
  booktitle = {Proceedings. Second International Conference on Creating, Connecting
	and Collaborating through Computing, 2004.},
  year = {2004},
  pages = {138--145},
  __markedentry = {[C5187727:6]},
  abstract = {This paper introduces a Squeak-based educational software - Happy
	Learning. The software provides powerful tools for carrying out virtual
	experiments, doing exercises as well as tests, and making courseware.
	It has rich resources which consist of all kinds of learning materials,
	such as a large amount of courseware prepared in advance, and exercises
	from various subjects. In order to organize the resources efficiently,
	we introduce object deputy model. The model provides view mechanisms,
	rich semantics, multiple inheritances, and multiple classifications,
	which can enhance the performance and functions of the system.},
  issn = {0-7695-2166-5},
  keywords = {Computer architecture, Computer science education, Educational programs,
	Happy Learning, Libraries, Multimedia systems, Speech synthesis,
	Squeak-based educational software, Testing, courseware, learning
	materials, multimedia computing, object deputy model, object-oriented
	programming, resource organization, smalltalk, software engineering,
	software tools, student experiments, virtual experiments},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yokokawa2005,
author = {Koji Yokokawa},
  title = {Swimmy: A framework of multi-agent instruction system for children},
  booktitle = {Proceedings - Third International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2005},
  year = {2005},
  volume = {2005},
  pages = {27--32},
  __markedentry = {[C5187727:6]},
  abstract = {The author has developed a framework for an interactive programmed
	instruction system, named Swimmy, in the Squeak eToys. This system
	is based on a multi-agent architecture for adaptability and open-endedness.
	Therefore, Swimmy is flexible for complex situations in classrooms.
	Moreover, Swimmy aims to be fun and easy to use for children. Children
	interact with software agents just like interacting with pets. Children
	can program the agents with the aid of a visual tool just like painting.},
  issn = {0769523250},
  keywords = {Application software, Computer architecture, Displays, Educational
	technology, Mice, Painting, Positron emission tomography, Programming
	profession, Squeak etoys, Swimmy, Timing, computer aided instruction,
	interactive programmed instruction system, interactive programming,
	interactive systems, multi-agent systems, multiagent architecture,
	software agents, user interfaces, visual tool},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Yokokawa2010,
author = {Koji Yokokawa and Takeshi Sunaga},
  title = {Using Zuzie2 to exchange viewpoints for a broader outlook},
  booktitle = {8th International Conference on Creating, Connecting and Collaborating
	through Computing, C5 2010},
  year = {2010},
  pages = {35--40},
  __markedentry = {[C5187727:6]},
  abstract = {In this paper, we present Zuzie2, a computer application designed
	to help people extend their interpretation of the meaning of their
	activities, and propose that Zuzie2 is effective in cultivating the
	power of understanding and expression. In an earlier paper we presented
	the Constructive Scrapbook computer application which has the potential
	to make the user analyze expressions, extract significances to consider
	them deeply, and then create new expressions. Zuzie2 is an improved
	version of the Constructive Scrapbook. Using this tool, in the same
	way as with the earlier version, the user arranges compositions of
	pictures in a two-dimensional space, makes various compositions,
	and switches them freely. In Zuzie2, we have added a new function
	that enables users to import composition grounds that show the viewpoints
	of other users into their works. Our objective is to have children
	and ordinary people use various facets to analyze their activities
	and then create new expressions. Humans think and express something
	in a conceptual framework such as ordering, classification, or quantity.
	However, the thoughts of a single person have limitations due to
	the fixed frame of viewpoint. We have designed this tool so that
	the viewpoints of other persons combine with the user's work to form
	new expressive works. We held a workshop using the Zuzie2 application.
	The results show that this tool has the potential to make users analyze
	their activities, import other viewpoints to consider them deeply,
	and then create new expressions.},
  issn = {9780769540290},
  keywords = {Art, Computer applications, Documentation, Graphics, Humans, International
	collaboration, Joining processes, Numerical analysis, Painting, Switches,
	Zuzie2, computer aided instruction, computer application, constructive
	scrapbook, expression analysis, humanities, viewpoints exchanging},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

@INPROCEEDINGS{Zettsu2006,
author = {Koji Zettsu and Katsumi Tanaka},
  title = {Reconfigurable search engine for exploiting search knowledge},
  booktitle = {Proceedings - Fourth International Conference on Creating, Connecting
	and Collaborating through Computing, C5 2006},
  year = {2006},
  pages = {16--23},
  __markedentry = {[C5187727:6]},
  abstract = {We propose an approach for sharing and exploiting search knowledge
	(i.e., search skills or know-how) throughout a community of users.
	This is achieved by making a search process reconfigurable according
	to the search knowledge. We define the following categories of software
	components comprising a search process: information source, retrieval,
	analysis, and cataloging. We are able to develop this search process
	by assembling and tuning these components. We also explain our prototype
	system implemented using Croquet and Squeak},
  issn = {0769525636},
  keywords = {Assembly, Communications technology, Informatics, Information analysis,
	Internet, Knowledge management, Prototypes, Software prototyping,
	Web pages, cataloguing, information cataloging, information retrieval,
	information source, reconfigurable search engine, search engines,
	search knowledge exploitation, search knowledge sharing},
  owner = {C5187727},
  timestamp = {2015.06.26}
}

